
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'sequencerightASSIGNPLUS_ASSIGNMINUS_ASSIGNPOWER_ASSIGNTIMES_ASSIGNDIVIDE_CEIL_ASSIGNDIVIDE_FLOOR_ASSIGNDIVIDE_ASSIGNEQUALS_ASSIGNUNEQUALS_ASSIGNGREATER_EQUALS_ASSIGNSMALLER_EQUALS_ASSIGNGREATER_THAN_ASSIGNSMALLER_THAN_ASSIGNAND_ASSIGNOR_ASSIGNXOR_ASSIGNMOD_ASSIGNEXP_ASSIGNrightLAMBDArightCALLleftORleftXORleftANDleftEQUALSUNEQUALSleftGREATER_THANSMALLER_THANSMALLER_EQUALSGREATER_EQUALSleftPLUSMINUSleftTIMESDIVIDEDIVIDE_CEILDIVIDE_FLOORMODrightPOWEREXPleftIMAGrightNOTUPLUSUMINUSAND AND_ASSIGN ASSIGN BEGIN CLOSED_BRACKETS COLON COMMA DIVIDE DIVIDE_ASSIGN DIVIDE_CEIL DIVIDE_CEIL_ASSIGN DIVIDE_FLOOR DIVIDE_FLOOR_ASSIGN DOTS ECHO ELIF ELSE END ENDCOND EQUALS EQUALS_ASSIGN EXP EXP_ASSIGN FLOAT GREATER_EQUALS GREATER_EQUALS_ASSIGN GREATER_THAN GREATER_THAN_ASSIGN IDENTIFIER IF IMAG IN LAMBDA LAMBDA_ARROW LENGTH LET LOOP LOOPTHEN LPAREN MINUS MINUS_ASSIGN MOD MOD_ASSIGN NOT NUMBER OPEN_BRACKETS OR OR_ASSIGN PLUS PLUS_ASSIGN POWER POWER_ASSIGN RPAREN SEMICOLON SMALLER_EQUALS SMALLER_EQUALS_ASSIGN SMALLER_THAN SMALLER_THAN_ASSIGN THEN TIMES TIMES_ASSIGN UNEQUALS UNEQUALS_ASSIGN WHILE XOR XOR_ASSIGNatomar : NUMBERatomar : FLOATatomar : IDENTIFIER\narithmetic_expression : LPAREN expression RPAREN\nexpression : arithmetic_expression\n| comparison\n| sequence\n| assignment\narithmetic_expression : arithmetic_expression PLUS arithmetic_expression\n| arithmetic_expression MINUS arithmetic_expression\n| arithmetic_expression TIMES arithmetic_expression\n| arithmetic_expression DIVIDE arithmetic_expression\n| arithmetic_expression DIVIDE_CEIL arithmetic_expression\n| arithmetic_expression DIVIDE_FLOOR arithmetic_expression\n| arithmetic_expression MOD arithmetic_expression\n| arithmetic_expression EXP arithmetic_expression\n| arithmetic_expression AND arithmetic_expression\n| arithmetic_expression OR arithmetic_expression\n| arithmetic_expression XOR arithmetic_expression\n| arithmetic_expression POWER arithmetic_expression\narithmetic_expression : NOT   arithmetic_expression\n| MINUS arithmetic_expression %prec UMINUS\n| PLUS  arithmetic_expression %prec UPLUSarithmetic_expression : arithmetic_expression IMAGarithmetic_expression : atomar\ncomparison : arithmetic_expression comparison_op arithmetic_expression comparison_chain\n\ncomparison : arithmetic_expression comparison_op arithmetic_expression\n\ncomparison_chain : comparison_op arithmetic_expression comparison_chain\n\ncomparison_chain : comparison_op arithmetic_expression\ncomparison_op : GREATER_THAN\n| SMALLER_THAN\n| UNEQUALS\n| EQUALS\n| SMALLER_EQUALS\n| GREATER_EQUALSassignment : IDENTIFIER ASSIGN expression\nexpression : IDENTIFIER PLUS_ASSIGN expression\n           | IDENTIFIER MINUS_ASSIGN expression\n           | IDENTIFIER TIMES_ASSIGN expression\n           | IDENTIFIER POWER_ASSIGN expression\n           | IDENTIFIER DIVIDE_ASSIGN expression\n           | IDENTIFIER DIVIDE_FLOOR_ASSIGN expression\n           | IDENTIFIER DIVIDE_CEIL_ASSIGN expression\n           | IDENTIFIER GREATER_THAN_ASSIGN expression\n           | IDENTIFIER SMALLER_THAN_ASSIGN expression\n           | IDENTIFIER GREATER_EQUALS_ASSIGN expression\n           | IDENTIFIER SMALLER_EQUALS_ASSIGN expression\n           | IDENTIFIER EQUALS_ASSIGN expression\n           | IDENTIFIER UNEQUALS_ASSIGN expression\n           | IDENTIFIER AND_ASSIGN expression\n           | IDENTIFIER OR_ASSIGN expression\n           | IDENTIFIER XOR_ASSIGN expression\n           | IDENTIFIER EXP_ASSIGN expression\n           | IDENTIFIER MOD_ASSIGN expression\n\nsequence : BEGIN statements END\n         | BEGIN statements SEMICOLON END\n\nstatement : expression\n          | if_statement\n          | while_statement\n          | loop_statement\n\nstatements : statements SEMICOLON statement\n\nstatements : statement\n\nif_statement : IF expression THEN statements ENDCOND\n             | IF expression THEN statements else_elif_body ENDCOND\n\nelse_elif_body : ELIF IF expression THEN statements else_elif_body\n               | ELSE statements\n\nwhile_statement : WHILE expression THEN statements ENDCOND\n\nloop_statement : LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND\n\ninterval : OPEN_BRACKETS   expression COMMA expression CLOSED_BRACKETS\n         | CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS\n         | OPEN_BRACKETS   expression COMMA expression OPEN_BRACKETS\n         | CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS\nexpression : LAMBDA parameter LAMBDA_ARROW expression %prec LAMBDA\nparameter : LPAREN parameter_pos RPAREN\n          | IDENTIFIER\n          | empty\n\nparameter_pos : parameter_pos_list\n\nparameter_pos_list : IDENTIFIER COMMA parameter_pos_list\n                   | IDENTIFIER\n                   | parameter_keywords\n\nparameter_keywords : parameter_kw_list\n\nparameter_kw_list : IDENTIFIER COLON expression COMMA parameter_kw_list\n                  | IDENTIFIER COLON expression\n                  | parameter_infty\n\nparameter_infty : IDENTIFIER DOTS\n\nparameter_expr : parameter_pos_expr\n               | empty\n\nparameter_pos_expr : expression COMMA parameter_pos_expr\n                   | expression\n                   | parameter_keywords_expr\n\nparameter_keywords_expr : expression COLON expression COMMA parameter_keywords_expr\n                        | expression COLON expression\nempty :expression : expression LPAREN parameter_expr RPAREN %prec CALLexpression : LET assignment IN expression ENDCONDexpression : ECHO LPAREN expression RPAREN\n| LENGTH LPAREN expression RPAREN'
    
_lr_action_items = {'BEGIN':([0,2,15,19,20,29,30,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,147,155,156,165,167,169,172,176,179,180,189,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'$end':([1,28,86,],[0,-55,-56,]),'IDENTIFIER':([2,14,15,16,19,20,21,22,23,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,77,78,125,133,136,137,139,140,142,146,147,155,156,165,167,169,172,174,176,179,180,189,],[13,72,13,76,13,13,81,83,83,83,13,13,83,83,83,83,83,83,83,83,83,83,83,83,83,-30,-31,-32,-33,-34,-35,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,128,13,13,13,13,13,13,13,13,83,128,13,13,13,13,13,13,13,183,13,13,13,13,]),'LAMBDA':([2,15,19,20,29,30,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,147,155,156,165,167,169,172,176,179,180,189,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'LET':([2,15,19,20,29,30,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,147,155,156,165,167,169,172,176,179,180,189,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'ECHO':([2,15,19,20,29,30,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,147,155,156,165,167,169,172,176,179,180,189,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'LENGTH':([2,15,19,20,29,30,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,147,155,156,165,167,169,172,176,179,180,189,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'IF':([2,29,136,137,165,166,167,169,189,],[19,19,19,19,19,176,19,19,19,]),'WHILE':([2,29,136,137,165,167,169,189,],[20,20,20,20,20,20,20,20,]),'LOOP':([2,29,136,137,165,167,169,189,],[21,21,21,21,21,21,21,21,]),'LPAREN':([2,5,9,10,11,12,13,14,15,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,77,78,79,80,82,83,84,85,86,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,132,133,134,135,136,137,139,140,141,142,143,144,147,149,150,151,155,156,158,159,161,162,165,167,169,170,171,172,173,176,179,180,181,185,187,188,189,],[15,30,-5,-6,-7,-8,-3,71,15,77,78,15,15,15,15,15,-25,-1,-2,-55,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-24,15,-30,-31,-32,-33,-34,-35,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,30,15,15,30,30,-23,-3,-22,-21,-56,30,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,15,-4,15,30,30,15,15,15,15,-94,15,-26,-73,15,30,-96,-97,15,15,30,-29,30,-95,15,15,15,30,30,15,-28,15,15,15,30,30,30,30,15,]),'NOT':([2,15,19,20,22,23,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,142,147,155,156,165,167,169,172,176,179,180,189,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-30,-31,-32,-33,-34,-35,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'MINUS':([2,9,13,15,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,125,132,133,136,137,139,140,142,147,155,156,159,165,167,169,172,176,179,180,189,],[23,32,-3,23,23,23,23,23,23,-25,-1,-2,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-24,23,-30,-31,-32,-33,-34,-35,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-23,-3,-22,-21,-9,-10,-11,-12,-13,-14,-15,-16,32,32,32,-20,32,23,-4,23,23,23,23,23,23,23,23,23,32,23,23,23,23,23,23,23,23,]),'PLUS':([2,9,13,15,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,125,132,133,136,137,139,140,142,147,155,156,159,165,167,169,172,176,179,180,189,],[22,31,-3,22,22,22,22,22,22,-25,-1,-2,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-24,22,-30,-31,-32,-33,-34,-35,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-23,-3,-22,-21,-9,-10,-11,-12,-13,-14,-15,-16,31,31,31,-20,31,22,-4,22,22,22,22,22,22,22,22,22,31,22,22,22,22,22,22,22,22,]),'NUMBER':([2,15,19,20,22,23,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,142,147,155,156,165,167,169,172,176,179,180,189,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-30,-31,-32,-33,-34,-35,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'FLOAT':([2,15,19,20,22,23,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,142,147,155,156,165,167,169,172,176,179,180,189,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-30,-31,-32,-33,-34,-35,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'END':([3,4,5,6,7,8,9,10,11,12,13,25,26,27,28,29,43,82,83,84,85,86,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,132,141,143,144,150,151,159,162,163,168,173,175,186,],[28,-62,-57,-58,-59,-60,-5,-6,-7,-8,-3,-25,-1,-2,-55,86,-24,-23,-3,-22,-21,-56,-61,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-4,-94,-26,-73,-96,-97,-29,-95,-63,-67,-28,-64,-68,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,13,25,26,27,28,43,82,83,84,85,86,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,132,141,143,144,150,151,152,153,159,162,163,168,173,175,177,178,186,194,],[29,-62,-57,-58,-59,-60,-5,-6,-7,-8,-3,-25,-1,-2,-55,-24,-23,-3,-22,-21,-56,-61,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-4,-94,-26,-73,-96,-97,165,165,-29,-95,-63,-67,-28,-64,165,165,-68,165,]),'ENDCOND':([4,5,6,7,8,9,10,11,12,13,25,26,27,28,43,82,83,84,85,86,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,132,141,143,144,149,150,151,152,153,159,162,163,164,168,173,175,177,178,186,195,],[-62,-57,-58,-59,-60,-5,-6,-7,-8,-3,-25,-1,-2,-55,-24,-23,-3,-22,-21,-56,-61,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-4,-94,-26,-73,162,-96,-97,163,168,-29,-95,-63,175,-67,-28,-64,-66,186,-68,-65,]),'ELIF':([4,5,6,7,8,9,10,11,12,13,25,26,27,28,43,82,83,84,85,86,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,132,141,143,144,150,151,152,159,162,163,168,173,175,186,194,],[-62,-57,-58,-59,-60,-5,-6,-7,-8,-3,-25,-1,-2,-55,-24,-23,-3,-22,-21,-56,-61,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-4,-94,-26,-73,-96,-97,166,-29,-95,-63,-67,-28,-64,-68,166,]),'ELSE':([4,5,6,7,8,9,10,11,12,13,25,26,27,28,43,82,83,84,85,86,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,132,141,143,144,150,151,152,159,162,163,168,173,175,186,194,],[-62,-57,-58,-59,-60,-5,-6,-7,-8,-3,-25,-1,-2,-55,-24,-23,-3,-22,-21,-56,-61,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-4,-94,-26,-73,-96,-97,167,-29,-95,-63,-67,-28,-64,-68,167,]),'RPAREN':([9,10,11,12,13,25,26,27,28,30,43,74,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,130,131,132,134,135,141,143,144,148,150,151,157,158,159,160,161,162,173,182,184,],[-5,-6,-7,-8,-3,-25,-1,-2,-55,-93,-24,132,-23,-3,-22,-21,-56,-89,141,-86,-87,-90,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,145,-77,-79,-80,-81,-84,-4,150,151,-94,-26,-73,-85,-96,-97,-88,-92,-29,-78,-83,-95,-28,-91,-82,]),'THEN':([9,10,11,12,13,25,26,27,28,43,79,80,82,83,84,85,86,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,132,141,143,144,150,151,159,162,173,185,],[-5,-6,-7,-8,-3,-25,-1,-2,-55,-24,136,137,-23,-3,-22,-21,-56,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-4,-94,-26,-73,-96,-97,-29,-95,-28,189,]),'COMMA':([9,10,11,12,13,25,26,27,28,43,82,83,84,85,86,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,132,141,143,144,150,151,158,159,161,162,170,171,173,],[-5,-6,-7,-8,-3,-25,-1,-2,-55,-24,-23,-3,-22,-21,-56,139,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,146,-4,-94,-26,-73,-96,-97,172,-29,174,-95,179,180,-28,]),'COLON':([9,10,11,12,13,25,26,27,28,43,82,83,84,85,86,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,132,141,143,144,150,151,159,162,173,181,183,],[-5,-6,-7,-8,-3,-25,-1,-2,-55,-24,-23,-3,-22,-21,-56,140,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,147,-4,-94,-26,-73,-96,-97,-29,-95,-28,140,147,]),'IN':([9,10,11,12,13,25,26,27,28,43,75,81,82,83,84,85,86,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,132,141,143,144,150,151,159,162,173,],[-5,-6,-7,-8,-3,-25,-1,-2,-55,-24,133,138,-23,-3,-22,-21,-56,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-4,-94,-26,-73,-96,-97,-29,-95,-28,]),'CLOSED_BRACKETS':([9,10,11,12,13,25,26,27,28,43,82,83,84,85,86,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,132,138,141,143,144,150,151,159,162,173,187,188,],[-5,-6,-7,-8,-3,-25,-1,-2,-55,-24,-23,-3,-22,-21,-56,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-4,156,-94,-26,-73,-96,-97,-29,-95,-28,191,192,]),'OPEN_BRACKETS':([9,10,11,12,13,25,26,27,28,43,82,83,84,85,86,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,132,138,141,143,144,150,151,159,162,173,187,188,],[-5,-6,-7,-8,-3,-25,-1,-2,-55,-24,-23,-3,-22,-21,-56,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-36,-4,155,-94,-26,-73,-96,-97,-29,-95,-28,190,193,]),'TIMES':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[33,-3,-25,-1,-2,-24,-23,-3,-22,-21,33,33,-11,-12,-13,-14,-15,-16,33,33,33,-20,33,-4,33,]),'DIVIDE':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[34,-3,-25,-1,-2,-24,-23,-3,-22,-21,34,34,-11,-12,-13,-14,-15,-16,34,34,34,-20,34,-4,34,]),'DIVIDE_CEIL':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[35,-3,-25,-1,-2,-24,-23,-3,-22,-21,35,35,-11,-12,-13,-14,-15,-16,35,35,35,-20,35,-4,35,]),'DIVIDE_FLOOR':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[36,-3,-25,-1,-2,-24,-23,-3,-22,-21,36,36,-11,-12,-13,-14,-15,-16,36,36,36,-20,36,-4,36,]),'MOD':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[37,-3,-25,-1,-2,-24,-23,-3,-22,-21,37,37,-11,-12,-13,-14,-15,-16,37,37,37,-20,37,-4,37,]),'EXP':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[38,-3,-25,-1,-2,-24,-23,-3,-22,-21,38,38,38,38,38,38,38,38,38,38,38,38,38,-4,38,]),'AND':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[39,-3,-25,-1,-2,-24,-23,-3,-22,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,39,39,-20,39,-4,39,]),'OR':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[40,-3,-25,-1,-2,-24,-23,-3,-22,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,40,-4,40,]),'XOR':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[41,-3,-25,-1,-2,-24,-23,-3,-22,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,41,-19,-20,41,-4,41,]),'POWER':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[42,-3,-25,-1,-2,-24,-23,-3,-22,-21,42,42,42,42,42,42,42,42,42,42,42,42,42,-4,42,]),'IMAG':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[43,-3,-25,-1,-2,-24,-23,-3,-22,-21,43,43,43,43,43,43,43,43,43,43,43,43,43,-4,43,]),'GREATER_THAN':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[45,-3,-25,-1,-2,-24,-23,-3,-22,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,45,-4,45,]),'SMALLER_THAN':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[46,-3,-25,-1,-2,-24,-23,-3,-22,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,46,-4,46,]),'UNEQUALS':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[47,-3,-25,-1,-2,-24,-23,-3,-22,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,47,-4,47,]),'EQUALS':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[48,-3,-25,-1,-2,-24,-23,-3,-22,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,48,-4,48,]),'SMALLER_EQUALS':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[49,-3,-25,-1,-2,-24,-23,-3,-22,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,49,-4,49,]),'GREATER_EQUALS':([9,13,25,26,27,43,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,132,159,],[50,-3,-25,-1,-2,-24,-23,-3,-22,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,50,-4,50,]),'PLUS_ASSIGN':([13,],[51,]),'MINUS_ASSIGN':([13,],[52,]),'TIMES_ASSIGN':([13,],[53,]),'POWER_ASSIGN':([13,],[54,]),'DIVIDE_ASSIGN':([13,],[55,]),'DIVIDE_FLOOR_ASSIGN':([13,],[56,]),'DIVIDE_CEIL_ASSIGN':([13,],[57,]),'GREATER_THAN_ASSIGN':([13,],[58,]),'SMALLER_THAN_ASSIGN':([13,],[59,]),'GREATER_EQUALS_ASSIGN':([13,],[60,]),'SMALLER_EQUALS_ASSIGN':([13,],[61,]),'EQUALS_ASSIGN':([13,],[62,]),'UNEQUALS_ASSIGN':([13,],[63,]),'AND_ASSIGN':([13,],[64,]),'OR_ASSIGN':([13,],[65,]),'XOR_ASSIGN':([13,],[66,]),'EXP_ASSIGN':([13,],[67,]),'MOD_ASSIGN':([13,],[68,]),'ASSIGN':([13,76,],[69,69,]),'LAMBDA_ARROW':([14,70,72,73,145,],[-93,125,-75,-76,-74,]),'DOTS':([128,183,],[148,148,]),'LOOPTHEN':([154,190,191,192,193,],[169,-71,-69,-70,-72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sequence':([0,2,15,19,20,29,30,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,147,155,156,165,167,169,172,176,179,180,189,],[1,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'statements':([2,136,137,167,169,189,],[3,152,153,177,178,194,]),'statement':([2,29,136,137,165,167,169,189,],[4,87,4,4,87,4,4,4,]),'expression':([2,15,19,20,29,30,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,147,155,156,165,167,169,172,176,179,180,189,],[5,74,79,80,5,88,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,134,135,144,149,5,5,88,158,161,170,171,5,5,5,181,185,187,188,5,]),'if_statement':([2,29,136,137,165,167,169,189,],[6,6,6,6,6,6,6,6,]),'while_statement':([2,29,136,137,165,167,169,189,],[7,7,7,7,7,7,7,7,]),'loop_statement':([2,29,136,137,165,167,169,189,],[8,8,8,8,8,8,8,8,]),'arithmetic_expression':([2,15,19,20,22,23,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,142,147,155,156,165,167,169,172,176,179,180,189,],[9,9,9,9,82,84,85,9,9,93,94,95,96,97,98,99,100,101,102,103,104,105,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,159,9,9,9,9,9,9,9,9,9,9,9,]),'comparison':([2,15,19,20,29,30,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,147,155,156,165,167,169,172,176,179,180,189,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'assignment':([2,15,16,19,20,29,30,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,147,155,156,165,167,169,172,176,179,180,189,],[12,12,75,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'atomar':([2,15,19,20,22,23,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,77,78,125,133,136,137,139,140,142,147,155,156,165,167,169,172,176,179,180,189,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'comparison_op':([9,105,159,],[44,142,142,]),'parameter':([14,],[70,]),'empty':([14,30,],[73,91,]),'parameter_expr':([30,],[89,]),'parameter_pos_expr':([30,139,],[90,157,]),'parameter_keywords_expr':([30,139,172,],[92,92,182,]),'parameter_pos':([71,],[126,]),'parameter_pos_list':([71,146,],[127,160,]),'parameter_keywords':([71,146,],[129,129,]),'parameter_kw_list':([71,146,174,],[130,130,184,]),'parameter_infty':([71,146,174,],[131,131,131,]),'comparison_chain':([105,159,],[143,173,]),'interval':([138,],[154,]),'else_elif_body':([152,194,],[164,195,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sequence","S'",1,None,None,None),
  ('atomar -> NUMBER','atomar',1,'p_number','parser.py',39),
  ('atomar -> FLOAT','atomar',1,'p_float','parser.py',44),
  ('atomar -> IDENTIFIER','atomar',1,'p_var','parser.py',49),
  ('arithmetic_expression -> LPAREN expression RPAREN','arithmetic_expression',3,'p_paran','parser.py',56),
  ('expression -> arithmetic_expression','expression',1,'p_expression','parser.py',62),
  ('expression -> comparison','expression',1,'p_expression','parser.py',63),
  ('expression -> sequence','expression',1,'p_expression','parser.py',64),
  ('expression -> assignment','expression',1,'p_expression','parser.py',65),
  ('arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',74),
  ('arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',75),
  ('arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',76),
  ('arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',77),
  ('arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',78),
  ('arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',79),
  ('arithmetic_expression -> arithmetic_expression MOD arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',80),
  ('arithmetic_expression -> arithmetic_expression EXP arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',81),
  ('arithmetic_expression -> arithmetic_expression AND arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',82),
  ('arithmetic_expression -> arithmetic_expression OR arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',83),
  ('arithmetic_expression -> arithmetic_expression XOR arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',84),
  ('arithmetic_expression -> arithmetic_expression POWER arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',85),
  ('arithmetic_expression -> NOT arithmetic_expression','arithmetic_expression',2,'p_unary','parser.py',92),
  ('arithmetic_expression -> MINUS arithmetic_expression','arithmetic_expression',2,'p_unary','parser.py',93),
  ('arithmetic_expression -> PLUS arithmetic_expression','arithmetic_expression',2,'p_unary','parser.py',94),
  ('arithmetic_expression -> arithmetic_expression IMAG','arithmetic_expression',2,'p_complex','parser.py',99),
  ('arithmetic_expression -> atomar','arithmetic_expression',1,'p_arithmetic_end','parser.py',104),
  ('comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain','comparison',4,'p_expression_comparison_chain1','parser.py',113),
  ('comparison -> arithmetic_expression comparison_op arithmetic_expression','comparison',3,'p_expression_comparison_chain2','parser.py',120),
  ('comparison_chain -> comparison_op arithmetic_expression comparison_chain','comparison_chain',3,'p_comparison_chain1','parser.py',127),
  ('comparison_chain -> comparison_op arithmetic_expression','comparison_chain',2,'p_comparison_chain2','parser.py',134),
  ('comparison_op -> GREATER_THAN','comparison_op',1,'p_comparison_op','parser.py',140),
  ('comparison_op -> SMALLER_THAN','comparison_op',1,'p_comparison_op','parser.py',141),
  ('comparison_op -> UNEQUALS','comparison_op',1,'p_comparison_op','parser.py',142),
  ('comparison_op -> EQUALS','comparison_op',1,'p_comparison_op','parser.py',143),
  ('comparison_op -> SMALLER_EQUALS','comparison_op',1,'p_comparison_op','parser.py',144),
  ('comparison_op -> GREATER_EQUALS','comparison_op',1,'p_comparison_op','parser.py',145),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment1','parser.py',153),
  ('expression -> IDENTIFIER PLUS_ASSIGN expression','expression',3,'p_assignment2','parser.py',159),
  ('expression -> IDENTIFIER MINUS_ASSIGN expression','expression',3,'p_assignment2','parser.py',160),
  ('expression -> IDENTIFIER TIMES_ASSIGN expression','expression',3,'p_assignment2','parser.py',161),
  ('expression -> IDENTIFIER POWER_ASSIGN expression','expression',3,'p_assignment2','parser.py',162),
  ('expression -> IDENTIFIER DIVIDE_ASSIGN expression','expression',3,'p_assignment2','parser.py',163),
  ('expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression','expression',3,'p_assignment2','parser.py',164),
  ('expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression','expression',3,'p_assignment2','parser.py',165),
  ('expression -> IDENTIFIER GREATER_THAN_ASSIGN expression','expression',3,'p_assignment2','parser.py',166),
  ('expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression','expression',3,'p_assignment2','parser.py',167),
  ('expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression','expression',3,'p_assignment2','parser.py',168),
  ('expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression','expression',3,'p_assignment2','parser.py',169),
  ('expression -> IDENTIFIER EQUALS_ASSIGN expression','expression',3,'p_assignment2','parser.py',170),
  ('expression -> IDENTIFIER UNEQUALS_ASSIGN expression','expression',3,'p_assignment2','parser.py',171),
  ('expression -> IDENTIFIER AND_ASSIGN expression','expression',3,'p_assignment2','parser.py',172),
  ('expression -> IDENTIFIER OR_ASSIGN expression','expression',3,'p_assignment2','parser.py',173),
  ('expression -> IDENTIFIER XOR_ASSIGN expression','expression',3,'p_assignment2','parser.py',174),
  ('expression -> IDENTIFIER EXP_ASSIGN expression','expression',3,'p_assignment2','parser.py',175),
  ('expression -> IDENTIFIER MOD_ASSIGN expression','expression',3,'p_assignment2','parser.py',176),
  ('sequence -> BEGIN statements END','sequence',3,'p_sequence','parser.py',186),
  ('sequence -> BEGIN statements SEMICOLON END','sequence',4,'p_sequence','parser.py',187),
  ('statement -> expression','statement',1,'p_statement0','parser.py',197),
  ('statement -> if_statement','statement',1,'p_statement0','parser.py',198),
  ('statement -> while_statement','statement',1,'p_statement0','parser.py',199),
  ('statement -> loop_statement','statement',1,'p_statement0','parser.py',200),
  ('statements -> statements SEMICOLON statement','statements',3,'p_statements0','parser.py',207),
  ('statements -> statement','statements',1,'p_statements1','parser.py',214),
  ('if_statement -> IF expression THEN statements ENDCOND','if_statement',5,'p_if_statements1','parser.py',233),
  ('if_statement -> IF expression THEN statements else_elif_body ENDCOND','if_statement',6,'p_if_statements1','parser.py',234),
  ('else_elif_body -> ELIF IF expression THEN statements else_elif_body','else_elif_body',6,'p_if_statements2','parser.py',244),
  ('else_elif_body -> ELSE statements','else_elif_body',2,'p_if_statements2','parser.py',245),
  ('while_statement -> WHILE expression THEN statements ENDCOND','while_statement',5,'p_while_statement','parser.py',258),
  ('loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND','loop_statement',7,'p_loop_statement','parser.py',268),
  ('interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS','interval',5,'p_interval','parser.py',275),
  ('interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS','interval',5,'p_interval','parser.py',276),
  ('interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS','interval',5,'p_interval','parser.py',277),
  ('interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS','interval',5,'p_interval','parser.py',278),
  ('expression -> LAMBDA parameter LAMBDA_ARROW expression','expression',4,'p_lambda','parser.py',287),
  ('parameter -> LPAREN parameter_pos RPAREN','parameter',3,'p_parameter0','parser.py',293),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter0','parser.py',294),
  ('parameter -> empty','parameter',1,'p_parameter0','parser.py',295),
  ('parameter_pos -> parameter_pos_list','parameter_pos',1,'p_parameter1','parser.py',305),
  ('parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list','parameter_pos_list',3,'p_parameter2','parser.py',312),
  ('parameter_pos_list -> IDENTIFIER','parameter_pos_list',1,'p_parameter2','parser.py',313),
  ('parameter_pos_list -> parameter_keywords','parameter_pos_list',1,'p_parameter2','parser.py',314),
  ('parameter_keywords -> parameter_kw_list','parameter_keywords',1,'p_parameter3','parser.py',324),
  ('parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list','parameter_kw_list',5,'p_parameter4','parser.py',331),
  ('parameter_kw_list -> IDENTIFIER COLON expression','parameter_kw_list',3,'p_parameter4','parser.py',332),
  ('parameter_kw_list -> parameter_infty','parameter_kw_list',1,'p_parameter4','parser.py',333),
  ('parameter_infty -> IDENTIFIER DOTS','parameter_infty',2,'p_parameter5','parser.py',345),
  ('parameter_expr -> parameter_pos_expr','parameter_expr',1,'p_parameter6','parser.py',352),
  ('parameter_expr -> empty','parameter_expr',1,'p_parameter6','parser.py',353),
  ('parameter_pos_expr -> expression COMMA parameter_pos_expr','parameter_pos_expr',3,'p_parameter7','parser.py',360),
  ('parameter_pos_expr -> expression','parameter_pos_expr',1,'p_parameter7','parser.py',361),
  ('parameter_pos_expr -> parameter_keywords_expr','parameter_pos_expr',1,'p_parameter7','parser.py',362),
  ('parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr','parameter_keywords_expr',5,'p_parameter8','parser.py',372),
  ('parameter_keywords_expr -> expression COLON expression','parameter_keywords_expr',3,'p_parameter8','parser.py',373),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',382),
  ('expression -> expression LPAREN parameter_expr RPAREN','expression',4,'p_call','parser.py',387),
  ('expression -> LET assignment IN expression ENDCOND','expression',5,'p_let','parser.py',395),
  ('expression -> ECHO LPAREN expression RPAREN','expression',4,'p_builtin_func','parser.py',403),
  ('expression -> LENGTH LPAREN expression RPAREN','expression',4,'p_builtin_func','parser.py',404),
]
