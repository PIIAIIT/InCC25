Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> sequence
Rule 1     atomar -> NUMBER
Rule 2     atomar -> FLOAT
Rule 3     atomar -> IDENTIFIER
Rule 4     arithmetic_expression -> LPAREN arithmetic_expression RPAREN
Rule 5     arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression
Rule 6     arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression
Rule 7     arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression
Rule 8     arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression
Rule 9     arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression
Rule 10    arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression
Rule 11    arithmetic_expression -> arithmetic_expression MOD arithmetic_expression
Rule 12    arithmetic_expression -> arithmetic_expression EXP arithmetic_expression
Rule 13    arithmetic_expression -> arithmetic_expression AND arithmetic_expression
Rule 14    arithmetic_expression -> arithmetic_expression OR arithmetic_expression
Rule 15    arithmetic_expression -> arithmetic_expression XOR arithmetic_expression
Rule 16    arithmetic_expression -> arithmetic_expression POWER arithmetic_expression
Rule 17    arithmetic_expression -> atomar
Rule 18    arithmetic_expression -> NOT arithmetic_expression
Rule 19    arithmetic_expression -> MINUS arithmetic_expression
Rule 20    arithmetic_expression -> PLUS arithmetic_expression
Rule 21    expression -> arithmetic_expression IMAG
Rule 22    expression -> arithmetic_expression comparison_op arithmetic_expression comparison_chain
Rule 23    expression -> arithmetic_expression comparison_op arithmetic_expression
Rule 24    comparison_chain -> comparison_op arithmetic_expression comparison_chain
Rule 25    comparison_chain -> comparison_op arithmetic_expression
Rule 26    comparison_op -> GREATER_THAN
Rule 27    comparison_op -> SMALLER_THAN
Rule 28    comparison_op -> UNEQUALS
Rule 29    comparison_op -> EQUALS
Rule 30    comparison_op -> SMALLER_EQUALS
Rule 31    comparison_op -> GREATER_EQUALS
Rule 32    expression -> IDENTIFIER ASSIGN expression
Rule 33    expression -> IDENTIFIER ASSIGN arithmetic_expression
Rule 34    expression -> IDENTIFIER PLUSASSIGN expression
Rule 35    expression -> IDENTIFIER MINUSASSIGN expression
Rule 36    expression -> IDENTIFIER TIMESASSIGN expression
Rule 37    expression -> IDENTIFIER POWERASSIGN expression
Rule 38    expression -> IDENTIFIER DIVIDEASSIGN expression
Rule 39    expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression
Rule 40    expression -> IDENTIFIER DIVIDE_CEILASSIGN expression
Rule 41    expression -> IDENTIFIER GREATER_THANASSIGN expression
Rule 42    expression -> IDENTIFIER SMALLER_THANASSIGN expression
Rule 43    expression -> IDENTIFIER GREATER_EQUALSASSIGN expression
Rule 44    expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression
Rule 45    expression -> IDENTIFIER EQUALSASSIGN expression
Rule 46    expression -> IDENTIFIER UNEQUALSASSIGN expression
Rule 47    expression -> IDENTIFIER ANDASSIGN expression
Rule 48    expression -> IDENTIFIER ORASSIGN expression
Rule 49    expression -> IDENTIFIER XORASSIGN expression
Rule 50    expression -> IDENTIFIER EXPASSIGN expression
Rule 51    expression -> IDENTIFIER MODASSIGN expression
Rule 52    expression -> IDENTIFIER PLUSASSIGN arithmetic_expression
Rule 53    expression -> IDENTIFIER MINUSASSIGN arithmetic_expression
Rule 54    expression -> IDENTIFIER TIMESASSIGN arithmetic_expression
Rule 55    expression -> IDENTIFIER POWERASSIGN arithmetic_expression
Rule 56    expression -> IDENTIFIER DIVIDEASSIGN arithmetic_expression
Rule 57    expression -> IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
Rule 58    expression -> IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
Rule 59    expression -> IDENTIFIER GREATER_THANASSIGN arithmetic_expression
Rule 60    expression -> IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
Rule 61    expression -> IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
Rule 62    expression -> IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
Rule 63    expression -> IDENTIFIER EQUALSASSIGN arithmetic_expression
Rule 64    expression -> IDENTIFIER UNEQUALSASSIGN arithmetic_expression
Rule 65    expression -> IDENTIFIER ANDASSIGN arithmetic_expression
Rule 66    expression -> IDENTIFIER ORASSIGN arithmetic_expression
Rule 67    expression -> IDENTIFIER XORASSIGN arithmetic_expression
Rule 68    expression -> IDENTIFIER EXPASSIGN arithmetic_expression
Rule 69    expression -> IDENTIFIER MODASSIGN arithmetic_expression
Rule 70    sequence -> BEGIN statements END
Rule 71    sequence -> BEGIN statements SEMICOLON END
Rule 72    statements -> expression
Rule 73    statements -> arithmetic_expression
Rule 74    statements -> statement
Rule 75    statements -> sequence
Rule 76    statements -> statements SEMICOLON expression
Rule 77    statements -> statements SEMICOLON arithmetic_expression
Rule 78    statement -> IF expression THEN statements ENDCOND
Rule 79    statement -> IF expression THEN statements else_elif_body ENDCOND
Rule 80    else_elif_body -> ELIF IF expression THEN statements else_elif_body
Rule 81    else_elif_body -> ELSE statements
Rule 82    statement -> WHILE expression THEN statements
Rule 83    statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
Rule 84    interval -> [ expression , expression ]
Rule 85    interval -> ] expression , expression ]
Rule 86    interval -> [ expression , expression [
Rule 87    interval -> ] expression , expression [

Terminals, with rules where they appear

,                    : 84 85 86 87
AND                  : 13
ANDASSIGN            : 47 65
ASSIGN               : 32 33
BEGIN                : 70 71
DIVIDE               : 8
DIVIDEASSIGN         : 38 56
DIVIDE_CEIL          : 9
DIVIDE_CEILASSIGN    : 40 58
DIVIDE_FLOOR         : 10
DIVIDE_FLOORASSIGN   : 39 57
ELIF                 : 80
ELSE                 : 81
END                  : 70 71
ENDCOND              : 78 79 83
EQUALS               : 29
EQUALSASSIGN         : 45 63
EXP                  : 12
EXPASSIGN            : 50 68
FLOAT                : 2
GREATER_EQUALS       : 31
GREATER_EQUALSASSIGN : 43 61
GREATER_THAN         : 26
GREATER_THANASSIGN   : 41 59
IDENTIFIER           : 3 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 83
IF                   : 78 79 80
IMAG                 : 21
LOOP                 : 83
LOOPIN               : 83
LOOPTHEN             : 83
LPAREN               : 4
MINUS                : 6 19
MINUSASSIGN          : 35 53
MOD                  : 11
MODASSIGN            : 51 69
NOT                  : 18
NUMBER               : 1
OR                   : 14
ORASSIGN             : 48 66
PLUS                 : 5 20
PLUSASSIGN           : 34 52
POWER                : 16
POWERASSIGN          : 37 55
RPAREN               : 4
SEMICOLON            : 71 76 77
SMALLER_EQUALS       : 30
SMALLER_EQUALSASSIGN : 44 62
SMALLER_THAN         : 27
SMALLER_THANASSIGN   : 42 60
THEN                 : 78 79 80 82
TIMES                : 7
TIMESASSIGN          : 36 54
UNEQUALS             : 28
UNEQUALSASSIGN       : 46 64
WHILE                : 82
XOR                  : 15
XORASSIGN            : 49 67
[                    : 84 86 86 87
]                    : 84 85 85 87
error                : 

Nonterminals, with rules where they appear

arithmetic_expression : 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 18 19 20 21 22 22 23 23 24 25 33 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 73 77
atomar               : 17
comparison_chain     : 22 24
comparison_op        : 22 23 24 25
else_elif_body       : 79 80
expression           : 32 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 72 76 78 79 80 82 84 84 85 85 86 86 87 87
interval             : 83
sequence             : 75 0
statement            : 74
statements           : 70 71 76 77 78 79 80 81 82 83

Parsing method: LALR

state 0

    (0) S' -> . sequence
    (70) sequence -> . BEGIN statements END
    (71) sequence -> . BEGIN statements SEMICOLON END

    BEGIN           shift and go to state 2

    sequence                       shift and go to state 1

state 1

    (0) S' -> sequence .



state 2

    (70) sequence -> BEGIN . statements END
    (71) sequence -> BEGIN . statements SEMICOLON END
    (72) statements -> . expression
    (73) statements -> . arithmetic_expression
    (74) statements -> . statement
    (75) statements -> . sequence
    (76) statements -> . statements SEMICOLON expression
    (77) statements -> . statements SEMICOLON arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (78) statement -> . IF expression THEN statements ENDCOND
    (79) statement -> . IF expression THEN statements else_elif_body ENDCOND
    (82) statement -> . WHILE expression THEN statements
    (83) statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (70) sequence -> . BEGIN statements END
    (71) sequence -> . BEGIN statements SEMICOLON END
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    LOOP            shift and go to state 16
    BEGIN           shift and go to state 2
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    statements                     shift and go to state 3
    expression                     shift and go to state 4
    arithmetic_expression          shift and go to state 5
    statement                      shift and go to state 6
    sequence                       shift and go to state 7
    atomar                         shift and go to state 12

state 3

    (70) sequence -> BEGIN statements . END
    (71) sequence -> BEGIN statements . SEMICOLON END
    (76) statements -> statements . SEMICOLON expression
    (77) statements -> statements . SEMICOLON arithmetic_expression

    END             shift and go to state 19
    SEMICOLON       shift and go to state 20


state 4

    (72) statements -> expression .

    END             reduce using rule 72 (statements -> expression .)
    SEMICOLON       reduce using rule 72 (statements -> expression .)
    ENDCOND         reduce using rule 72 (statements -> expression .)
    ELIF            reduce using rule 72 (statements -> expression .)
    ELSE            reduce using rule 72 (statements -> expression .)


state 5

    (73) statements -> arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 73 (statements -> arithmetic_expression .)
    SEMICOLON       reduce using rule 73 (statements -> arithmetic_expression .)
    ENDCOND         reduce using rule 73 (statements -> arithmetic_expression .)
    ELIF            reduce using rule 73 (statements -> arithmetic_expression .)
    ELSE            reduce using rule 73 (statements -> arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 6

    (74) statements -> statement .

    END             reduce using rule 74 (statements -> statement .)
    SEMICOLON       reduce using rule 74 (statements -> statement .)
    ENDCOND         reduce using rule 74 (statements -> statement .)
    ELIF            reduce using rule 74 (statements -> statement .)
    ELSE            reduce using rule 74 (statements -> statement .)


state 7

    (75) statements -> sequence .

    END             reduce using rule 75 (statements -> sequence .)
    SEMICOLON       reduce using rule 75 (statements -> sequence .)
    ENDCOND         reduce using rule 75 (statements -> sequence .)
    ELIF            reduce using rule 75 (statements -> sequence .)
    ELSE            reduce using rule 75 (statements -> sequence .)


state 8

    (32) expression -> IDENTIFIER . ASSIGN expression
    (33) expression -> IDENTIFIER . ASSIGN arithmetic_expression
    (34) expression -> IDENTIFIER . PLUSASSIGN expression
    (35) expression -> IDENTIFIER . MINUSASSIGN expression
    (36) expression -> IDENTIFIER . TIMESASSIGN expression
    (37) expression -> IDENTIFIER . POWERASSIGN expression
    (38) expression -> IDENTIFIER . DIVIDEASSIGN expression
    (39) expression -> IDENTIFIER . DIVIDE_FLOORASSIGN expression
    (40) expression -> IDENTIFIER . DIVIDE_CEILASSIGN expression
    (41) expression -> IDENTIFIER . GREATER_THANASSIGN expression
    (42) expression -> IDENTIFIER . SMALLER_THANASSIGN expression
    (43) expression -> IDENTIFIER . GREATER_EQUALSASSIGN expression
    (44) expression -> IDENTIFIER . SMALLER_EQUALSASSIGN expression
    (45) expression -> IDENTIFIER . EQUALSASSIGN expression
    (46) expression -> IDENTIFIER . UNEQUALSASSIGN expression
    (47) expression -> IDENTIFIER . ANDASSIGN expression
    (48) expression -> IDENTIFIER . ORASSIGN expression
    (49) expression -> IDENTIFIER . XORASSIGN expression
    (50) expression -> IDENTIFIER . EXPASSIGN expression
    (51) expression -> IDENTIFIER . MODASSIGN expression
    (52) expression -> IDENTIFIER . PLUSASSIGN arithmetic_expression
    (53) expression -> IDENTIFIER . MINUSASSIGN arithmetic_expression
    (54) expression -> IDENTIFIER . TIMESASSIGN arithmetic_expression
    (55) expression -> IDENTIFIER . POWERASSIGN arithmetic_expression
    (56) expression -> IDENTIFIER . DIVIDEASSIGN arithmetic_expression
    (57) expression -> IDENTIFIER . DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> IDENTIFIER . DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> IDENTIFIER . GREATER_THANASSIGN arithmetic_expression
    (60) expression -> IDENTIFIER . SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> IDENTIFIER . GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> IDENTIFIER . SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> IDENTIFIER . EQUALSASSIGN arithmetic_expression
    (64) expression -> IDENTIFIER . UNEQUALSASSIGN arithmetic_expression
    (65) expression -> IDENTIFIER . ANDASSIGN arithmetic_expression
    (66) expression -> IDENTIFIER . ORASSIGN arithmetic_expression
    (67) expression -> IDENTIFIER . XORASSIGN arithmetic_expression
    (68) expression -> IDENTIFIER . EXPASSIGN arithmetic_expression
    (69) expression -> IDENTIFIER . MODASSIGN arithmetic_expression
    (3) atomar -> IDENTIFIER .

    ASSIGN          shift and go to state 41
    PLUSASSIGN      shift and go to state 42
    MINUSASSIGN     shift and go to state 43
    TIMESASSIGN     shift and go to state 44
    POWERASSIGN     shift and go to state 45
    DIVIDEASSIGN    shift and go to state 46
    DIVIDE_FLOORASSIGN shift and go to state 47
    DIVIDE_CEILASSIGN shift and go to state 48
    GREATER_THANASSIGN shift and go to state 49
    SMALLER_THANASSIGN shift and go to state 50
    GREATER_EQUALSASSIGN shift and go to state 51
    SMALLER_EQUALSASSIGN shift and go to state 52
    EQUALSASSIGN    shift and go to state 53
    UNEQUALSASSIGN  shift and go to state 54
    ANDASSIGN       shift and go to state 55
    ORASSIGN        shift and go to state 56
    XORASSIGN       shift and go to state 57
    EXPASSIGN       shift and go to state 58
    MODASSIGN       shift and go to state 59
    IMAG            reduce using rule 3 (atomar -> IDENTIFIER .)
    PLUS            reduce using rule 3 (atomar -> IDENTIFIER .)
    MINUS           reduce using rule 3 (atomar -> IDENTIFIER .)
    TIMES           reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE          reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_CEIL     reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_FLOOR    reduce using rule 3 (atomar -> IDENTIFIER .)
    MOD             reduce using rule 3 (atomar -> IDENTIFIER .)
    EXP             reduce using rule 3 (atomar -> IDENTIFIER .)
    AND             reduce using rule 3 (atomar -> IDENTIFIER .)
    OR              reduce using rule 3 (atomar -> IDENTIFIER .)
    XOR             reduce using rule 3 (atomar -> IDENTIFIER .)
    POWER           reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    UNEQUALS        reduce using rule 3 (atomar -> IDENTIFIER .)
    EQUALS          reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    END             reduce using rule 3 (atomar -> IDENTIFIER .)
    SEMICOLON       reduce using rule 3 (atomar -> IDENTIFIER .)
    THEN            reduce using rule 3 (atomar -> IDENTIFIER .)
    ENDCOND         reduce using rule 3 (atomar -> IDENTIFIER .)
    ELIF            reduce using rule 3 (atomar -> IDENTIFIER .)
    ELSE            reduce using rule 3 (atomar -> IDENTIFIER .)
    ,               reduce using rule 3 (atomar -> IDENTIFIER .)
    ]               reduce using rule 3 (atomar -> IDENTIFIER .)
    [               reduce using rule 3 (atomar -> IDENTIFIER .)


state 9

    (4) arithmetic_expression -> LPAREN . arithmetic_expression RPAREN
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 60
    atomar                         shift and go to state 12

state 10

    (20) arithmetic_expression -> PLUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 62
    atomar                         shift and go to state 12

state 11

    (19) arithmetic_expression -> MINUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 63
    atomar                         shift and go to state 12

state 12

    (17) arithmetic_expression -> atomar .

    IMAG            reduce using rule 17 (arithmetic_expression -> atomar .)
    PLUS            reduce using rule 17 (arithmetic_expression -> atomar .)
    MINUS           reduce using rule 17 (arithmetic_expression -> atomar .)
    TIMES           reduce using rule 17 (arithmetic_expression -> atomar .)
    DIVIDE          reduce using rule 17 (arithmetic_expression -> atomar .)
    DIVIDE_CEIL     reduce using rule 17 (arithmetic_expression -> atomar .)
    DIVIDE_FLOOR    reduce using rule 17 (arithmetic_expression -> atomar .)
    MOD             reduce using rule 17 (arithmetic_expression -> atomar .)
    EXP             reduce using rule 17 (arithmetic_expression -> atomar .)
    AND             reduce using rule 17 (arithmetic_expression -> atomar .)
    OR              reduce using rule 17 (arithmetic_expression -> atomar .)
    XOR             reduce using rule 17 (arithmetic_expression -> atomar .)
    POWER           reduce using rule 17 (arithmetic_expression -> atomar .)
    GREATER_THAN    reduce using rule 17 (arithmetic_expression -> atomar .)
    SMALLER_THAN    reduce using rule 17 (arithmetic_expression -> atomar .)
    UNEQUALS        reduce using rule 17 (arithmetic_expression -> atomar .)
    EQUALS          reduce using rule 17 (arithmetic_expression -> atomar .)
    SMALLER_EQUALS  reduce using rule 17 (arithmetic_expression -> atomar .)
    GREATER_EQUALS  reduce using rule 17 (arithmetic_expression -> atomar .)
    END             reduce using rule 17 (arithmetic_expression -> atomar .)
    SEMICOLON       reduce using rule 17 (arithmetic_expression -> atomar .)
    RPAREN          reduce using rule 17 (arithmetic_expression -> atomar .)
    THEN            reduce using rule 17 (arithmetic_expression -> atomar .)
    ENDCOND         reduce using rule 17 (arithmetic_expression -> atomar .)
    ELIF            reduce using rule 17 (arithmetic_expression -> atomar .)
    ELSE            reduce using rule 17 (arithmetic_expression -> atomar .)
    ,               reduce using rule 17 (arithmetic_expression -> atomar .)
    ]               reduce using rule 17 (arithmetic_expression -> atomar .)
    [               reduce using rule 17 (arithmetic_expression -> atomar .)


state 13

    (18) arithmetic_expression -> NOT . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 64
    atomar                         shift and go to state 12

state 14

    (78) statement -> IF . expression THEN statements ENDCOND
    (79) statement -> IF . expression THEN statements else_elif_body ENDCOND
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 65
    arithmetic_expression          shift and go to state 66
    atomar                         shift and go to state 12

state 15

    (82) statement -> WHILE . expression THEN statements
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 67
    arithmetic_expression          shift and go to state 66
    atomar                         shift and go to state 12

state 16

    (83) statement -> LOOP . IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND

    IDENTIFIER      shift and go to state 68


state 17

    (1) atomar -> NUMBER .

    IMAG            reduce using rule 1 (atomar -> NUMBER .)
    PLUS            reduce using rule 1 (atomar -> NUMBER .)
    MINUS           reduce using rule 1 (atomar -> NUMBER .)
    TIMES           reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE          reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE_CEIL     reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE_FLOOR    reduce using rule 1 (atomar -> NUMBER .)
    MOD             reduce using rule 1 (atomar -> NUMBER .)
    EXP             reduce using rule 1 (atomar -> NUMBER .)
    AND             reduce using rule 1 (atomar -> NUMBER .)
    OR              reduce using rule 1 (atomar -> NUMBER .)
    XOR             reduce using rule 1 (atomar -> NUMBER .)
    POWER           reduce using rule 1 (atomar -> NUMBER .)
    GREATER_THAN    reduce using rule 1 (atomar -> NUMBER .)
    SMALLER_THAN    reduce using rule 1 (atomar -> NUMBER .)
    UNEQUALS        reduce using rule 1 (atomar -> NUMBER .)
    EQUALS          reduce using rule 1 (atomar -> NUMBER .)
    SMALLER_EQUALS  reduce using rule 1 (atomar -> NUMBER .)
    GREATER_EQUALS  reduce using rule 1 (atomar -> NUMBER .)
    END             reduce using rule 1 (atomar -> NUMBER .)
    SEMICOLON       reduce using rule 1 (atomar -> NUMBER .)
    RPAREN          reduce using rule 1 (atomar -> NUMBER .)
    THEN            reduce using rule 1 (atomar -> NUMBER .)
    ENDCOND         reduce using rule 1 (atomar -> NUMBER .)
    ELIF            reduce using rule 1 (atomar -> NUMBER .)
    ELSE            reduce using rule 1 (atomar -> NUMBER .)
    ,               reduce using rule 1 (atomar -> NUMBER .)
    ]               reduce using rule 1 (atomar -> NUMBER .)
    [               reduce using rule 1 (atomar -> NUMBER .)


state 18

    (2) atomar -> FLOAT .

    IMAG            reduce using rule 2 (atomar -> FLOAT .)
    PLUS            reduce using rule 2 (atomar -> FLOAT .)
    MINUS           reduce using rule 2 (atomar -> FLOAT .)
    TIMES           reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE          reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE_CEIL     reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE_FLOOR    reduce using rule 2 (atomar -> FLOAT .)
    MOD             reduce using rule 2 (atomar -> FLOAT .)
    EXP             reduce using rule 2 (atomar -> FLOAT .)
    AND             reduce using rule 2 (atomar -> FLOAT .)
    OR              reduce using rule 2 (atomar -> FLOAT .)
    XOR             reduce using rule 2 (atomar -> FLOAT .)
    POWER           reduce using rule 2 (atomar -> FLOAT .)
    GREATER_THAN    reduce using rule 2 (atomar -> FLOAT .)
    SMALLER_THAN    reduce using rule 2 (atomar -> FLOAT .)
    UNEQUALS        reduce using rule 2 (atomar -> FLOAT .)
    EQUALS          reduce using rule 2 (atomar -> FLOAT .)
    SMALLER_EQUALS  reduce using rule 2 (atomar -> FLOAT .)
    GREATER_EQUALS  reduce using rule 2 (atomar -> FLOAT .)
    END             reduce using rule 2 (atomar -> FLOAT .)
    SEMICOLON       reduce using rule 2 (atomar -> FLOAT .)
    RPAREN          reduce using rule 2 (atomar -> FLOAT .)
    THEN            reduce using rule 2 (atomar -> FLOAT .)
    ENDCOND         reduce using rule 2 (atomar -> FLOAT .)
    ELIF            reduce using rule 2 (atomar -> FLOAT .)
    ELSE            reduce using rule 2 (atomar -> FLOAT .)
    ,               reduce using rule 2 (atomar -> FLOAT .)
    ]               reduce using rule 2 (atomar -> FLOAT .)
    [               reduce using rule 2 (atomar -> FLOAT .)


state 19

    (70) sequence -> BEGIN statements END .

    $end            reduce using rule 70 (sequence -> BEGIN statements END .)
    END             reduce using rule 70 (sequence -> BEGIN statements END .)
    SEMICOLON       reduce using rule 70 (sequence -> BEGIN statements END .)
    ENDCOND         reduce using rule 70 (sequence -> BEGIN statements END .)
    ELIF            reduce using rule 70 (sequence -> BEGIN statements END .)
    ELSE            reduce using rule 70 (sequence -> BEGIN statements END .)


state 20

    (71) sequence -> BEGIN statements SEMICOLON . END
    (76) statements -> statements SEMICOLON . expression
    (77) statements -> statements SEMICOLON . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    END             shift and go to state 69
    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 70
    arithmetic_expression          shift and go to state 71
    atomar                         shift and go to state 12

state 21

    (21) expression -> arithmetic_expression IMAG .

    END             reduce using rule 21 (expression -> arithmetic_expression IMAG .)
    SEMICOLON       reduce using rule 21 (expression -> arithmetic_expression IMAG .)
    THEN            reduce using rule 21 (expression -> arithmetic_expression IMAG .)
    ENDCOND         reduce using rule 21 (expression -> arithmetic_expression IMAG .)
    ELIF            reduce using rule 21 (expression -> arithmetic_expression IMAG .)
    ELSE            reduce using rule 21 (expression -> arithmetic_expression IMAG .)
    ,               reduce using rule 21 (expression -> arithmetic_expression IMAG .)
    ]               reduce using rule 21 (expression -> arithmetic_expression IMAG .)
    [               reduce using rule 21 (expression -> arithmetic_expression IMAG .)


state 22

    (22) expression -> arithmetic_expression comparison_op . arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression comparison_op . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 72
    atomar                         shift and go to state 12

state 23

    (5) arithmetic_expression -> arithmetic_expression PLUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 73
    atomar                         shift and go to state 12

state 24

    (6) arithmetic_expression -> arithmetic_expression MINUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 74
    atomar                         shift and go to state 12

state 25

    (7) arithmetic_expression -> arithmetic_expression TIMES . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 75
    atomar                         shift and go to state 12

state 26

    (8) arithmetic_expression -> arithmetic_expression DIVIDE . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 76
    atomar                         shift and go to state 12

state 27

    (9) arithmetic_expression -> arithmetic_expression DIVIDE_CEIL . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 77
    atomar                         shift and go to state 12

state 28

    (10) arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 78
    atomar                         shift and go to state 12

state 29

    (11) arithmetic_expression -> arithmetic_expression MOD . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 79
    atomar                         shift and go to state 12

state 30

    (12) arithmetic_expression -> arithmetic_expression EXP . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 80
    atomar                         shift and go to state 12

state 31

    (13) arithmetic_expression -> arithmetic_expression AND . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 81
    atomar                         shift and go to state 12

state 32

    (14) arithmetic_expression -> arithmetic_expression OR . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 82
    atomar                         shift and go to state 12

state 33

    (15) arithmetic_expression -> arithmetic_expression XOR . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 83
    atomar                         shift and go to state 12

state 34

    (16) arithmetic_expression -> arithmetic_expression POWER . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 84
    atomar                         shift and go to state 12

state 35

    (26) comparison_op -> GREATER_THAN .

    LPAREN          reduce using rule 26 (comparison_op -> GREATER_THAN .)
    NOT             reduce using rule 26 (comparison_op -> GREATER_THAN .)
    MINUS           reduce using rule 26 (comparison_op -> GREATER_THAN .)
    PLUS            reduce using rule 26 (comparison_op -> GREATER_THAN .)
    NUMBER          reduce using rule 26 (comparison_op -> GREATER_THAN .)
    FLOAT           reduce using rule 26 (comparison_op -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 26 (comparison_op -> GREATER_THAN .)


state 36

    (27) comparison_op -> SMALLER_THAN .

    LPAREN          reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    NOT             reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    MINUS           reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    PLUS            reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    NUMBER          reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    FLOAT           reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    IDENTIFIER      reduce using rule 27 (comparison_op -> SMALLER_THAN .)


state 37

    (28) comparison_op -> UNEQUALS .

    LPAREN          reduce using rule 28 (comparison_op -> UNEQUALS .)
    NOT             reduce using rule 28 (comparison_op -> UNEQUALS .)
    MINUS           reduce using rule 28 (comparison_op -> UNEQUALS .)
    PLUS            reduce using rule 28 (comparison_op -> UNEQUALS .)
    NUMBER          reduce using rule 28 (comparison_op -> UNEQUALS .)
    FLOAT           reduce using rule 28 (comparison_op -> UNEQUALS .)
    IDENTIFIER      reduce using rule 28 (comparison_op -> UNEQUALS .)


state 38

    (29) comparison_op -> EQUALS .

    LPAREN          reduce using rule 29 (comparison_op -> EQUALS .)
    NOT             reduce using rule 29 (comparison_op -> EQUALS .)
    MINUS           reduce using rule 29 (comparison_op -> EQUALS .)
    PLUS            reduce using rule 29 (comparison_op -> EQUALS .)
    NUMBER          reduce using rule 29 (comparison_op -> EQUALS .)
    FLOAT           reduce using rule 29 (comparison_op -> EQUALS .)
    IDENTIFIER      reduce using rule 29 (comparison_op -> EQUALS .)


state 39

    (30) comparison_op -> SMALLER_EQUALS .

    LPAREN          reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    NOT             reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    MINUS           reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    PLUS            reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    NUMBER          reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    FLOAT           reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    IDENTIFIER      reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)


state 40

    (31) comparison_op -> GREATER_EQUALS .

    LPAREN          reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    NOT             reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    MINUS           reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    PLUS            reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    NUMBER          reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    FLOAT           reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    IDENTIFIER      reduce using rule 31 (comparison_op -> GREATER_EQUALS .)


state 41

    (32) expression -> IDENTIFIER ASSIGN . expression
    (33) expression -> IDENTIFIER ASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 85
    arithmetic_expression          shift and go to state 86
    atomar                         shift and go to state 12

state 42

    (34) expression -> IDENTIFIER PLUSASSIGN . expression
    (52) expression -> IDENTIFIER PLUSASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 87
    arithmetic_expression          shift and go to state 88
    atomar                         shift and go to state 12

state 43

    (35) expression -> IDENTIFIER MINUSASSIGN . expression
    (53) expression -> IDENTIFIER MINUSASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 89
    arithmetic_expression          shift and go to state 90
    atomar                         shift and go to state 12

state 44

    (36) expression -> IDENTIFIER TIMESASSIGN . expression
    (54) expression -> IDENTIFIER TIMESASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 91
    arithmetic_expression          shift and go to state 92
    atomar                         shift and go to state 12

state 45

    (37) expression -> IDENTIFIER POWERASSIGN . expression
    (55) expression -> IDENTIFIER POWERASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 93
    arithmetic_expression          shift and go to state 94
    atomar                         shift and go to state 12

state 46

    (38) expression -> IDENTIFIER DIVIDEASSIGN . expression
    (56) expression -> IDENTIFIER DIVIDEASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 95
    arithmetic_expression          shift and go to state 96
    atomar                         shift and go to state 12

state 47

    (39) expression -> IDENTIFIER DIVIDE_FLOORASSIGN . expression
    (57) expression -> IDENTIFIER DIVIDE_FLOORASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 97
    arithmetic_expression          shift and go to state 98
    atomar                         shift and go to state 12

state 48

    (40) expression -> IDENTIFIER DIVIDE_CEILASSIGN . expression
    (58) expression -> IDENTIFIER DIVIDE_CEILASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 99
    arithmetic_expression          shift and go to state 100
    atomar                         shift and go to state 12

state 49

    (41) expression -> IDENTIFIER GREATER_THANASSIGN . expression
    (59) expression -> IDENTIFIER GREATER_THANASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 101
    arithmetic_expression          shift and go to state 102
    atomar                         shift and go to state 12

state 50

    (42) expression -> IDENTIFIER SMALLER_THANASSIGN . expression
    (60) expression -> IDENTIFIER SMALLER_THANASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 103
    arithmetic_expression          shift and go to state 104
    atomar                         shift and go to state 12

state 51

    (43) expression -> IDENTIFIER GREATER_EQUALSASSIGN . expression
    (61) expression -> IDENTIFIER GREATER_EQUALSASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 105
    arithmetic_expression          shift and go to state 106
    atomar                         shift and go to state 12

state 52

    (44) expression -> IDENTIFIER SMALLER_EQUALSASSIGN . expression
    (62) expression -> IDENTIFIER SMALLER_EQUALSASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 107
    arithmetic_expression          shift and go to state 108
    atomar                         shift and go to state 12

state 53

    (45) expression -> IDENTIFIER EQUALSASSIGN . expression
    (63) expression -> IDENTIFIER EQUALSASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 109
    arithmetic_expression          shift and go to state 110
    atomar                         shift and go to state 12

state 54

    (46) expression -> IDENTIFIER UNEQUALSASSIGN . expression
    (64) expression -> IDENTIFIER UNEQUALSASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 111
    arithmetic_expression          shift and go to state 112
    atomar                         shift and go to state 12

state 55

    (47) expression -> IDENTIFIER ANDASSIGN . expression
    (65) expression -> IDENTIFIER ANDASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 113
    arithmetic_expression          shift and go to state 114
    atomar                         shift and go to state 12

state 56

    (48) expression -> IDENTIFIER ORASSIGN . expression
    (66) expression -> IDENTIFIER ORASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 115
    arithmetic_expression          shift and go to state 116
    atomar                         shift and go to state 12

state 57

    (49) expression -> IDENTIFIER XORASSIGN . expression
    (67) expression -> IDENTIFIER XORASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 117
    arithmetic_expression          shift and go to state 118
    atomar                         shift and go to state 12

state 58

    (50) expression -> IDENTIFIER EXPASSIGN . expression
    (68) expression -> IDENTIFIER EXPASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 119
    arithmetic_expression          shift and go to state 120
    atomar                         shift and go to state 12

state 59

    (51) expression -> IDENTIFIER MODASSIGN . expression
    (69) expression -> IDENTIFIER MODASSIGN . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 121
    arithmetic_expression          shift and go to state 122
    atomar                         shift and go to state 12

state 60

    (4) arithmetic_expression -> LPAREN arithmetic_expression . RPAREN
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    RPAREN          shift and go to state 123
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34


state 61

    (3) atomar -> IDENTIFIER .

    RPAREN          reduce using rule 3 (atomar -> IDENTIFIER .)
    PLUS            reduce using rule 3 (atomar -> IDENTIFIER .)
    MINUS           reduce using rule 3 (atomar -> IDENTIFIER .)
    TIMES           reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE          reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_CEIL     reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_FLOOR    reduce using rule 3 (atomar -> IDENTIFIER .)
    MOD             reduce using rule 3 (atomar -> IDENTIFIER .)
    EXP             reduce using rule 3 (atomar -> IDENTIFIER .)
    AND             reduce using rule 3 (atomar -> IDENTIFIER .)
    OR              reduce using rule 3 (atomar -> IDENTIFIER .)
    XOR             reduce using rule 3 (atomar -> IDENTIFIER .)
    POWER           reduce using rule 3 (atomar -> IDENTIFIER .)
    IMAG            reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    UNEQUALS        reduce using rule 3 (atomar -> IDENTIFIER .)
    EQUALS          reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    END             reduce using rule 3 (atomar -> IDENTIFIER .)
    SEMICOLON       reduce using rule 3 (atomar -> IDENTIFIER .)
    THEN            reduce using rule 3 (atomar -> IDENTIFIER .)
    ENDCOND         reduce using rule 3 (atomar -> IDENTIFIER .)
    ELIF            reduce using rule 3 (atomar -> IDENTIFIER .)
    ELSE            reduce using rule 3 (atomar -> IDENTIFIER .)
    ,               reduce using rule 3 (atomar -> IDENTIFIER .)
    ]               reduce using rule 3 (atomar -> IDENTIFIER .)
    [               reduce using rule 3 (atomar -> IDENTIFIER .)


state 62

    (20) arithmetic_expression -> PLUS arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    PLUS            reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    MINUS           reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    TIMES           reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE          reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    MOD             reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    EXP             reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    AND             reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    OR              reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    XOR             reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    POWER           reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    UNEQUALS        reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    EQUALS          reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    END             reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    SEMICOLON       reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    RPAREN          reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    THEN            reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    ENDCOND         reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    ELIF            reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    ELSE            reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    ,               reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    ]               reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)
    [               reduce using rule 20 (arithmetic_expression -> PLUS arithmetic_expression .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! DIVIDE_CEIL     [ shift and go to state 27 ]
  ! DIVIDE_FLOOR    [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! EXP             [ shift and go to state 30 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]
  ! POWER           [ shift and go to state 34 ]


state 63

    (19) arithmetic_expression -> MINUS arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    PLUS            reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    MINUS           reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    TIMES           reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE          reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    MOD             reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    EXP             reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    AND             reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    OR              reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    XOR             reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    POWER           reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    UNEQUALS        reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    EQUALS          reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    END             reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    SEMICOLON       reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    RPAREN          reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    THEN            reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    ENDCOND         reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    ELIF            reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    ELSE            reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    ,               reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    ]               reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)
    [               reduce using rule 19 (arithmetic_expression -> MINUS arithmetic_expression .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! DIVIDE_CEIL     [ shift and go to state 27 ]
  ! DIVIDE_FLOOR    [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! EXP             [ shift and go to state 30 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]
  ! POWER           [ shift and go to state 34 ]


state 64

    (18) arithmetic_expression -> NOT arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    PLUS            reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    MINUS           reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    TIMES           reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE          reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    MOD             reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    EXP             reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    AND             reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    OR              reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    XOR             reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    POWER           reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    GREATER_THAN    reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    SMALLER_THAN    reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    UNEQUALS        reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    EQUALS          reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    END             reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    SEMICOLON       reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    RPAREN          reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    THEN            reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    ENDCOND         reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    ELIF            reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    ELSE            reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    ,               reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    ]               reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)
    [               reduce using rule 18 (arithmetic_expression -> NOT arithmetic_expression .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! DIVIDE_CEIL     [ shift and go to state 27 ]
  ! DIVIDE_FLOOR    [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! EXP             [ shift and go to state 30 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]
  ! POWER           [ shift and go to state 34 ]


state 65

    (78) statement -> IF expression . THEN statements ENDCOND
    (79) statement -> IF expression . THEN statements else_elif_body ENDCOND

    THEN            shift and go to state 124


state 66

    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 67

    (82) statement -> WHILE expression . THEN statements

    THEN            shift and go to state 125


state 68

    (83) statement -> LOOP IDENTIFIER . LOOPIN interval LOOPTHEN statements ENDCOND

    LOOPIN          shift and go to state 126


state 69

    (71) sequence -> BEGIN statements SEMICOLON END .

    $end            reduce using rule 71 (sequence -> BEGIN statements SEMICOLON END .)
    END             reduce using rule 71 (sequence -> BEGIN statements SEMICOLON END .)
    SEMICOLON       reduce using rule 71 (sequence -> BEGIN statements SEMICOLON END .)
    ENDCOND         reduce using rule 71 (sequence -> BEGIN statements SEMICOLON END .)
    ELIF            reduce using rule 71 (sequence -> BEGIN statements SEMICOLON END .)
    ELSE            reduce using rule 71 (sequence -> BEGIN statements SEMICOLON END .)


state 70

    (76) statements -> statements SEMICOLON expression .

    END             reduce using rule 76 (statements -> statements SEMICOLON expression .)
    SEMICOLON       reduce using rule 76 (statements -> statements SEMICOLON expression .)
    ENDCOND         reduce using rule 76 (statements -> statements SEMICOLON expression .)
    ELIF            reduce using rule 76 (statements -> statements SEMICOLON expression .)
    ELSE            reduce using rule 76 (statements -> statements SEMICOLON expression .)


state 71

    (77) statements -> statements SEMICOLON arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 77 (statements -> statements SEMICOLON arithmetic_expression .)
    SEMICOLON       reduce using rule 77 (statements -> statements SEMICOLON arithmetic_expression .)
    ENDCOND         reduce using rule 77 (statements -> statements SEMICOLON arithmetic_expression .)
    ELIF            reduce using rule 77 (statements -> statements SEMICOLON arithmetic_expression .)
    ELSE            reduce using rule 77 (statements -> statements SEMICOLON arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 72

    (22) expression -> arithmetic_expression comparison_op arithmetic_expression . comparison_chain
    (23) expression -> arithmetic_expression comparison_op arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) comparison_chain -> . comparison_op arithmetic_expression comparison_chain
    (25) comparison_chain -> . comparison_op arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 23 (expression -> arithmetic_expression comparison_op arithmetic_expression .)
    SEMICOLON       reduce using rule 23 (expression -> arithmetic_expression comparison_op arithmetic_expression .)
    THEN            reduce using rule 23 (expression -> arithmetic_expression comparison_op arithmetic_expression .)
    ENDCOND         reduce using rule 23 (expression -> arithmetic_expression comparison_op arithmetic_expression .)
    ELIF            reduce using rule 23 (expression -> arithmetic_expression comparison_op arithmetic_expression .)
    ELSE            reduce using rule 23 (expression -> arithmetic_expression comparison_op arithmetic_expression .)
    ,               reduce using rule 23 (expression -> arithmetic_expression comparison_op arithmetic_expression .)
    ]               reduce using rule 23 (expression -> arithmetic_expression comparison_op arithmetic_expression .)
    [               reduce using rule 23 (expression -> arithmetic_expression comparison_op arithmetic_expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 127
    comparison_chain               shift and go to state 128

state 73

    (5) arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    PLUS            reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    MINUS           reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    AND             reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    OR              reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    XOR             reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    UNEQUALS        reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    EQUALS          reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    END             reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SEMICOLON       reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    RPAREN          reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    THEN            reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ENDCOND         reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ELIF            reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ELSE            reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ,               reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ]               reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    [               reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    POWER           shift and go to state 34

  ! TIMES           [ reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! MOD             [ reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! EXP             [ reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! POWER           [ reduce using rule 5 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]


state 74

    (6) arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    PLUS            reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    MINUS           reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    AND             reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    OR              reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    XOR             reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    UNEQUALS        reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    EQUALS          reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    END             reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SEMICOLON       reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    RPAREN          reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    THEN            reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ENDCOND         reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ELIF            reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ELSE            reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ,               reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ]               reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    [               reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    POWER           shift and go to state 34

  ! TIMES           [ reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! MOD             [ reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! EXP             [ reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! POWER           [ reduce using rule 6 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]


state 75

    (7) arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    PLUS            reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    MINUS           reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    TIMES           reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE          reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    MOD             reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    AND             reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    OR              reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    XOR             reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    GREATER_THAN    reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SMALLER_THAN    reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    UNEQUALS        reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    EQUALS          reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    END             reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SEMICOLON       reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    RPAREN          reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    THEN            reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ENDCOND         reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ELIF            reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ELSE            reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ,               reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ]               reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    [               reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    EXP             shift and go to state 30
    POWER           shift and go to state 34

  ! EXP             [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! POWER           [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! DIVIDE_CEIL     [ shift and go to state 27 ]
  ! DIVIDE_FLOOR    [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]


state 76

    (8) arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    PLUS            reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    MINUS           reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    TIMES           reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE          reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    MOD             reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    AND             reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    OR              reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    XOR             reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    GREATER_THAN    reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SMALLER_THAN    reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    UNEQUALS        reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    EQUALS          reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    END             reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SEMICOLON       reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    RPAREN          reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    THEN            reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ENDCOND         reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ELIF            reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ELSE            reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ,               reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ]               reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    [               reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    EXP             shift and go to state 30
    POWER           shift and go to state 34

  ! EXP             [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! POWER           [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! DIVIDE_CEIL     [ shift and go to state 27 ]
  ! DIVIDE_FLOOR    [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]


state 77

    (9) arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    PLUS            reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    MINUS           reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    TIMES           reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE          reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    MOD             reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    AND             reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    OR              reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    XOR             reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    GREATER_THAN    reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SMALLER_THAN    reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    UNEQUALS        reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    EQUALS          reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    END             reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SEMICOLON       reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    RPAREN          reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    THEN            reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ENDCOND         reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ELIF            reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ELSE            reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ,               reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ]               reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    [               reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    EXP             shift and go to state 30
    POWER           shift and go to state 34

  ! EXP             [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .) ]
  ! POWER           [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! DIVIDE_CEIL     [ shift and go to state 27 ]
  ! DIVIDE_FLOOR    [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]


state 78

    (10) arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    PLUS            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    MINUS           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    TIMES           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    MOD             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    AND             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    OR              reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    XOR             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    GREATER_THAN    reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    UNEQUALS        reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    EQUALS          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    END             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SEMICOLON       reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    RPAREN          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    THEN            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ENDCOND         reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ELIF            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ELSE            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ,               reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ]               reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    [               reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    EXP             shift and go to state 30
    POWER           shift and go to state 34

  ! EXP             [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! DIVIDE_CEIL     [ shift and go to state 27 ]
  ! DIVIDE_FLOOR    [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]


state 79

    (11) arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    PLUS            reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    MINUS           reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    TIMES           reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE          reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    MOD             reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    AND             reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    OR              reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    XOR             reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    GREATER_THAN    reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SMALLER_THAN    reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    UNEQUALS        reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    EQUALS          reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    END             reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SEMICOLON       reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    RPAREN          reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    THEN            reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ENDCOND         reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ELIF            reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ELSE            reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ,               reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ]               reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    [               reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    EXP             shift and go to state 30
    POWER           shift and go to state 34

  ! EXP             [ reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .) ]
  ! POWER           [ reduce using rule 11 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! DIVIDE_CEIL     [ shift and go to state 27 ]
  ! DIVIDE_FLOOR    [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]


state 80

    (12) arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    PLUS            reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    MINUS           reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    TIMES           reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE          reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    MOD             reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    AND             reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    OR              reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    XOR             reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    GREATER_THAN    reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SMALLER_THAN    reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    UNEQUALS        reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    EQUALS          reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    END             reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SEMICOLON       reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    RPAREN          reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    THEN            reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ENDCOND         reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ELIF            reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ELSE            reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ,               reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ]               reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    [               reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    EXP             shift and go to state 30
    POWER           shift and go to state 34

  ! EXP             [ reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .) ]
  ! POWER           [ reduce using rule 12 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! DIVIDE_CEIL     [ shift and go to state 27 ]
  ! DIVIDE_FLOOR    [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]


state 81

    (13) arithmetic_expression -> arithmetic_expression AND arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    AND             reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    OR              reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    XOR             reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    GREATER_THAN    reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SMALLER_THAN    reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    UNEQUALS        reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    EQUALS          reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    END             reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SEMICOLON       reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    RPAREN          reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    THEN            reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ENDCOND         reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ELIF            reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ELSE            reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ,               reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ]               reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    [               reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    POWER           shift and go to state 34

  ! PLUS            [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! MOD             [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! EXP             [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! POWER           [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]


state 82

    (14) arithmetic_expression -> arithmetic_expression OR arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    OR              reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    GREATER_THAN    reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    UNEQUALS        reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    EQUALS          reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    END             reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SEMICOLON       reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    RPAREN          reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    THEN            reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ENDCOND         reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ELIF            reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ELSE            reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ,               reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ]               reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    [               reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    XOR             shift and go to state 33
    POWER           shift and go to state 34

  ! PLUS            [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! MOD             [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! EXP             [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! AND             [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! XOR             [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! OR              [ shift and go to state 32 ]


state 83

    (15) arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    OR              reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    XOR             reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    GREATER_THAN    reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    UNEQUALS        reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    EQUALS          reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    END             reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SEMICOLON       reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    RPAREN          reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    THEN            reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ENDCOND         reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ELIF            reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ELSE            reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ,               reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ]               reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    [               reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    POWER           shift and go to state 34

  ! PLUS            [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! MOD             [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! EXP             [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! AND             [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]


state 84

    (16) arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression

    IMAG            reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    PLUS            reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    MINUS           reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    TIMES           reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE          reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    MOD             reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    AND             reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    OR              reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    XOR             reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    GREATER_THAN    reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SMALLER_THAN    reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    UNEQUALS        reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    EQUALS          reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    END             reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SEMICOLON       reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    RPAREN          reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    THEN            reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ENDCOND         reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ELIF            reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ELSE            reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ,               reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ]               reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    [               reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    EXP             shift and go to state 30
    POWER           shift and go to state 34

  ! EXP             [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .) ]
  ! POWER           [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 26 ]
  ! DIVIDE_CEIL     [ shift and go to state 27 ]
  ! DIVIDE_FLOOR    [ shift and go to state 28 ]
  ! MOD             [ shift and go to state 29 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 32 ]
  ! XOR             [ shift and go to state 33 ]


state 85

    (32) expression -> IDENTIFIER ASSIGN expression .

    END             reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    SEMICOLON       reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    THEN            reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    ENDCOND         reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    ELIF            reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    ELSE            reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    ,               reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    ]               reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    [               reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)


state 86

    (33) expression -> IDENTIFIER ASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 33 (expression -> IDENTIFIER ASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 33 (expression -> IDENTIFIER ASSIGN arithmetic_expression .)
    THEN            reduce using rule 33 (expression -> IDENTIFIER ASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 33 (expression -> IDENTIFIER ASSIGN arithmetic_expression .)
    ELIF            reduce using rule 33 (expression -> IDENTIFIER ASSIGN arithmetic_expression .)
    ELSE            reduce using rule 33 (expression -> IDENTIFIER ASSIGN arithmetic_expression .)
    ,               reduce using rule 33 (expression -> IDENTIFIER ASSIGN arithmetic_expression .)
    ]               reduce using rule 33 (expression -> IDENTIFIER ASSIGN arithmetic_expression .)
    [               reduce using rule 33 (expression -> IDENTIFIER ASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 87

    (34) expression -> IDENTIFIER PLUSASSIGN expression .

    END             reduce using rule 34 (expression -> IDENTIFIER PLUSASSIGN expression .)
    SEMICOLON       reduce using rule 34 (expression -> IDENTIFIER PLUSASSIGN expression .)
    THEN            reduce using rule 34 (expression -> IDENTIFIER PLUSASSIGN expression .)
    ENDCOND         reduce using rule 34 (expression -> IDENTIFIER PLUSASSIGN expression .)
    ELIF            reduce using rule 34 (expression -> IDENTIFIER PLUSASSIGN expression .)
    ELSE            reduce using rule 34 (expression -> IDENTIFIER PLUSASSIGN expression .)
    ,               reduce using rule 34 (expression -> IDENTIFIER PLUSASSIGN expression .)
    ]               reduce using rule 34 (expression -> IDENTIFIER PLUSASSIGN expression .)
    [               reduce using rule 34 (expression -> IDENTIFIER PLUSASSIGN expression .)


state 88

    (52) expression -> IDENTIFIER PLUSASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 52 (expression -> IDENTIFIER PLUSASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 52 (expression -> IDENTIFIER PLUSASSIGN arithmetic_expression .)
    THEN            reduce using rule 52 (expression -> IDENTIFIER PLUSASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 52 (expression -> IDENTIFIER PLUSASSIGN arithmetic_expression .)
    ELIF            reduce using rule 52 (expression -> IDENTIFIER PLUSASSIGN arithmetic_expression .)
    ELSE            reduce using rule 52 (expression -> IDENTIFIER PLUSASSIGN arithmetic_expression .)
    ,               reduce using rule 52 (expression -> IDENTIFIER PLUSASSIGN arithmetic_expression .)
    ]               reduce using rule 52 (expression -> IDENTIFIER PLUSASSIGN arithmetic_expression .)
    [               reduce using rule 52 (expression -> IDENTIFIER PLUSASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 89

    (35) expression -> IDENTIFIER MINUSASSIGN expression .

    END             reduce using rule 35 (expression -> IDENTIFIER MINUSASSIGN expression .)
    SEMICOLON       reduce using rule 35 (expression -> IDENTIFIER MINUSASSIGN expression .)
    THEN            reduce using rule 35 (expression -> IDENTIFIER MINUSASSIGN expression .)
    ENDCOND         reduce using rule 35 (expression -> IDENTIFIER MINUSASSIGN expression .)
    ELIF            reduce using rule 35 (expression -> IDENTIFIER MINUSASSIGN expression .)
    ELSE            reduce using rule 35 (expression -> IDENTIFIER MINUSASSIGN expression .)
    ,               reduce using rule 35 (expression -> IDENTIFIER MINUSASSIGN expression .)
    ]               reduce using rule 35 (expression -> IDENTIFIER MINUSASSIGN expression .)
    [               reduce using rule 35 (expression -> IDENTIFIER MINUSASSIGN expression .)


state 90

    (53) expression -> IDENTIFIER MINUSASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 53 (expression -> IDENTIFIER MINUSASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 53 (expression -> IDENTIFIER MINUSASSIGN arithmetic_expression .)
    THEN            reduce using rule 53 (expression -> IDENTIFIER MINUSASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 53 (expression -> IDENTIFIER MINUSASSIGN arithmetic_expression .)
    ELIF            reduce using rule 53 (expression -> IDENTIFIER MINUSASSIGN arithmetic_expression .)
    ELSE            reduce using rule 53 (expression -> IDENTIFIER MINUSASSIGN arithmetic_expression .)
    ,               reduce using rule 53 (expression -> IDENTIFIER MINUSASSIGN arithmetic_expression .)
    ]               reduce using rule 53 (expression -> IDENTIFIER MINUSASSIGN arithmetic_expression .)
    [               reduce using rule 53 (expression -> IDENTIFIER MINUSASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 91

    (36) expression -> IDENTIFIER TIMESASSIGN expression .

    END             reduce using rule 36 (expression -> IDENTIFIER TIMESASSIGN expression .)
    SEMICOLON       reduce using rule 36 (expression -> IDENTIFIER TIMESASSIGN expression .)
    THEN            reduce using rule 36 (expression -> IDENTIFIER TIMESASSIGN expression .)
    ENDCOND         reduce using rule 36 (expression -> IDENTIFIER TIMESASSIGN expression .)
    ELIF            reduce using rule 36 (expression -> IDENTIFIER TIMESASSIGN expression .)
    ELSE            reduce using rule 36 (expression -> IDENTIFIER TIMESASSIGN expression .)
    ,               reduce using rule 36 (expression -> IDENTIFIER TIMESASSIGN expression .)
    ]               reduce using rule 36 (expression -> IDENTIFIER TIMESASSIGN expression .)
    [               reduce using rule 36 (expression -> IDENTIFIER TIMESASSIGN expression .)


state 92

    (54) expression -> IDENTIFIER TIMESASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 54 (expression -> IDENTIFIER TIMESASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 54 (expression -> IDENTIFIER TIMESASSIGN arithmetic_expression .)
    THEN            reduce using rule 54 (expression -> IDENTIFIER TIMESASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 54 (expression -> IDENTIFIER TIMESASSIGN arithmetic_expression .)
    ELIF            reduce using rule 54 (expression -> IDENTIFIER TIMESASSIGN arithmetic_expression .)
    ELSE            reduce using rule 54 (expression -> IDENTIFIER TIMESASSIGN arithmetic_expression .)
    ,               reduce using rule 54 (expression -> IDENTIFIER TIMESASSIGN arithmetic_expression .)
    ]               reduce using rule 54 (expression -> IDENTIFIER TIMESASSIGN arithmetic_expression .)
    [               reduce using rule 54 (expression -> IDENTIFIER TIMESASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 93

    (37) expression -> IDENTIFIER POWERASSIGN expression .

    END             reduce using rule 37 (expression -> IDENTIFIER POWERASSIGN expression .)
    SEMICOLON       reduce using rule 37 (expression -> IDENTIFIER POWERASSIGN expression .)
    THEN            reduce using rule 37 (expression -> IDENTIFIER POWERASSIGN expression .)
    ENDCOND         reduce using rule 37 (expression -> IDENTIFIER POWERASSIGN expression .)
    ELIF            reduce using rule 37 (expression -> IDENTIFIER POWERASSIGN expression .)
    ELSE            reduce using rule 37 (expression -> IDENTIFIER POWERASSIGN expression .)
    ,               reduce using rule 37 (expression -> IDENTIFIER POWERASSIGN expression .)
    ]               reduce using rule 37 (expression -> IDENTIFIER POWERASSIGN expression .)
    [               reduce using rule 37 (expression -> IDENTIFIER POWERASSIGN expression .)


state 94

    (55) expression -> IDENTIFIER POWERASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 55 (expression -> IDENTIFIER POWERASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 55 (expression -> IDENTIFIER POWERASSIGN arithmetic_expression .)
    THEN            reduce using rule 55 (expression -> IDENTIFIER POWERASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 55 (expression -> IDENTIFIER POWERASSIGN arithmetic_expression .)
    ELIF            reduce using rule 55 (expression -> IDENTIFIER POWERASSIGN arithmetic_expression .)
    ELSE            reduce using rule 55 (expression -> IDENTIFIER POWERASSIGN arithmetic_expression .)
    ,               reduce using rule 55 (expression -> IDENTIFIER POWERASSIGN arithmetic_expression .)
    ]               reduce using rule 55 (expression -> IDENTIFIER POWERASSIGN arithmetic_expression .)
    [               reduce using rule 55 (expression -> IDENTIFIER POWERASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 95

    (38) expression -> IDENTIFIER DIVIDEASSIGN expression .

    END             reduce using rule 38 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    SEMICOLON       reduce using rule 38 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    THEN            reduce using rule 38 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    ENDCOND         reduce using rule 38 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    ELIF            reduce using rule 38 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    ELSE            reduce using rule 38 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    ,               reduce using rule 38 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    ]               reduce using rule 38 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    [               reduce using rule 38 (expression -> IDENTIFIER DIVIDEASSIGN expression .)


state 96

    (56) expression -> IDENTIFIER DIVIDEASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 56 (expression -> IDENTIFIER DIVIDEASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 56 (expression -> IDENTIFIER DIVIDEASSIGN arithmetic_expression .)
    THEN            reduce using rule 56 (expression -> IDENTIFIER DIVIDEASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 56 (expression -> IDENTIFIER DIVIDEASSIGN arithmetic_expression .)
    ELIF            reduce using rule 56 (expression -> IDENTIFIER DIVIDEASSIGN arithmetic_expression .)
    ELSE            reduce using rule 56 (expression -> IDENTIFIER DIVIDEASSIGN arithmetic_expression .)
    ,               reduce using rule 56 (expression -> IDENTIFIER DIVIDEASSIGN arithmetic_expression .)
    ]               reduce using rule 56 (expression -> IDENTIFIER DIVIDEASSIGN arithmetic_expression .)
    [               reduce using rule 56 (expression -> IDENTIFIER DIVIDEASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 97

    (39) expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .

    END             reduce using rule 39 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    SEMICOLON       reduce using rule 39 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    THEN            reduce using rule 39 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    ENDCOND         reduce using rule 39 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    ELIF            reduce using rule 39 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    ELSE            reduce using rule 39 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    ,               reduce using rule 39 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    ]               reduce using rule 39 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    [               reduce using rule 39 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)


state 98

    (57) expression -> IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 57 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 57 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression .)
    THEN            reduce using rule 57 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 57 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression .)
    ELIF            reduce using rule 57 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression .)
    ELSE            reduce using rule 57 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression .)
    ,               reduce using rule 57 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression .)
    ]               reduce using rule 57 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression .)
    [               reduce using rule 57 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 99

    (40) expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .

    END             reduce using rule 40 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    SEMICOLON       reduce using rule 40 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    THEN            reduce using rule 40 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    ENDCOND         reduce using rule 40 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    ELIF            reduce using rule 40 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    ELSE            reduce using rule 40 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    ,               reduce using rule 40 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    ]               reduce using rule 40 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    [               reduce using rule 40 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)


state 100

    (58) expression -> IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 58 (expression -> IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 58 (expression -> IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression .)
    THEN            reduce using rule 58 (expression -> IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 58 (expression -> IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression .)
    ELIF            reduce using rule 58 (expression -> IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression .)
    ELSE            reduce using rule 58 (expression -> IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression .)
    ,               reduce using rule 58 (expression -> IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression .)
    ]               reduce using rule 58 (expression -> IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression .)
    [               reduce using rule 58 (expression -> IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 101

    (41) expression -> IDENTIFIER GREATER_THANASSIGN expression .

    END             reduce using rule 41 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    SEMICOLON       reduce using rule 41 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    THEN            reduce using rule 41 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    ENDCOND         reduce using rule 41 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    ELIF            reduce using rule 41 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    ELSE            reduce using rule 41 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    ,               reduce using rule 41 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    ]               reduce using rule 41 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    [               reduce using rule 41 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)


state 102

    (59) expression -> IDENTIFIER GREATER_THANASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 59 (expression -> IDENTIFIER GREATER_THANASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 59 (expression -> IDENTIFIER GREATER_THANASSIGN arithmetic_expression .)
    THEN            reduce using rule 59 (expression -> IDENTIFIER GREATER_THANASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 59 (expression -> IDENTIFIER GREATER_THANASSIGN arithmetic_expression .)
    ELIF            reduce using rule 59 (expression -> IDENTIFIER GREATER_THANASSIGN arithmetic_expression .)
    ELSE            reduce using rule 59 (expression -> IDENTIFIER GREATER_THANASSIGN arithmetic_expression .)
    ,               reduce using rule 59 (expression -> IDENTIFIER GREATER_THANASSIGN arithmetic_expression .)
    ]               reduce using rule 59 (expression -> IDENTIFIER GREATER_THANASSIGN arithmetic_expression .)
    [               reduce using rule 59 (expression -> IDENTIFIER GREATER_THANASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 103

    (42) expression -> IDENTIFIER SMALLER_THANASSIGN expression .

    END             reduce using rule 42 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    SEMICOLON       reduce using rule 42 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    THEN            reduce using rule 42 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    ENDCOND         reduce using rule 42 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    ELIF            reduce using rule 42 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    ELSE            reduce using rule 42 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    ,               reduce using rule 42 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    ]               reduce using rule 42 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    [               reduce using rule 42 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)


state 104

    (60) expression -> IDENTIFIER SMALLER_THANASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 60 (expression -> IDENTIFIER SMALLER_THANASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 60 (expression -> IDENTIFIER SMALLER_THANASSIGN arithmetic_expression .)
    THEN            reduce using rule 60 (expression -> IDENTIFIER SMALLER_THANASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 60 (expression -> IDENTIFIER SMALLER_THANASSIGN arithmetic_expression .)
    ELIF            reduce using rule 60 (expression -> IDENTIFIER SMALLER_THANASSIGN arithmetic_expression .)
    ELSE            reduce using rule 60 (expression -> IDENTIFIER SMALLER_THANASSIGN arithmetic_expression .)
    ,               reduce using rule 60 (expression -> IDENTIFIER SMALLER_THANASSIGN arithmetic_expression .)
    ]               reduce using rule 60 (expression -> IDENTIFIER SMALLER_THANASSIGN arithmetic_expression .)
    [               reduce using rule 60 (expression -> IDENTIFIER SMALLER_THANASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 105

    (43) expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .

    END             reduce using rule 43 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    SEMICOLON       reduce using rule 43 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    THEN            reduce using rule 43 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    ENDCOND         reduce using rule 43 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    ELIF            reduce using rule 43 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    ELSE            reduce using rule 43 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    ,               reduce using rule 43 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    ]               reduce using rule 43 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    [               reduce using rule 43 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)


state 106

    (61) expression -> IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 61 (expression -> IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 61 (expression -> IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression .)
    THEN            reduce using rule 61 (expression -> IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 61 (expression -> IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression .)
    ELIF            reduce using rule 61 (expression -> IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression .)
    ELSE            reduce using rule 61 (expression -> IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression .)
    ,               reduce using rule 61 (expression -> IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression .)
    ]               reduce using rule 61 (expression -> IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression .)
    [               reduce using rule 61 (expression -> IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 107

    (44) expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .

    END             reduce using rule 44 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    SEMICOLON       reduce using rule 44 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    THEN            reduce using rule 44 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    ENDCOND         reduce using rule 44 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    ELIF            reduce using rule 44 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    ELSE            reduce using rule 44 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    ,               reduce using rule 44 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    ]               reduce using rule 44 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    [               reduce using rule 44 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)


state 108

    (62) expression -> IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 62 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 62 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression .)
    THEN            reduce using rule 62 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 62 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression .)
    ELIF            reduce using rule 62 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression .)
    ELSE            reduce using rule 62 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression .)
    ,               reduce using rule 62 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression .)
    ]               reduce using rule 62 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression .)
    [               reduce using rule 62 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 109

    (45) expression -> IDENTIFIER EQUALSASSIGN expression .

    END             reduce using rule 45 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    SEMICOLON       reduce using rule 45 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    THEN            reduce using rule 45 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    ENDCOND         reduce using rule 45 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    ELIF            reduce using rule 45 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    ELSE            reduce using rule 45 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    ,               reduce using rule 45 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    ]               reduce using rule 45 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    [               reduce using rule 45 (expression -> IDENTIFIER EQUALSASSIGN expression .)


state 110

    (63) expression -> IDENTIFIER EQUALSASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 63 (expression -> IDENTIFIER EQUALSASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 63 (expression -> IDENTIFIER EQUALSASSIGN arithmetic_expression .)
    THEN            reduce using rule 63 (expression -> IDENTIFIER EQUALSASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 63 (expression -> IDENTIFIER EQUALSASSIGN arithmetic_expression .)
    ELIF            reduce using rule 63 (expression -> IDENTIFIER EQUALSASSIGN arithmetic_expression .)
    ELSE            reduce using rule 63 (expression -> IDENTIFIER EQUALSASSIGN arithmetic_expression .)
    ,               reduce using rule 63 (expression -> IDENTIFIER EQUALSASSIGN arithmetic_expression .)
    ]               reduce using rule 63 (expression -> IDENTIFIER EQUALSASSIGN arithmetic_expression .)
    [               reduce using rule 63 (expression -> IDENTIFIER EQUALSASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 111

    (46) expression -> IDENTIFIER UNEQUALSASSIGN expression .

    END             reduce using rule 46 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    SEMICOLON       reduce using rule 46 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    THEN            reduce using rule 46 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    ENDCOND         reduce using rule 46 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    ELIF            reduce using rule 46 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    ELSE            reduce using rule 46 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    ,               reduce using rule 46 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    ]               reduce using rule 46 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    [               reduce using rule 46 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)


state 112

    (64) expression -> IDENTIFIER UNEQUALSASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 64 (expression -> IDENTIFIER UNEQUALSASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 64 (expression -> IDENTIFIER UNEQUALSASSIGN arithmetic_expression .)
    THEN            reduce using rule 64 (expression -> IDENTIFIER UNEQUALSASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 64 (expression -> IDENTIFIER UNEQUALSASSIGN arithmetic_expression .)
    ELIF            reduce using rule 64 (expression -> IDENTIFIER UNEQUALSASSIGN arithmetic_expression .)
    ELSE            reduce using rule 64 (expression -> IDENTIFIER UNEQUALSASSIGN arithmetic_expression .)
    ,               reduce using rule 64 (expression -> IDENTIFIER UNEQUALSASSIGN arithmetic_expression .)
    ]               reduce using rule 64 (expression -> IDENTIFIER UNEQUALSASSIGN arithmetic_expression .)
    [               reduce using rule 64 (expression -> IDENTIFIER UNEQUALSASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 113

    (47) expression -> IDENTIFIER ANDASSIGN expression .

    END             reduce using rule 47 (expression -> IDENTIFIER ANDASSIGN expression .)
    SEMICOLON       reduce using rule 47 (expression -> IDENTIFIER ANDASSIGN expression .)
    THEN            reduce using rule 47 (expression -> IDENTIFIER ANDASSIGN expression .)
    ENDCOND         reduce using rule 47 (expression -> IDENTIFIER ANDASSIGN expression .)
    ELIF            reduce using rule 47 (expression -> IDENTIFIER ANDASSIGN expression .)
    ELSE            reduce using rule 47 (expression -> IDENTIFIER ANDASSIGN expression .)
    ,               reduce using rule 47 (expression -> IDENTIFIER ANDASSIGN expression .)
    ]               reduce using rule 47 (expression -> IDENTIFIER ANDASSIGN expression .)
    [               reduce using rule 47 (expression -> IDENTIFIER ANDASSIGN expression .)


state 114

    (65) expression -> IDENTIFIER ANDASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 65 (expression -> IDENTIFIER ANDASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 65 (expression -> IDENTIFIER ANDASSIGN arithmetic_expression .)
    THEN            reduce using rule 65 (expression -> IDENTIFIER ANDASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 65 (expression -> IDENTIFIER ANDASSIGN arithmetic_expression .)
    ELIF            reduce using rule 65 (expression -> IDENTIFIER ANDASSIGN arithmetic_expression .)
    ELSE            reduce using rule 65 (expression -> IDENTIFIER ANDASSIGN arithmetic_expression .)
    ,               reduce using rule 65 (expression -> IDENTIFIER ANDASSIGN arithmetic_expression .)
    ]               reduce using rule 65 (expression -> IDENTIFIER ANDASSIGN arithmetic_expression .)
    [               reduce using rule 65 (expression -> IDENTIFIER ANDASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 115

    (48) expression -> IDENTIFIER ORASSIGN expression .

    END             reduce using rule 48 (expression -> IDENTIFIER ORASSIGN expression .)
    SEMICOLON       reduce using rule 48 (expression -> IDENTIFIER ORASSIGN expression .)
    THEN            reduce using rule 48 (expression -> IDENTIFIER ORASSIGN expression .)
    ENDCOND         reduce using rule 48 (expression -> IDENTIFIER ORASSIGN expression .)
    ELIF            reduce using rule 48 (expression -> IDENTIFIER ORASSIGN expression .)
    ELSE            reduce using rule 48 (expression -> IDENTIFIER ORASSIGN expression .)
    ,               reduce using rule 48 (expression -> IDENTIFIER ORASSIGN expression .)
    ]               reduce using rule 48 (expression -> IDENTIFIER ORASSIGN expression .)
    [               reduce using rule 48 (expression -> IDENTIFIER ORASSIGN expression .)


state 116

    (66) expression -> IDENTIFIER ORASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 66 (expression -> IDENTIFIER ORASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 66 (expression -> IDENTIFIER ORASSIGN arithmetic_expression .)
    THEN            reduce using rule 66 (expression -> IDENTIFIER ORASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 66 (expression -> IDENTIFIER ORASSIGN arithmetic_expression .)
    ELIF            reduce using rule 66 (expression -> IDENTIFIER ORASSIGN arithmetic_expression .)
    ELSE            reduce using rule 66 (expression -> IDENTIFIER ORASSIGN arithmetic_expression .)
    ,               reduce using rule 66 (expression -> IDENTIFIER ORASSIGN arithmetic_expression .)
    ]               reduce using rule 66 (expression -> IDENTIFIER ORASSIGN arithmetic_expression .)
    [               reduce using rule 66 (expression -> IDENTIFIER ORASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 117

    (49) expression -> IDENTIFIER XORASSIGN expression .

    END             reduce using rule 49 (expression -> IDENTIFIER XORASSIGN expression .)
    SEMICOLON       reduce using rule 49 (expression -> IDENTIFIER XORASSIGN expression .)
    THEN            reduce using rule 49 (expression -> IDENTIFIER XORASSIGN expression .)
    ENDCOND         reduce using rule 49 (expression -> IDENTIFIER XORASSIGN expression .)
    ELIF            reduce using rule 49 (expression -> IDENTIFIER XORASSIGN expression .)
    ELSE            reduce using rule 49 (expression -> IDENTIFIER XORASSIGN expression .)
    ,               reduce using rule 49 (expression -> IDENTIFIER XORASSIGN expression .)
    ]               reduce using rule 49 (expression -> IDENTIFIER XORASSIGN expression .)
    [               reduce using rule 49 (expression -> IDENTIFIER XORASSIGN expression .)


state 118

    (67) expression -> IDENTIFIER XORASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 67 (expression -> IDENTIFIER XORASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 67 (expression -> IDENTIFIER XORASSIGN arithmetic_expression .)
    THEN            reduce using rule 67 (expression -> IDENTIFIER XORASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 67 (expression -> IDENTIFIER XORASSIGN arithmetic_expression .)
    ELIF            reduce using rule 67 (expression -> IDENTIFIER XORASSIGN arithmetic_expression .)
    ELSE            reduce using rule 67 (expression -> IDENTIFIER XORASSIGN arithmetic_expression .)
    ,               reduce using rule 67 (expression -> IDENTIFIER XORASSIGN arithmetic_expression .)
    ]               reduce using rule 67 (expression -> IDENTIFIER XORASSIGN arithmetic_expression .)
    [               reduce using rule 67 (expression -> IDENTIFIER XORASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 119

    (50) expression -> IDENTIFIER EXPASSIGN expression .

    END             reduce using rule 50 (expression -> IDENTIFIER EXPASSIGN expression .)
    SEMICOLON       reduce using rule 50 (expression -> IDENTIFIER EXPASSIGN expression .)
    THEN            reduce using rule 50 (expression -> IDENTIFIER EXPASSIGN expression .)
    ENDCOND         reduce using rule 50 (expression -> IDENTIFIER EXPASSIGN expression .)
    ELIF            reduce using rule 50 (expression -> IDENTIFIER EXPASSIGN expression .)
    ELSE            reduce using rule 50 (expression -> IDENTIFIER EXPASSIGN expression .)
    ,               reduce using rule 50 (expression -> IDENTIFIER EXPASSIGN expression .)
    ]               reduce using rule 50 (expression -> IDENTIFIER EXPASSIGN expression .)
    [               reduce using rule 50 (expression -> IDENTIFIER EXPASSIGN expression .)


state 120

    (68) expression -> IDENTIFIER EXPASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 68 (expression -> IDENTIFIER EXPASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 68 (expression -> IDENTIFIER EXPASSIGN arithmetic_expression .)
    THEN            reduce using rule 68 (expression -> IDENTIFIER EXPASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 68 (expression -> IDENTIFIER EXPASSIGN arithmetic_expression .)
    ELIF            reduce using rule 68 (expression -> IDENTIFIER EXPASSIGN arithmetic_expression .)
    ELSE            reduce using rule 68 (expression -> IDENTIFIER EXPASSIGN arithmetic_expression .)
    ,               reduce using rule 68 (expression -> IDENTIFIER EXPASSIGN arithmetic_expression .)
    ]               reduce using rule 68 (expression -> IDENTIFIER EXPASSIGN arithmetic_expression .)
    [               reduce using rule 68 (expression -> IDENTIFIER EXPASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 121

    (51) expression -> IDENTIFIER MODASSIGN expression .

    END             reduce using rule 51 (expression -> IDENTIFIER MODASSIGN expression .)
    SEMICOLON       reduce using rule 51 (expression -> IDENTIFIER MODASSIGN expression .)
    THEN            reduce using rule 51 (expression -> IDENTIFIER MODASSIGN expression .)
    ENDCOND         reduce using rule 51 (expression -> IDENTIFIER MODASSIGN expression .)
    ELIF            reduce using rule 51 (expression -> IDENTIFIER MODASSIGN expression .)
    ELSE            reduce using rule 51 (expression -> IDENTIFIER MODASSIGN expression .)
    ,               reduce using rule 51 (expression -> IDENTIFIER MODASSIGN expression .)
    ]               reduce using rule 51 (expression -> IDENTIFIER MODASSIGN expression .)
    [               reduce using rule 51 (expression -> IDENTIFIER MODASSIGN expression .)


state 122

    (69) expression -> IDENTIFIER MODASSIGN arithmetic_expression .
    (21) expression -> arithmetic_expression . IMAG
    (22) expression -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (23) expression -> arithmetic_expression . comparison_op arithmetic_expression
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 69 (expression -> IDENTIFIER MODASSIGN arithmetic_expression .)
    SEMICOLON       reduce using rule 69 (expression -> IDENTIFIER MODASSIGN arithmetic_expression .)
    THEN            reduce using rule 69 (expression -> IDENTIFIER MODASSIGN arithmetic_expression .)
    ENDCOND         reduce using rule 69 (expression -> IDENTIFIER MODASSIGN arithmetic_expression .)
    ELIF            reduce using rule 69 (expression -> IDENTIFIER MODASSIGN arithmetic_expression .)
    ELSE            reduce using rule 69 (expression -> IDENTIFIER MODASSIGN arithmetic_expression .)
    ,               reduce using rule 69 (expression -> IDENTIFIER MODASSIGN arithmetic_expression .)
    ]               reduce using rule 69 (expression -> IDENTIFIER MODASSIGN arithmetic_expression .)
    [               reduce using rule 69 (expression -> IDENTIFIER MODASSIGN arithmetic_expression .)
    IMAG            shift and go to state 21
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 22

state 123

    (4) arithmetic_expression -> LPAREN arithmetic_expression RPAREN .

    IMAG            reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    PLUS            reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    MINUS           reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    TIMES           reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    DIVIDE          reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    DIVIDE_CEIL     reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    DIVIDE_FLOOR    reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    MOD             reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    EXP             reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    AND             reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    OR              reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    XOR             reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    POWER           reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    GREATER_THAN    reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    SMALLER_THAN    reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    UNEQUALS        reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    EQUALS          reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    SMALLER_EQUALS  reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    GREATER_EQUALS  reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    END             reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    SEMICOLON       reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    RPAREN          reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    THEN            reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    ENDCOND         reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    ELIF            reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    ELSE            reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    ,               reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    ]               reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)
    [               reduce using rule 4 (arithmetic_expression -> LPAREN arithmetic_expression RPAREN .)


state 124

    (78) statement -> IF expression THEN . statements ENDCOND
    (79) statement -> IF expression THEN . statements else_elif_body ENDCOND
    (72) statements -> . expression
    (73) statements -> . arithmetic_expression
    (74) statements -> . statement
    (75) statements -> . sequence
    (76) statements -> . statements SEMICOLON expression
    (77) statements -> . statements SEMICOLON arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (78) statement -> . IF expression THEN statements ENDCOND
    (79) statement -> . IF expression THEN statements else_elif_body ENDCOND
    (82) statement -> . WHILE expression THEN statements
    (83) statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (70) sequence -> . BEGIN statements END
    (71) sequence -> . BEGIN statements SEMICOLON END
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    LOOP            shift and go to state 16
    BEGIN           shift and go to state 2
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 4
    statements                     shift and go to state 129
    arithmetic_expression          shift and go to state 5
    statement                      shift and go to state 6
    sequence                       shift and go to state 7
    atomar                         shift and go to state 12

state 125

    (82) statement -> WHILE expression THEN . statements
    (72) statements -> . expression
    (73) statements -> . arithmetic_expression
    (74) statements -> . statement
    (75) statements -> . sequence
    (76) statements -> . statements SEMICOLON expression
    (77) statements -> . statements SEMICOLON arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (78) statement -> . IF expression THEN statements ENDCOND
    (79) statement -> . IF expression THEN statements else_elif_body ENDCOND
    (82) statement -> . WHILE expression THEN statements
    (83) statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (70) sequence -> . BEGIN statements END
    (71) sequence -> . BEGIN statements SEMICOLON END
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    LOOP            shift and go to state 16
    BEGIN           shift and go to state 2
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 4
    statements                     shift and go to state 130
    arithmetic_expression          shift and go to state 5
    statement                      shift and go to state 6
    sequence                       shift and go to state 7
    atomar                         shift and go to state 12

state 126

    (83) statement -> LOOP IDENTIFIER LOOPIN . interval LOOPTHEN statements ENDCOND
    (84) interval -> . [ expression , expression ]
    (85) interval -> . ] expression , expression ]
    (86) interval -> . [ expression , expression [
    (87) interval -> . ] expression , expression [

    [               shift and go to state 132
    ]               shift and go to state 133

    interval                       shift and go to state 131

state 127

    (24) comparison_chain -> comparison_op . arithmetic_expression comparison_chain
    (25) comparison_chain -> comparison_op . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    IDENTIFIER      shift and go to state 61

    arithmetic_expression          shift and go to state 134
    atomar                         shift and go to state 12

state 128

    (22) expression -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .

    END             reduce using rule 22 (expression -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    SEMICOLON       reduce using rule 22 (expression -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    THEN            reduce using rule 22 (expression -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ENDCOND         reduce using rule 22 (expression -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ELIF            reduce using rule 22 (expression -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ELSE            reduce using rule 22 (expression -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ,               reduce using rule 22 (expression -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ]               reduce using rule 22 (expression -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    [               reduce using rule 22 (expression -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)


state 129

    (78) statement -> IF expression THEN statements . ENDCOND
    (79) statement -> IF expression THEN statements . else_elif_body ENDCOND
    (76) statements -> statements . SEMICOLON expression
    (77) statements -> statements . SEMICOLON arithmetic_expression
    (80) else_elif_body -> . ELIF IF expression THEN statements else_elif_body
    (81) else_elif_body -> . ELSE statements

    ENDCOND         shift and go to state 135
    SEMICOLON       shift and go to state 137
    ELIF            shift and go to state 138
    ELSE            shift and go to state 139

    else_elif_body                 shift and go to state 136

state 130

    (82) statement -> WHILE expression THEN statements .
    (76) statements -> statements . SEMICOLON expression
    (77) statements -> statements . SEMICOLON arithmetic_expression

  ! shift/reduce conflict for SEMICOLON resolved as shift
    END             reduce using rule 82 (statement -> WHILE expression THEN statements .)
    ENDCOND         reduce using rule 82 (statement -> WHILE expression THEN statements .)
    ELIF            reduce using rule 82 (statement -> WHILE expression THEN statements .)
    ELSE            reduce using rule 82 (statement -> WHILE expression THEN statements .)
    SEMICOLON       shift and go to state 137

  ! SEMICOLON       [ reduce using rule 82 (statement -> WHILE expression THEN statements .) ]


state 131

    (83) statement -> LOOP IDENTIFIER LOOPIN interval . LOOPTHEN statements ENDCOND

    LOOPTHEN        shift and go to state 140


state 132

    (84) interval -> [ . expression , expression ]
    (86) interval -> [ . expression , expression [
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 141
    arithmetic_expression          shift and go to state 66
    atomar                         shift and go to state 12

state 133

    (85) interval -> ] . expression , expression ]
    (87) interval -> ] . expression , expression [
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 142
    arithmetic_expression          shift and go to state 66
    atomar                         shift and go to state 12

state 134

    (24) comparison_chain -> comparison_op arithmetic_expression . comparison_chain
    (25) comparison_chain -> comparison_op arithmetic_expression .
    (5) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (6) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (7) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) comparison_chain -> . comparison_op arithmetic_expression comparison_chain
    (25) comparison_chain -> . comparison_op arithmetic_expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 25 (comparison_chain -> comparison_op arithmetic_expression .)
    SEMICOLON       reduce using rule 25 (comparison_chain -> comparison_op arithmetic_expression .)
    THEN            reduce using rule 25 (comparison_chain -> comparison_op arithmetic_expression .)
    ENDCOND         reduce using rule 25 (comparison_chain -> comparison_op arithmetic_expression .)
    ELIF            reduce using rule 25 (comparison_chain -> comparison_op arithmetic_expression .)
    ELSE            reduce using rule 25 (comparison_chain -> comparison_op arithmetic_expression .)
    ,               reduce using rule 25 (comparison_chain -> comparison_op arithmetic_expression .)
    ]               reduce using rule 25 (comparison_chain -> comparison_op arithmetic_expression .)
    [               reduce using rule 25 (comparison_chain -> comparison_op arithmetic_expression .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 26
    DIVIDE_CEIL     shift and go to state 27
    DIVIDE_FLOOR    shift and go to state 28
    MOD             shift and go to state 29
    EXP             shift and go to state 30
    AND             shift and go to state 31
    OR              shift and go to state 32
    XOR             shift and go to state 33
    POWER           shift and go to state 34
    GREATER_THAN    shift and go to state 35
    SMALLER_THAN    shift and go to state 36
    UNEQUALS        shift and go to state 37
    EQUALS          shift and go to state 38
    SMALLER_EQUALS  shift and go to state 39
    GREATER_EQUALS  shift and go to state 40

    comparison_op                  shift and go to state 127
    comparison_chain               shift and go to state 143

state 135

    (78) statement -> IF expression THEN statements ENDCOND .

    END             reduce using rule 78 (statement -> IF expression THEN statements ENDCOND .)
    SEMICOLON       reduce using rule 78 (statement -> IF expression THEN statements ENDCOND .)
    ENDCOND         reduce using rule 78 (statement -> IF expression THEN statements ENDCOND .)
    ELIF            reduce using rule 78 (statement -> IF expression THEN statements ENDCOND .)
    ELSE            reduce using rule 78 (statement -> IF expression THEN statements ENDCOND .)


state 136

    (79) statement -> IF expression THEN statements else_elif_body . ENDCOND

    ENDCOND         shift and go to state 144


state 137

    (76) statements -> statements SEMICOLON . expression
    (77) statements -> statements SEMICOLON . arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 70
    arithmetic_expression          shift and go to state 71
    atomar                         shift and go to state 12

state 138

    (80) else_elif_body -> ELIF . IF expression THEN statements else_elif_body

    IF              shift and go to state 145


state 139

    (81) else_elif_body -> ELSE . statements
    (72) statements -> . expression
    (73) statements -> . arithmetic_expression
    (74) statements -> . statement
    (75) statements -> . sequence
    (76) statements -> . statements SEMICOLON expression
    (77) statements -> . statements SEMICOLON arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (78) statement -> . IF expression THEN statements ENDCOND
    (79) statement -> . IF expression THEN statements else_elif_body ENDCOND
    (82) statement -> . WHILE expression THEN statements
    (83) statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (70) sequence -> . BEGIN statements END
    (71) sequence -> . BEGIN statements SEMICOLON END
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    LOOP            shift and go to state 16
    BEGIN           shift and go to state 2
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    statements                     shift and go to state 146
    expression                     shift and go to state 4
    arithmetic_expression          shift and go to state 5
    statement                      shift and go to state 6
    sequence                       shift and go to state 7
    atomar                         shift and go to state 12

state 140

    (83) statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN . statements ENDCOND
    (72) statements -> . expression
    (73) statements -> . arithmetic_expression
    (74) statements -> . statement
    (75) statements -> . sequence
    (76) statements -> . statements SEMICOLON expression
    (77) statements -> . statements SEMICOLON arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (78) statement -> . IF expression THEN statements ENDCOND
    (79) statement -> . IF expression THEN statements else_elif_body ENDCOND
    (82) statement -> . WHILE expression THEN statements
    (83) statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (70) sequence -> . BEGIN statements END
    (71) sequence -> . BEGIN statements SEMICOLON END
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    LOOP            shift and go to state 16
    BEGIN           shift and go to state 2
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    statements                     shift and go to state 147
    expression                     shift and go to state 4
    arithmetic_expression          shift and go to state 5
    statement                      shift and go to state 6
    sequence                       shift and go to state 7
    atomar                         shift and go to state 12

state 141

    (84) interval -> [ expression . , expression ]
    (86) interval -> [ expression . , expression [

    ,               shift and go to state 148


state 142

    (85) interval -> ] expression . , expression ]
    (87) interval -> ] expression . , expression [

    ,               shift and go to state 149


state 143

    (24) comparison_chain -> comparison_op arithmetic_expression comparison_chain .

    END             reduce using rule 24 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    SEMICOLON       reduce using rule 24 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    THEN            reduce using rule 24 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ENDCOND         reduce using rule 24 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ELIF            reduce using rule 24 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ELSE            reduce using rule 24 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ,               reduce using rule 24 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ]               reduce using rule 24 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    [               reduce using rule 24 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)


state 144

    (79) statement -> IF expression THEN statements else_elif_body ENDCOND .

    END             reduce using rule 79 (statement -> IF expression THEN statements else_elif_body ENDCOND .)
    SEMICOLON       reduce using rule 79 (statement -> IF expression THEN statements else_elif_body ENDCOND .)
    ENDCOND         reduce using rule 79 (statement -> IF expression THEN statements else_elif_body ENDCOND .)
    ELIF            reduce using rule 79 (statement -> IF expression THEN statements else_elif_body ENDCOND .)
    ELSE            reduce using rule 79 (statement -> IF expression THEN statements else_elif_body ENDCOND .)


state 145

    (80) else_elif_body -> ELIF IF . expression THEN statements else_elif_body
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 150
    arithmetic_expression          shift and go to state 66
    atomar                         shift and go to state 12

state 146

    (81) else_elif_body -> ELSE statements .
    (76) statements -> statements . SEMICOLON expression
    (77) statements -> statements . SEMICOLON arithmetic_expression

    ENDCOND         reduce using rule 81 (else_elif_body -> ELSE statements .)
    SEMICOLON       shift and go to state 137


state 147

    (83) statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements . ENDCOND
    (76) statements -> statements . SEMICOLON expression
    (77) statements -> statements . SEMICOLON arithmetic_expression

    ENDCOND         shift and go to state 151
    SEMICOLON       shift and go to state 137


state 148

    (84) interval -> [ expression , . expression ]
    (86) interval -> [ expression , . expression [
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 152
    arithmetic_expression          shift and go to state 66
    atomar                         shift and go to state 12

state 149

    (85) interval -> ] expression , . expression ]
    (87) interval -> ] expression , . expression [
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 153
    arithmetic_expression          shift and go to state 66
    atomar                         shift and go to state 12

state 150

    (80) else_elif_body -> ELIF IF expression . THEN statements else_elif_body

    THEN            shift and go to state 154


state 151

    (83) statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .

    END             reduce using rule 83 (statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .)
    SEMICOLON       reduce using rule 83 (statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .)
    ENDCOND         reduce using rule 83 (statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .)
    ELIF            reduce using rule 83 (statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .)
    ELSE            reduce using rule 83 (statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .)


state 152

    (84) interval -> [ expression , expression . ]
    (86) interval -> [ expression , expression . [

    ]               shift and go to state 156
    [               shift and go to state 155


state 153

    (85) interval -> ] expression , expression . ]
    (87) interval -> ] expression , expression . [

    ]               shift and go to state 157
    [               shift and go to state 158


state 154

    (80) else_elif_body -> ELIF IF expression THEN . statements else_elif_body
    (72) statements -> . expression
    (73) statements -> . arithmetic_expression
    (74) statements -> . statement
    (75) statements -> . sequence
    (76) statements -> . statements SEMICOLON expression
    (77) statements -> . statements SEMICOLON arithmetic_expression
    (21) expression -> . arithmetic_expression IMAG
    (22) expression -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (23) expression -> . arithmetic_expression comparison_op arithmetic_expression
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER ASSIGN arithmetic_expression
    (34) expression -> . IDENTIFIER PLUSASSIGN expression
    (35) expression -> . IDENTIFIER MINUSASSIGN expression
    (36) expression -> . IDENTIFIER TIMESASSIGN expression
    (37) expression -> . IDENTIFIER POWERASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (41) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (42) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (47) expression -> . IDENTIFIER ANDASSIGN expression
    (48) expression -> . IDENTIFIER ORASSIGN expression
    (49) expression -> . IDENTIFIER XORASSIGN expression
    (50) expression -> . IDENTIFIER EXPASSIGN expression
    (51) expression -> . IDENTIFIER MODASSIGN expression
    (52) expression -> . IDENTIFIER PLUSASSIGN arithmetic_expression
    (53) expression -> . IDENTIFIER MINUSASSIGN arithmetic_expression
    (54) expression -> . IDENTIFIER TIMESASSIGN arithmetic_expression
    (55) expression -> . IDENTIFIER POWERASSIGN arithmetic_expression
    (56) expression -> . IDENTIFIER DIVIDEASSIGN arithmetic_expression
    (57) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN arithmetic_expression
    (58) expression -> . IDENTIFIER DIVIDE_CEILASSIGN arithmetic_expression
    (59) expression -> . IDENTIFIER GREATER_THANASSIGN arithmetic_expression
    (60) expression -> . IDENTIFIER SMALLER_THANASSIGN arithmetic_expression
    (61) expression -> . IDENTIFIER GREATER_EQUALSASSIGN arithmetic_expression
    (62) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN arithmetic_expression
    (63) expression -> . IDENTIFIER EQUALSASSIGN arithmetic_expression
    (64) expression -> . IDENTIFIER UNEQUALSASSIGN arithmetic_expression
    (65) expression -> . IDENTIFIER ANDASSIGN arithmetic_expression
    (66) expression -> . IDENTIFIER ORASSIGN arithmetic_expression
    (67) expression -> . IDENTIFIER XORASSIGN arithmetic_expression
    (68) expression -> . IDENTIFIER EXPASSIGN arithmetic_expression
    (69) expression -> . IDENTIFIER MODASSIGN arithmetic_expression
    (4) arithmetic_expression -> . LPAREN arithmetic_expression RPAREN
    (5) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (6) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (17) arithmetic_expression -> . atomar
    (18) arithmetic_expression -> . NOT arithmetic_expression
    (19) arithmetic_expression -> . MINUS arithmetic_expression
    (20) arithmetic_expression -> . PLUS arithmetic_expression
    (78) statement -> . IF expression THEN statements ENDCOND
    (79) statement -> . IF expression THEN statements else_elif_body ENDCOND
    (82) statement -> . WHILE expression THEN statements
    (83) statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (70) sequence -> . BEGIN statements END
    (71) sequence -> . BEGIN statements SEMICOLON END
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8
    LPAREN          shift and go to state 9
    NOT             shift and go to state 13
    MINUS           shift and go to state 11
    PLUS            shift and go to state 10
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    LOOP            shift and go to state 16
    BEGIN           shift and go to state 2
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18

    expression                     shift and go to state 4
    statements                     shift and go to state 159
    arithmetic_expression          shift and go to state 5
    statement                      shift and go to state 6
    sequence                       shift and go to state 7
    atomar                         shift and go to state 12

state 155

    (86) interval -> [ expression , expression [ .

    LOOPTHEN        reduce using rule 86 (interval -> [ expression , expression [ .)


state 156

    (84) interval -> [ expression , expression ] .

    LOOPTHEN        reduce using rule 84 (interval -> [ expression , expression ] .)


state 157

    (85) interval -> ] expression , expression ] .

    LOOPTHEN        reduce using rule 85 (interval -> ] expression , expression ] .)


state 158

    (87) interval -> ] expression , expression [ .

    LOOPTHEN        reduce using rule 87 (interval -> ] expression , expression [ .)


state 159

    (80) else_elif_body -> ELIF IF expression THEN statements . else_elif_body
    (76) statements -> statements . SEMICOLON expression
    (77) statements -> statements . SEMICOLON arithmetic_expression
    (80) else_elif_body -> . ELIF IF expression THEN statements else_elif_body
    (81) else_elif_body -> . ELSE statements

    SEMICOLON       shift and go to state 137
    ELIF            shift and go to state 138
    ELSE            shift and go to state 139

    else_elif_body                 shift and go to state 160

state 160

    (80) else_elif_body -> ELIF IF expression THEN statements else_elif_body .

    ENDCOND         reduce using rule 80 (else_elif_body -> ELIF IF expression THEN statements else_elif_body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 130 resolved as shift
