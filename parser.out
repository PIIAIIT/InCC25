Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> sequence
Rule 1     atomar -> NUMBER
Rule 2     atomar -> FLOAT
Rule 3     atomar -> IDENTIFIER
Rule 4     arithmetic_expression -> LPAREN expression RPAREN
Rule 5     expression -> arithmetic_expression
Rule 6     expression -> comparison
Rule 7     expression -> sequence
Rule 8     expression -> assignment
Rule 9     arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression
Rule 10    arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression
Rule 11    arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression
Rule 12    arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression
Rule 13    arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression
Rule 14    arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression
Rule 15    arithmetic_expression -> arithmetic_expression MOD arithmetic_expression
Rule 16    arithmetic_expression -> arithmetic_expression EXP arithmetic_expression
Rule 17    arithmetic_expression -> arithmetic_expression AND arithmetic_expression
Rule 18    arithmetic_expression -> arithmetic_expression OR arithmetic_expression
Rule 19    arithmetic_expression -> arithmetic_expression XOR arithmetic_expression
Rule 20    arithmetic_expression -> arithmetic_expression POWER arithmetic_expression
Rule 21    arithmetic_expression -> NOT arithmetic_expression
Rule 22    arithmetic_expression -> MINUS arithmetic_expression
Rule 23    arithmetic_expression -> PLUS arithmetic_expression
Rule 24    arithmetic_expression -> arithmetic_expression IMAG
Rule 25    arithmetic_expression -> atomar
Rule 26    comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain
Rule 27    comparison -> arithmetic_expression comparison_op arithmetic_expression
Rule 28    comparison_chain -> comparison_op arithmetic_expression comparison_chain
Rule 29    comparison_chain -> comparison_op arithmetic_expression
Rule 30    comparison_op -> GREATER_THAN
Rule 31    comparison_op -> SMALLER_THAN
Rule 32    comparison_op -> UNEQUALS
Rule 33    comparison_op -> EQUALS
Rule 34    comparison_op -> SMALLER_EQUALS
Rule 35    comparison_op -> GREATER_EQUALS
Rule 36    assignment -> IDENTIFIER ASSIGN expression
Rule 37    expression -> IDENTIFIER PLUS_ASSIGN expression
Rule 38    expression -> IDENTIFIER MINUS_ASSIGN expression
Rule 39    expression -> IDENTIFIER TIMES_ASSIGN expression
Rule 40    expression -> IDENTIFIER POWER_ASSIGN expression
Rule 41    expression -> IDENTIFIER DIVIDE_ASSIGN expression
Rule 42    expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
Rule 43    expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression
Rule 44    expression -> IDENTIFIER GREATER_THAN_ASSIGN expression
Rule 45    expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression
Rule 46    expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression
Rule 47    expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression
Rule 48    expression -> IDENTIFIER EQUALS_ASSIGN expression
Rule 49    expression -> IDENTIFIER UNEQUALS_ASSIGN expression
Rule 50    expression -> IDENTIFIER AND_ASSIGN expression
Rule 51    expression -> IDENTIFIER OR_ASSIGN expression
Rule 52    expression -> IDENTIFIER XOR_ASSIGN expression
Rule 53    expression -> IDENTIFIER EXP_ASSIGN expression
Rule 54    expression -> IDENTIFIER MOD_ASSIGN expression
Rule 55    sequence -> BEGIN statements END
Rule 56    sequence -> BEGIN statements SEMICOLON END
Rule 57    statement -> expression
Rule 58    statement -> if_statement
Rule 59    statement -> while_statement
Rule 60    statement -> loop_statement
Rule 61    statements -> statements SEMICOLON statement
Rule 62    statements -> statement
Rule 63    if_statement -> IF expression THEN statements ENDCOND
Rule 64    if_statement -> IF expression THEN statements else_elif_body ENDCOND
Rule 65    else_elif_body -> ELIF IF expression THEN statements else_elif_body
Rule 66    else_elif_body -> ELSE statements
Rule 67    while_statement -> WHILE expression THEN statements ENDCOND
Rule 68    loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND
Rule 69    interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS
Rule 70    interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS
Rule 71    interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS
Rule 72    interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS
Rule 73    lambda -> LAMBDA parameter LAMBDA_ARROW expression
Rule 74    expression -> lambda
Rule 75    parameter -> LPAREN parameter_pos RPAREN
Rule 76    parameter -> IDENTIFIER
Rule 77    parameter -> empty
Rule 78    parameter_pos -> parameter_pos_list
Rule 79    parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list
Rule 80    parameter_pos_list -> IDENTIFIER
Rule 81    parameter_pos_list -> parameter_keywords
Rule 82    parameter_keywords -> parameter_kw_list
Rule 83    parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list
Rule 84    parameter_kw_list -> IDENTIFIER COLON expression
Rule 85    parameter_kw_list -> parameter_infty
Rule 86    parameter_infty -> IDENTIFIER DOTS
Rule 87    parameter_expr -> parameter_pos_expr
Rule 88    parameter_expr -> empty
Rule 89    parameter_pos_expr -> expression COMMA parameter_pos_expr
Rule 90    parameter_pos_expr -> expression
Rule 91    parameter_pos_expr -> parameter_keywords_expr
Rule 92    parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr
Rule 93    parameter_keywords_expr -> expression COLON expression
Rule 94    empty -> <empty>
Rule 95    expression -> expression LPAREN parameter_expr RPAREN
Rule 96    expression -> LET assignment IN expression ENDCOND
Rule 97    expression -> ECHO LPAREN expression RPAREN
Rule 98    expression -> LENGTH LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 17
AND_ASSIGN           : 50
ASSIGN               : 36
BEGIN                : 55 56
CLOSED_BRACKETS      : 69 70 70 72
COLON                : 83 84 92 93
COMMA                : 69 70 71 72 79 83 89 92
DIVIDE               : 12
DIVIDE_ASSIGN        : 41
DIVIDE_CEIL          : 13
DIVIDE_CEIL_ASSIGN   : 43
DIVIDE_FLOOR         : 14
DIVIDE_FLOOR_ASSIGN  : 42
DOTS                 : 86
ECHO                 : 97
ELIF                 : 65
ELSE                 : 66
END                  : 55 56
ENDCOND              : 63 64 67 68 96
EQUALS               : 33
EQUALS_ASSIGN        : 48
EXP                  : 16
EXP_ASSIGN           : 53
FLOAT                : 2
GREATER_EQUALS       : 35
GREATER_EQUALS_ASSIGN : 46
GREATER_THAN         : 30
GREATER_THAN_ASSIGN  : 44
IDENTIFIER           : 3 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 68 76 79 80 83 84 86
IF                   : 63 64 65
IMAG                 : 24
IN                   : 68 96
LAMBDA               : 73
LAMBDA_ARROW         : 73
LENGTH               : 98
LET                  : 96
LOOP                 : 68
LOOPTHEN             : 68
LPAREN               : 4 75 95 97 98
MINUS                : 10 22
MINUS_ASSIGN         : 38
MOD                  : 15
MOD_ASSIGN           : 54
NOT                  : 21
NUMBER               : 1
OPEN_BRACKETS        : 69 71 71 72
OR                   : 18
OR_ASSIGN            : 51
PLUS                 : 9 23
PLUS_ASSIGN          : 37
POWER                : 20
POWER_ASSIGN         : 40
RPAREN               : 4 75 95 97 98
SEMICOLON            : 56 61
SMALLER_EQUALS       : 34
SMALLER_EQUALS_ASSIGN : 47
SMALLER_THAN         : 31
SMALLER_THAN_ASSIGN  : 45
THEN                 : 63 64 65 67
TIMES                : 11
TIMES_ASSIGN         : 39
UNEQUALS             : 32
UNEQUALS_ASSIGN      : 49
WHILE                : 67
XOR                  : 19
XOR_ASSIGN           : 52
error                : 

Nonterminals, with rules where they appear

arithmetic_expression : 5 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 22 23 24 26 26 27 27 28 29
assignment           : 8 96
atomar               : 25
comparison           : 6
comparison_chain     : 26 28
comparison_op        : 26 27 28 29
else_elif_body       : 64 65
empty                : 77 88
expression           : 4 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 57 63 64 65 67 69 69 70 70 71 71 72 72 73 83 84 89 90 92 92 93 93 95 96 97 98
if_statement         : 58
interval             : 68
lambda               : 74
loop_statement       : 60
parameter            : 73
parameter_expr       : 95
parameter_infty      : 85
parameter_keywords   : 81
parameter_keywords_expr : 91 92
parameter_kw_list    : 82 83
parameter_pos        : 75
parameter_pos_expr   : 87 89
parameter_pos_list   : 78 79
sequence             : 7 0
statement            : 61 62
statements           : 55 56 61 63 64 65 66 67 68
while_statement      : 59

Parsing method: LALR

state 0

    (0) S' -> . sequence
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END

    BEGIN           shift and go to state 2

    sequence                       shift and go to state 1

state 1

    (0) S' -> sequence .



state 2

    (55) sequence -> BEGIN . statements END
    (56) sequence -> BEGIN . statements SEMICOLON END
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    LOOP            shift and go to state 21
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    statements                     shift and go to state 3
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 3

    (55) sequence -> BEGIN statements . END
    (56) sequence -> BEGIN statements . SEMICOLON END
    (61) statements -> statements . SEMICOLON statement

    END             shift and go to state 29
    SEMICOLON       shift and go to state 30


state 4

    (62) statements -> statement .

    END             reduce using rule 62 (statements -> statement .)
    SEMICOLON       reduce using rule 62 (statements -> statement .)
    ENDCOND         reduce using rule 62 (statements -> statement .)
    ELIF            reduce using rule 62 (statements -> statement .)
    ELSE            reduce using rule 62 (statements -> statement .)


state 5

    (57) statement -> expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    END             reduce using rule 57 (statement -> expression .)
    SEMICOLON       reduce using rule 57 (statement -> expression .)
    ENDCOND         reduce using rule 57 (statement -> expression .)
    ELIF            reduce using rule 57 (statement -> expression .)
    ELSE            reduce using rule 57 (statement -> expression .)
    LPAREN          shift and go to state 31


state 6

    (58) statement -> if_statement .

    END             reduce using rule 58 (statement -> if_statement .)
    SEMICOLON       reduce using rule 58 (statement -> if_statement .)
    ENDCOND         reduce using rule 58 (statement -> if_statement .)
    ELIF            reduce using rule 58 (statement -> if_statement .)
    ELSE            reduce using rule 58 (statement -> if_statement .)


state 7

    (59) statement -> while_statement .

    END             reduce using rule 59 (statement -> while_statement .)
    SEMICOLON       reduce using rule 59 (statement -> while_statement .)
    ENDCOND         reduce using rule 59 (statement -> while_statement .)
    ELIF            reduce using rule 59 (statement -> while_statement .)
    ELSE            reduce using rule 59 (statement -> while_statement .)


state 8

    (60) statement -> loop_statement .

    END             reduce using rule 60 (statement -> loop_statement .)
    SEMICOLON       reduce using rule 60 (statement -> loop_statement .)
    ENDCOND         reduce using rule 60 (statement -> loop_statement .)
    ELIF            reduce using rule 60 (statement -> loop_statement .)
    ELSE            reduce using rule 60 (statement -> loop_statement .)


state 9

    (5) expression -> arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG
    (26) comparison -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (27) comparison -> arithmetic_expression . comparison_op arithmetic_expression
    (30) comparison_op -> . GREATER_THAN
    (31) comparison_op -> . SMALLER_THAN
    (32) comparison_op -> . UNEQUALS
    (33) comparison_op -> . EQUALS
    (34) comparison_op -> . SMALLER_EQUALS
    (35) comparison_op -> . GREATER_EQUALS

    LPAREN          reduce using rule 5 (expression -> arithmetic_expression .)
    END             reduce using rule 5 (expression -> arithmetic_expression .)
    SEMICOLON       reduce using rule 5 (expression -> arithmetic_expression .)
    RPAREN          reduce using rule 5 (expression -> arithmetic_expression .)
    THEN            reduce using rule 5 (expression -> arithmetic_expression .)
    COMMA           reduce using rule 5 (expression -> arithmetic_expression .)
    COLON           reduce using rule 5 (expression -> arithmetic_expression .)
    IN              reduce using rule 5 (expression -> arithmetic_expression .)
    ENDCOND         reduce using rule 5 (expression -> arithmetic_expression .)
    ELIF            reduce using rule 5 (expression -> arithmetic_expression .)
    ELSE            reduce using rule 5 (expression -> arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 5 (expression -> arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 5 (expression -> arithmetic_expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    DIVIDE_CEIL     shift and go to state 36
    DIVIDE_FLOOR    shift and go to state 37
    MOD             shift and go to state 38
    EXP             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    POWER           shift and go to state 43
    IMAG            shift and go to state 44
    GREATER_THAN    shift and go to state 46
    SMALLER_THAN    shift and go to state 47
    UNEQUALS        shift and go to state 48
    EQUALS          shift and go to state 49
    SMALLER_EQUALS  shift and go to state 50
    GREATER_EQUALS  shift and go to state 51

    comparison_op                  shift and go to state 45

state 10

    (6) expression -> comparison .

    LPAREN          reduce using rule 6 (expression -> comparison .)
    END             reduce using rule 6 (expression -> comparison .)
    SEMICOLON       reduce using rule 6 (expression -> comparison .)
    RPAREN          reduce using rule 6 (expression -> comparison .)
    THEN            reduce using rule 6 (expression -> comparison .)
    COMMA           reduce using rule 6 (expression -> comparison .)
    COLON           reduce using rule 6 (expression -> comparison .)
    IN              reduce using rule 6 (expression -> comparison .)
    ENDCOND         reduce using rule 6 (expression -> comparison .)
    ELIF            reduce using rule 6 (expression -> comparison .)
    ELSE            reduce using rule 6 (expression -> comparison .)
    CLOSED_BRACKETS reduce using rule 6 (expression -> comparison .)
    OPEN_BRACKETS   reduce using rule 6 (expression -> comparison .)


state 11

    (7) expression -> sequence .

    LPAREN          reduce using rule 7 (expression -> sequence .)
    END             reduce using rule 7 (expression -> sequence .)
    SEMICOLON       reduce using rule 7 (expression -> sequence .)
    RPAREN          reduce using rule 7 (expression -> sequence .)
    THEN            reduce using rule 7 (expression -> sequence .)
    COMMA           reduce using rule 7 (expression -> sequence .)
    COLON           reduce using rule 7 (expression -> sequence .)
    IN              reduce using rule 7 (expression -> sequence .)
    ENDCOND         reduce using rule 7 (expression -> sequence .)
    ELIF            reduce using rule 7 (expression -> sequence .)
    ELSE            reduce using rule 7 (expression -> sequence .)
    CLOSED_BRACKETS reduce using rule 7 (expression -> sequence .)
    OPEN_BRACKETS   reduce using rule 7 (expression -> sequence .)


state 12

    (8) expression -> assignment .

    LPAREN          reduce using rule 8 (expression -> assignment .)
    END             reduce using rule 8 (expression -> assignment .)
    SEMICOLON       reduce using rule 8 (expression -> assignment .)
    RPAREN          reduce using rule 8 (expression -> assignment .)
    THEN            reduce using rule 8 (expression -> assignment .)
    COMMA           reduce using rule 8 (expression -> assignment .)
    COLON           reduce using rule 8 (expression -> assignment .)
    IN              reduce using rule 8 (expression -> assignment .)
    ENDCOND         reduce using rule 8 (expression -> assignment .)
    ELIF            reduce using rule 8 (expression -> assignment .)
    ELSE            reduce using rule 8 (expression -> assignment .)
    CLOSED_BRACKETS reduce using rule 8 (expression -> assignment .)
    OPEN_BRACKETS   reduce using rule 8 (expression -> assignment .)


state 13

    (37) expression -> IDENTIFIER . PLUS_ASSIGN expression
    (38) expression -> IDENTIFIER . MINUS_ASSIGN expression
    (39) expression -> IDENTIFIER . TIMES_ASSIGN expression
    (40) expression -> IDENTIFIER . POWER_ASSIGN expression
    (41) expression -> IDENTIFIER . DIVIDE_ASSIGN expression
    (42) expression -> IDENTIFIER . DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> IDENTIFIER . DIVIDE_CEIL_ASSIGN expression
    (44) expression -> IDENTIFIER . GREATER_THAN_ASSIGN expression
    (45) expression -> IDENTIFIER . SMALLER_THAN_ASSIGN expression
    (46) expression -> IDENTIFIER . GREATER_EQUALS_ASSIGN expression
    (47) expression -> IDENTIFIER . SMALLER_EQUALS_ASSIGN expression
    (48) expression -> IDENTIFIER . EQUALS_ASSIGN expression
    (49) expression -> IDENTIFIER . UNEQUALS_ASSIGN expression
    (50) expression -> IDENTIFIER . AND_ASSIGN expression
    (51) expression -> IDENTIFIER . OR_ASSIGN expression
    (52) expression -> IDENTIFIER . XOR_ASSIGN expression
    (53) expression -> IDENTIFIER . EXP_ASSIGN expression
    (54) expression -> IDENTIFIER . MOD_ASSIGN expression
    (36) assignment -> IDENTIFIER . ASSIGN expression
    (3) atomar -> IDENTIFIER .

    PLUS_ASSIGN     shift and go to state 52
    MINUS_ASSIGN    shift and go to state 53
    TIMES_ASSIGN    shift and go to state 54
    POWER_ASSIGN    shift and go to state 55
    DIVIDE_ASSIGN   shift and go to state 56
    DIVIDE_FLOOR_ASSIGN shift and go to state 57
    DIVIDE_CEIL_ASSIGN shift and go to state 58
    GREATER_THAN_ASSIGN shift and go to state 59
    SMALLER_THAN_ASSIGN shift and go to state 60
    GREATER_EQUALS_ASSIGN shift and go to state 61
    SMALLER_EQUALS_ASSIGN shift and go to state 62
    EQUALS_ASSIGN   shift and go to state 63
    UNEQUALS_ASSIGN shift and go to state 64
    AND_ASSIGN      shift and go to state 65
    OR_ASSIGN       shift and go to state 66
    XOR_ASSIGN      shift and go to state 67
    EXP_ASSIGN      shift and go to state 68
    MOD_ASSIGN      shift and go to state 69
    ASSIGN          shift and go to state 70
    PLUS            reduce using rule 3 (atomar -> IDENTIFIER .)
    MINUS           reduce using rule 3 (atomar -> IDENTIFIER .)
    TIMES           reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE          reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_CEIL     reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_FLOOR    reduce using rule 3 (atomar -> IDENTIFIER .)
    MOD             reduce using rule 3 (atomar -> IDENTIFIER .)
    EXP             reduce using rule 3 (atomar -> IDENTIFIER .)
    AND             reduce using rule 3 (atomar -> IDENTIFIER .)
    OR              reduce using rule 3 (atomar -> IDENTIFIER .)
    XOR             reduce using rule 3 (atomar -> IDENTIFIER .)
    POWER           reduce using rule 3 (atomar -> IDENTIFIER .)
    IMAG            reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    UNEQUALS        reduce using rule 3 (atomar -> IDENTIFIER .)
    EQUALS          reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    LPAREN          reduce using rule 3 (atomar -> IDENTIFIER .)
    END             reduce using rule 3 (atomar -> IDENTIFIER .)
    SEMICOLON       reduce using rule 3 (atomar -> IDENTIFIER .)
    RPAREN          reduce using rule 3 (atomar -> IDENTIFIER .)
    THEN            reduce using rule 3 (atomar -> IDENTIFIER .)
    COMMA           reduce using rule 3 (atomar -> IDENTIFIER .)
    COLON           reduce using rule 3 (atomar -> IDENTIFIER .)
    IN              reduce using rule 3 (atomar -> IDENTIFIER .)
    ENDCOND         reduce using rule 3 (atomar -> IDENTIFIER .)
    ELIF            reduce using rule 3 (atomar -> IDENTIFIER .)
    ELSE            reduce using rule 3 (atomar -> IDENTIFIER .)
    CLOSED_BRACKETS reduce using rule 3 (atomar -> IDENTIFIER .)
    OPEN_BRACKETS   reduce using rule 3 (atomar -> IDENTIFIER .)


state 14

    (74) expression -> lambda .

    LPAREN          reduce using rule 74 (expression -> lambda .)
    END             reduce using rule 74 (expression -> lambda .)
    SEMICOLON       reduce using rule 74 (expression -> lambda .)
    RPAREN          reduce using rule 74 (expression -> lambda .)
    THEN            reduce using rule 74 (expression -> lambda .)
    COMMA           reduce using rule 74 (expression -> lambda .)
    COLON           reduce using rule 74 (expression -> lambda .)
    IN              reduce using rule 74 (expression -> lambda .)
    ENDCOND         reduce using rule 74 (expression -> lambda .)
    ELIF            reduce using rule 74 (expression -> lambda .)
    ELSE            reduce using rule 74 (expression -> lambda .)
    CLOSED_BRACKETS reduce using rule 74 (expression -> lambda .)
    OPEN_BRACKETS   reduce using rule 74 (expression -> lambda .)


state 15

    (4) arithmetic_expression -> LPAREN . expression RPAREN
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 71
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 16

    (96) expression -> LET . assignment IN expression ENDCOND
    (36) assignment -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 73

    assignment                     shift and go to state 72

state 17

    (97) expression -> ECHO . LPAREN expression RPAREN

    LPAREN          shift and go to state 74


state 18

    (98) expression -> LENGTH . LPAREN expression RPAREN

    LPAREN          shift and go to state 75


state 19

    (63) if_statement -> IF . expression THEN statements ENDCOND
    (64) if_statement -> IF . expression THEN statements else_elif_body ENDCOND
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 76
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 20

    (67) while_statement -> WHILE . expression THEN statements ENDCOND
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 77
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 21

    (68) loop_statement -> LOOP . IDENTIFIER IN interval LOOPTHEN statements ENDCOND

    IDENTIFIER      shift and go to state 78


state 22

    (23) arithmetic_expression -> PLUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 79
    atomar                         shift and go to state 25

state 23

    (22) arithmetic_expression -> MINUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 81
    atomar                         shift and go to state 25

state 24

    (21) arithmetic_expression -> NOT . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 82
    atomar                         shift and go to state 25

state 25

    (25) arithmetic_expression -> atomar .

    PLUS            reduce using rule 25 (arithmetic_expression -> atomar .)
    MINUS           reduce using rule 25 (arithmetic_expression -> atomar .)
    TIMES           reduce using rule 25 (arithmetic_expression -> atomar .)
    DIVIDE          reduce using rule 25 (arithmetic_expression -> atomar .)
    DIVIDE_CEIL     reduce using rule 25 (arithmetic_expression -> atomar .)
    DIVIDE_FLOOR    reduce using rule 25 (arithmetic_expression -> atomar .)
    MOD             reduce using rule 25 (arithmetic_expression -> atomar .)
    EXP             reduce using rule 25 (arithmetic_expression -> atomar .)
    AND             reduce using rule 25 (arithmetic_expression -> atomar .)
    OR              reduce using rule 25 (arithmetic_expression -> atomar .)
    XOR             reduce using rule 25 (arithmetic_expression -> atomar .)
    POWER           reduce using rule 25 (arithmetic_expression -> atomar .)
    IMAG            reduce using rule 25 (arithmetic_expression -> atomar .)
    GREATER_THAN    reduce using rule 25 (arithmetic_expression -> atomar .)
    SMALLER_THAN    reduce using rule 25 (arithmetic_expression -> atomar .)
    UNEQUALS        reduce using rule 25 (arithmetic_expression -> atomar .)
    EQUALS          reduce using rule 25 (arithmetic_expression -> atomar .)
    SMALLER_EQUALS  reduce using rule 25 (arithmetic_expression -> atomar .)
    GREATER_EQUALS  reduce using rule 25 (arithmetic_expression -> atomar .)
    LPAREN          reduce using rule 25 (arithmetic_expression -> atomar .)
    END             reduce using rule 25 (arithmetic_expression -> atomar .)
    SEMICOLON       reduce using rule 25 (arithmetic_expression -> atomar .)
    RPAREN          reduce using rule 25 (arithmetic_expression -> atomar .)
    THEN            reduce using rule 25 (arithmetic_expression -> atomar .)
    COMMA           reduce using rule 25 (arithmetic_expression -> atomar .)
    COLON           reduce using rule 25 (arithmetic_expression -> atomar .)
    IN              reduce using rule 25 (arithmetic_expression -> atomar .)
    ENDCOND         reduce using rule 25 (arithmetic_expression -> atomar .)
    ELIF            reduce using rule 25 (arithmetic_expression -> atomar .)
    ELSE            reduce using rule 25 (arithmetic_expression -> atomar .)
    CLOSED_BRACKETS reduce using rule 25 (arithmetic_expression -> atomar .)
    OPEN_BRACKETS   reduce using rule 25 (arithmetic_expression -> atomar .)


state 26

    (73) lambda -> LAMBDA . parameter LAMBDA_ARROW expression
    (75) parameter -> . LPAREN parameter_pos RPAREN
    (76) parameter -> . IDENTIFIER
    (77) parameter -> . empty
    (94) empty -> .

    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 85
    LAMBDA_ARROW    reduce using rule 94 (empty -> .)

    parameter                      shift and go to state 83
    empty                          shift and go to state 86

state 27

    (1) atomar -> NUMBER .

    PLUS            reduce using rule 1 (atomar -> NUMBER .)
    MINUS           reduce using rule 1 (atomar -> NUMBER .)
    TIMES           reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE          reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE_CEIL     reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE_FLOOR    reduce using rule 1 (atomar -> NUMBER .)
    MOD             reduce using rule 1 (atomar -> NUMBER .)
    EXP             reduce using rule 1 (atomar -> NUMBER .)
    AND             reduce using rule 1 (atomar -> NUMBER .)
    OR              reduce using rule 1 (atomar -> NUMBER .)
    XOR             reduce using rule 1 (atomar -> NUMBER .)
    POWER           reduce using rule 1 (atomar -> NUMBER .)
    IMAG            reduce using rule 1 (atomar -> NUMBER .)
    GREATER_THAN    reduce using rule 1 (atomar -> NUMBER .)
    SMALLER_THAN    reduce using rule 1 (atomar -> NUMBER .)
    UNEQUALS        reduce using rule 1 (atomar -> NUMBER .)
    EQUALS          reduce using rule 1 (atomar -> NUMBER .)
    SMALLER_EQUALS  reduce using rule 1 (atomar -> NUMBER .)
    GREATER_EQUALS  reduce using rule 1 (atomar -> NUMBER .)
    LPAREN          reduce using rule 1 (atomar -> NUMBER .)
    END             reduce using rule 1 (atomar -> NUMBER .)
    SEMICOLON       reduce using rule 1 (atomar -> NUMBER .)
    RPAREN          reduce using rule 1 (atomar -> NUMBER .)
    THEN            reduce using rule 1 (atomar -> NUMBER .)
    COMMA           reduce using rule 1 (atomar -> NUMBER .)
    COLON           reduce using rule 1 (atomar -> NUMBER .)
    IN              reduce using rule 1 (atomar -> NUMBER .)
    ENDCOND         reduce using rule 1 (atomar -> NUMBER .)
    ELIF            reduce using rule 1 (atomar -> NUMBER .)
    ELSE            reduce using rule 1 (atomar -> NUMBER .)
    CLOSED_BRACKETS reduce using rule 1 (atomar -> NUMBER .)
    OPEN_BRACKETS   reduce using rule 1 (atomar -> NUMBER .)


state 28

    (2) atomar -> FLOAT .

    PLUS            reduce using rule 2 (atomar -> FLOAT .)
    MINUS           reduce using rule 2 (atomar -> FLOAT .)
    TIMES           reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE          reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE_CEIL     reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE_FLOOR    reduce using rule 2 (atomar -> FLOAT .)
    MOD             reduce using rule 2 (atomar -> FLOAT .)
    EXP             reduce using rule 2 (atomar -> FLOAT .)
    AND             reduce using rule 2 (atomar -> FLOAT .)
    OR              reduce using rule 2 (atomar -> FLOAT .)
    XOR             reduce using rule 2 (atomar -> FLOAT .)
    POWER           reduce using rule 2 (atomar -> FLOAT .)
    IMAG            reduce using rule 2 (atomar -> FLOAT .)
    GREATER_THAN    reduce using rule 2 (atomar -> FLOAT .)
    SMALLER_THAN    reduce using rule 2 (atomar -> FLOAT .)
    UNEQUALS        reduce using rule 2 (atomar -> FLOAT .)
    EQUALS          reduce using rule 2 (atomar -> FLOAT .)
    SMALLER_EQUALS  reduce using rule 2 (atomar -> FLOAT .)
    GREATER_EQUALS  reduce using rule 2 (atomar -> FLOAT .)
    LPAREN          reduce using rule 2 (atomar -> FLOAT .)
    END             reduce using rule 2 (atomar -> FLOAT .)
    SEMICOLON       reduce using rule 2 (atomar -> FLOAT .)
    RPAREN          reduce using rule 2 (atomar -> FLOAT .)
    THEN            reduce using rule 2 (atomar -> FLOAT .)
    COMMA           reduce using rule 2 (atomar -> FLOAT .)
    COLON           reduce using rule 2 (atomar -> FLOAT .)
    IN              reduce using rule 2 (atomar -> FLOAT .)
    ENDCOND         reduce using rule 2 (atomar -> FLOAT .)
    ELIF            reduce using rule 2 (atomar -> FLOAT .)
    ELSE            reduce using rule 2 (atomar -> FLOAT .)
    CLOSED_BRACKETS reduce using rule 2 (atomar -> FLOAT .)
    OPEN_BRACKETS   reduce using rule 2 (atomar -> FLOAT .)


state 29

    (55) sequence -> BEGIN statements END .

    $end            reduce using rule 55 (sequence -> BEGIN statements END .)
    LPAREN          reduce using rule 55 (sequence -> BEGIN statements END .)
    END             reduce using rule 55 (sequence -> BEGIN statements END .)
    SEMICOLON       reduce using rule 55 (sequence -> BEGIN statements END .)
    RPAREN          reduce using rule 55 (sequence -> BEGIN statements END .)
    THEN            reduce using rule 55 (sequence -> BEGIN statements END .)
    COMMA           reduce using rule 55 (sequence -> BEGIN statements END .)
    COLON           reduce using rule 55 (sequence -> BEGIN statements END .)
    IN              reduce using rule 55 (sequence -> BEGIN statements END .)
    ENDCOND         reduce using rule 55 (sequence -> BEGIN statements END .)
    ELIF            reduce using rule 55 (sequence -> BEGIN statements END .)
    ELSE            reduce using rule 55 (sequence -> BEGIN statements END .)
    CLOSED_BRACKETS reduce using rule 55 (sequence -> BEGIN statements END .)
    OPEN_BRACKETS   reduce using rule 55 (sequence -> BEGIN statements END .)


state 30

    (56) sequence -> BEGIN statements SEMICOLON . END
    (61) statements -> statements SEMICOLON . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    END             shift and go to state 87
    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    LOOP            shift and go to state 21
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    statement                      shift and go to state 88
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 31

    (95) expression -> expression LPAREN . parameter_expr RPAREN
    (87) parameter_expr -> . parameter_pos_expr
    (88) parameter_expr -> . empty
    (89) parameter_pos_expr -> . expression COMMA parameter_pos_expr
    (90) parameter_pos_expr -> . expression
    (91) parameter_pos_expr -> . parameter_keywords_expr
    (94) empty -> .
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (92) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> . expression COLON expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    RPAREN          reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 89
    parameter_expr                 shift and go to state 90
    parameter_pos_expr             shift and go to state 91
    empty                          shift and go to state 92
    parameter_keywords_expr        shift and go to state 93
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 32

    (9) arithmetic_expression -> arithmetic_expression PLUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 94
    atomar                         shift and go to state 25

state 33

    (10) arithmetic_expression -> arithmetic_expression MINUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 95
    atomar                         shift and go to state 25

state 34

    (11) arithmetic_expression -> arithmetic_expression TIMES . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 96
    atomar                         shift and go to state 25

state 35

    (12) arithmetic_expression -> arithmetic_expression DIVIDE . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 97
    atomar                         shift and go to state 25

state 36

    (13) arithmetic_expression -> arithmetic_expression DIVIDE_CEIL . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 98
    atomar                         shift and go to state 25

state 37

    (14) arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 99
    atomar                         shift and go to state 25

state 38

    (15) arithmetic_expression -> arithmetic_expression MOD . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 100
    atomar                         shift and go to state 25

state 39

    (16) arithmetic_expression -> arithmetic_expression EXP . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 101
    atomar                         shift and go to state 25

state 40

    (17) arithmetic_expression -> arithmetic_expression AND . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 102
    atomar                         shift and go to state 25

state 41

    (18) arithmetic_expression -> arithmetic_expression OR . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 103
    atomar                         shift and go to state 25

state 42

    (19) arithmetic_expression -> arithmetic_expression XOR . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 104
    atomar                         shift and go to state 25

state 43

    (20) arithmetic_expression -> arithmetic_expression POWER . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 105
    atomar                         shift and go to state 25

state 44

    (24) arithmetic_expression -> arithmetic_expression IMAG .

    PLUS            reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    MINUS           reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    TIMES           reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    DIVIDE          reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    DIVIDE_CEIL     reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    DIVIDE_FLOOR    reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    MOD             reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    EXP             reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    AND             reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    OR              reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    XOR             reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    POWER           reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    IMAG            reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    GREATER_THAN    reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    SMALLER_THAN    reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    UNEQUALS        reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    EQUALS          reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    SMALLER_EQUALS  reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    GREATER_EQUALS  reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    LPAREN          reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    END             reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    SEMICOLON       reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    RPAREN          reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    THEN            reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    COMMA           reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    COLON           reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    IN              reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    ENDCOND         reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    ELIF            reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    ELSE            reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    CLOSED_BRACKETS reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)
    OPEN_BRACKETS   reduce using rule 24 (arithmetic_expression -> arithmetic_expression IMAG .)


state 45

    (26) comparison -> arithmetic_expression comparison_op . arithmetic_expression comparison_chain
    (27) comparison -> arithmetic_expression comparison_op . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 106
    atomar                         shift and go to state 25

state 46

    (30) comparison_op -> GREATER_THAN .

    LPAREN          reduce using rule 30 (comparison_op -> GREATER_THAN .)
    NOT             reduce using rule 30 (comparison_op -> GREATER_THAN .)
    MINUS           reduce using rule 30 (comparison_op -> GREATER_THAN .)
    PLUS            reduce using rule 30 (comparison_op -> GREATER_THAN .)
    NUMBER          reduce using rule 30 (comparison_op -> GREATER_THAN .)
    FLOAT           reduce using rule 30 (comparison_op -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 30 (comparison_op -> GREATER_THAN .)


state 47

    (31) comparison_op -> SMALLER_THAN .

    LPAREN          reduce using rule 31 (comparison_op -> SMALLER_THAN .)
    NOT             reduce using rule 31 (comparison_op -> SMALLER_THAN .)
    MINUS           reduce using rule 31 (comparison_op -> SMALLER_THAN .)
    PLUS            reduce using rule 31 (comparison_op -> SMALLER_THAN .)
    NUMBER          reduce using rule 31 (comparison_op -> SMALLER_THAN .)
    FLOAT           reduce using rule 31 (comparison_op -> SMALLER_THAN .)
    IDENTIFIER      reduce using rule 31 (comparison_op -> SMALLER_THAN .)


state 48

    (32) comparison_op -> UNEQUALS .

    LPAREN          reduce using rule 32 (comparison_op -> UNEQUALS .)
    NOT             reduce using rule 32 (comparison_op -> UNEQUALS .)
    MINUS           reduce using rule 32 (comparison_op -> UNEQUALS .)
    PLUS            reduce using rule 32 (comparison_op -> UNEQUALS .)
    NUMBER          reduce using rule 32 (comparison_op -> UNEQUALS .)
    FLOAT           reduce using rule 32 (comparison_op -> UNEQUALS .)
    IDENTIFIER      reduce using rule 32 (comparison_op -> UNEQUALS .)


state 49

    (33) comparison_op -> EQUALS .

    LPAREN          reduce using rule 33 (comparison_op -> EQUALS .)
    NOT             reduce using rule 33 (comparison_op -> EQUALS .)
    MINUS           reduce using rule 33 (comparison_op -> EQUALS .)
    PLUS            reduce using rule 33 (comparison_op -> EQUALS .)
    NUMBER          reduce using rule 33 (comparison_op -> EQUALS .)
    FLOAT           reduce using rule 33 (comparison_op -> EQUALS .)
    IDENTIFIER      reduce using rule 33 (comparison_op -> EQUALS .)


state 50

    (34) comparison_op -> SMALLER_EQUALS .

    LPAREN          reduce using rule 34 (comparison_op -> SMALLER_EQUALS .)
    NOT             reduce using rule 34 (comparison_op -> SMALLER_EQUALS .)
    MINUS           reduce using rule 34 (comparison_op -> SMALLER_EQUALS .)
    PLUS            reduce using rule 34 (comparison_op -> SMALLER_EQUALS .)
    NUMBER          reduce using rule 34 (comparison_op -> SMALLER_EQUALS .)
    FLOAT           reduce using rule 34 (comparison_op -> SMALLER_EQUALS .)
    IDENTIFIER      reduce using rule 34 (comparison_op -> SMALLER_EQUALS .)


state 51

    (35) comparison_op -> GREATER_EQUALS .

    LPAREN          reduce using rule 35 (comparison_op -> GREATER_EQUALS .)
    NOT             reduce using rule 35 (comparison_op -> GREATER_EQUALS .)
    MINUS           reduce using rule 35 (comparison_op -> GREATER_EQUALS .)
    PLUS            reduce using rule 35 (comparison_op -> GREATER_EQUALS .)
    NUMBER          reduce using rule 35 (comparison_op -> GREATER_EQUALS .)
    FLOAT           reduce using rule 35 (comparison_op -> GREATER_EQUALS .)
    IDENTIFIER      reduce using rule 35 (comparison_op -> GREATER_EQUALS .)


state 52

    (37) expression -> IDENTIFIER PLUS_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 107
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 53

    (38) expression -> IDENTIFIER MINUS_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 108
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 54

    (39) expression -> IDENTIFIER TIMES_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 109
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 55

    (40) expression -> IDENTIFIER POWER_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 110
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 56

    (41) expression -> IDENTIFIER DIVIDE_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 111
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 57

    (42) expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 112
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 58

    (43) expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 113
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 59

    (44) expression -> IDENTIFIER GREATER_THAN_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 114
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 60

    (45) expression -> IDENTIFIER SMALLER_THAN_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 115
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 61

    (46) expression -> IDENTIFIER GREATER_EQUALS_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 116
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 62

    (47) expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 117
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 63

    (48) expression -> IDENTIFIER EQUALS_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 118
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 64

    (49) expression -> IDENTIFIER UNEQUALS_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 119
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 65

    (50) expression -> IDENTIFIER AND_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 120
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 66

    (51) expression -> IDENTIFIER OR_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 121
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 67

    (52) expression -> IDENTIFIER XOR_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 122
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 68

    (53) expression -> IDENTIFIER EXP_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 123
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 69

    (54) expression -> IDENTIFIER MOD_ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 124
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 70

    (36) assignment -> IDENTIFIER ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 125
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 71

    (4) arithmetic_expression -> LPAREN expression . RPAREN
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    RPAREN          shift and go to state 126
    LPAREN          shift and go to state 31


state 72

    (96) expression -> LET assignment . IN expression ENDCOND

    IN              shift and go to state 127


state 73

    (36) assignment -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 70


state 74

    (97) expression -> ECHO LPAREN . expression RPAREN
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 128
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 75

    (98) expression -> LENGTH LPAREN . expression RPAREN
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 129
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 76

    (63) if_statement -> IF expression . THEN statements ENDCOND
    (64) if_statement -> IF expression . THEN statements else_elif_body ENDCOND
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    THEN            shift and go to state 130
    LPAREN          shift and go to state 31


state 77

    (67) while_statement -> WHILE expression . THEN statements ENDCOND
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    THEN            shift and go to state 131
    LPAREN          shift and go to state 31


state 78

    (68) loop_statement -> LOOP IDENTIFIER . IN interval LOOPTHEN statements ENDCOND

    IN              shift and go to state 132


state 79

    (23) arithmetic_expression -> PLUS arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    MINUS           reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    TIMES           reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE          reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    MOD             reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    EXP             reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    AND             reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    OR              reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    XOR             reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    POWER           reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    IMAG            reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    UNEQUALS        reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    EQUALS          reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    LPAREN          reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    END             reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    SEMICOLON       reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    RPAREN          reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    THEN            reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    COMMA           reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    COLON           reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    IN              reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    ENDCOND         reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    ELIF            reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    ELSE            reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 23 (arithmetic_expression -> PLUS arithmetic_expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! DIVIDE_CEIL     [ shift and go to state 36 ]
  ! DIVIDE_FLOOR    [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 38 ]
  ! EXP             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! POWER           [ shift and go to state 43 ]
  ! IMAG            [ shift and go to state 44 ]


state 80

    (3) atomar -> IDENTIFIER .

    PLUS            reduce using rule 3 (atomar -> IDENTIFIER .)
    MINUS           reduce using rule 3 (atomar -> IDENTIFIER .)
    TIMES           reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE          reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_CEIL     reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_FLOOR    reduce using rule 3 (atomar -> IDENTIFIER .)
    MOD             reduce using rule 3 (atomar -> IDENTIFIER .)
    EXP             reduce using rule 3 (atomar -> IDENTIFIER .)
    AND             reduce using rule 3 (atomar -> IDENTIFIER .)
    OR              reduce using rule 3 (atomar -> IDENTIFIER .)
    XOR             reduce using rule 3 (atomar -> IDENTIFIER .)
    POWER           reduce using rule 3 (atomar -> IDENTIFIER .)
    IMAG            reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    UNEQUALS        reduce using rule 3 (atomar -> IDENTIFIER .)
    EQUALS          reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    LPAREN          reduce using rule 3 (atomar -> IDENTIFIER .)
    END             reduce using rule 3 (atomar -> IDENTIFIER .)
    SEMICOLON       reduce using rule 3 (atomar -> IDENTIFIER .)
    RPAREN          reduce using rule 3 (atomar -> IDENTIFIER .)
    THEN            reduce using rule 3 (atomar -> IDENTIFIER .)
    COMMA           reduce using rule 3 (atomar -> IDENTIFIER .)
    COLON           reduce using rule 3 (atomar -> IDENTIFIER .)
    IN              reduce using rule 3 (atomar -> IDENTIFIER .)
    ENDCOND         reduce using rule 3 (atomar -> IDENTIFIER .)
    ELIF            reduce using rule 3 (atomar -> IDENTIFIER .)
    ELSE            reduce using rule 3 (atomar -> IDENTIFIER .)
    CLOSED_BRACKETS reduce using rule 3 (atomar -> IDENTIFIER .)
    OPEN_BRACKETS   reduce using rule 3 (atomar -> IDENTIFIER .)


state 81

    (22) arithmetic_expression -> MINUS arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    MINUS           reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    TIMES           reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE          reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    MOD             reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    EXP             reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    AND             reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    OR              reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    XOR             reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    POWER           reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    IMAG            reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    UNEQUALS        reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    EQUALS          reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    LPAREN          reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    END             reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    SEMICOLON       reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    RPAREN          reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    THEN            reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    COMMA           reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    COLON           reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    IN              reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    ENDCOND         reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    ELIF            reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    ELSE            reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 22 (arithmetic_expression -> MINUS arithmetic_expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! DIVIDE_CEIL     [ shift and go to state 36 ]
  ! DIVIDE_FLOOR    [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 38 ]
  ! EXP             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! POWER           [ shift and go to state 43 ]
  ! IMAG            [ shift and go to state 44 ]


state 82

    (21) arithmetic_expression -> NOT arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    MINUS           reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    TIMES           reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE          reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    MOD             reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    EXP             reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    AND             reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    OR              reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    XOR             reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    POWER           reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    IMAG            reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    GREATER_THAN    reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    SMALLER_THAN    reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    UNEQUALS        reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    EQUALS          reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    LPAREN          reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    END             reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    SEMICOLON       reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    RPAREN          reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    THEN            reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    COMMA           reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    COLON           reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    IN              reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    ENDCOND         reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    ELIF            reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    ELSE            reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 21 (arithmetic_expression -> NOT arithmetic_expression .)

  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! DIVIDE_CEIL     [ shift and go to state 36 ]
  ! DIVIDE_FLOOR    [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 38 ]
  ! EXP             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! POWER           [ shift and go to state 43 ]
  ! IMAG            [ shift and go to state 44 ]


state 83

    (73) lambda -> LAMBDA parameter . LAMBDA_ARROW expression

    LAMBDA_ARROW    shift and go to state 133


state 84

    (75) parameter -> LPAREN . parameter_pos RPAREN
    (78) parameter_pos -> . parameter_pos_list
    (79) parameter_pos_list -> . IDENTIFIER COMMA parameter_pos_list
    (80) parameter_pos_list -> . IDENTIFIER
    (81) parameter_pos_list -> . parameter_keywords
    (82) parameter_keywords -> . parameter_kw_list
    (83) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (84) parameter_kw_list -> . IDENTIFIER COLON expression
    (85) parameter_kw_list -> . parameter_infty
    (86) parameter_infty -> . IDENTIFIER DOTS

    IDENTIFIER      shift and go to state 136

    parameter_pos                  shift and go to state 134
    parameter_pos_list             shift and go to state 135
    parameter_keywords             shift and go to state 137
    parameter_kw_list              shift and go to state 138
    parameter_infty                shift and go to state 139

state 85

    (76) parameter -> IDENTIFIER .

    LAMBDA_ARROW    reduce using rule 76 (parameter -> IDENTIFIER .)


state 86

    (77) parameter -> empty .

    LAMBDA_ARROW    reduce using rule 77 (parameter -> empty .)


state 87

    (56) sequence -> BEGIN statements SEMICOLON END .

    $end            reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    LPAREN          reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    END             reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    SEMICOLON       reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    RPAREN          reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    THEN            reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    COMMA           reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    COLON           reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    IN              reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    ENDCOND         reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    ELIF            reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    ELSE            reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    CLOSED_BRACKETS reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)
    OPEN_BRACKETS   reduce using rule 56 (sequence -> BEGIN statements SEMICOLON END .)


state 88

    (61) statements -> statements SEMICOLON statement .

    END             reduce using rule 61 (statements -> statements SEMICOLON statement .)
    SEMICOLON       reduce using rule 61 (statements -> statements SEMICOLON statement .)
    ENDCOND         reduce using rule 61 (statements -> statements SEMICOLON statement .)
    ELIF            reduce using rule 61 (statements -> statements SEMICOLON statement .)
    ELSE            reduce using rule 61 (statements -> statements SEMICOLON statement .)


state 89

    (89) parameter_pos_expr -> expression . COMMA parameter_pos_expr
    (90) parameter_pos_expr -> expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN
    (92) parameter_keywords_expr -> expression . COLON expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> expression . COLON expression

    COMMA           shift and go to state 140
    RPAREN          reduce using rule 90 (parameter_pos_expr -> expression .)
    LPAREN          shift and go to state 31
    COLON           shift and go to state 141


state 90

    (95) expression -> expression LPAREN parameter_expr . RPAREN

    RPAREN          shift and go to state 142


state 91

    (87) parameter_expr -> parameter_pos_expr .

    RPAREN          reduce using rule 87 (parameter_expr -> parameter_pos_expr .)


state 92

    (88) parameter_expr -> empty .

    RPAREN          reduce using rule 88 (parameter_expr -> empty .)


state 93

    (91) parameter_pos_expr -> parameter_keywords_expr .

    RPAREN          reduce using rule 91 (parameter_pos_expr -> parameter_keywords_expr .)


state 94

    (9) arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    MINUS           reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    AND             reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    OR              reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    XOR             reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    UNEQUALS        reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    EQUALS          reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    LPAREN          reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    END             reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SEMICOLON       reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    RPAREN          reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    THEN            reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    COMMA           reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    COLON           reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    IN              reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ENDCOND         reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ELIF            reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ELSE            reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    DIVIDE_CEIL     shift and go to state 36
    DIVIDE_FLOOR    shift and go to state 37
    MOD             shift and go to state 38
    EXP             shift and go to state 39
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! TIMES           [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! MOD             [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! EXP             [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! POWER           [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 95

    (10) arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    MINUS           reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    AND             reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    OR              reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    XOR             reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    UNEQUALS        reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    EQUALS          reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    LPAREN          reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    END             reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SEMICOLON       reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    RPAREN          reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    THEN            reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    COMMA           reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    COLON           reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    IN              reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ENDCOND         reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ELIF            reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ELSE            reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    DIVIDE_CEIL     shift and go to state 36
    DIVIDE_FLOOR    shift and go to state 37
    MOD             shift and go to state 38
    EXP             shift and go to state 39
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! TIMES           [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! MOD             [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! EXP             [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! POWER           [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 96

    (11) arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    MINUS           reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    TIMES           reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE          reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    MOD             reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    AND             reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    OR              reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    XOR             reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    GREATER_THAN    reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SMALLER_THAN    reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    UNEQUALS        reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    EQUALS          reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    LPAREN          reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    END             reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SEMICOLON       reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    RPAREN          reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    THEN            reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    COMMA           reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    COLON           reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    IN              reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ENDCOND         reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ELIF            reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ELSE            reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    EXP             shift and go to state 39
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! EXP             [ reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! POWER           [ reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 11 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! DIVIDE_CEIL     [ shift and go to state 36 ]
  ! DIVIDE_FLOOR    [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 97

    (12) arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    MINUS           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    TIMES           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    MOD             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    AND             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    OR              reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    XOR             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    GREATER_THAN    reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SMALLER_THAN    reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    UNEQUALS        reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    EQUALS          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    LPAREN          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    END             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SEMICOLON       reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    RPAREN          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    THEN            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    COMMA           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    COLON           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    IN              reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ENDCOND         reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ELIF            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ELSE            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    EXP             shift and go to state 39
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! EXP             [ reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! POWER           [ reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! DIVIDE_CEIL     [ shift and go to state 36 ]
  ! DIVIDE_FLOOR    [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 98

    (13) arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    MINUS           reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    TIMES           reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE          reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    MOD             reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    AND             reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    OR              reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    XOR             reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    GREATER_THAN    reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SMALLER_THAN    reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    UNEQUALS        reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    EQUALS          reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    LPAREN          reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    END             reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SEMICOLON       reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    RPAREN          reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    THEN            reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    COMMA           reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    COLON           reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    IN              reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ENDCOND         reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ELIF            reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ELSE            reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    EXP             shift and go to state 39
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! EXP             [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .) ]
  ! POWER           [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! DIVIDE_CEIL     [ shift and go to state 36 ]
  ! DIVIDE_FLOOR    [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 99

    (14) arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    MINUS           reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    TIMES           reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE          reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    MOD             reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    AND             reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    OR              reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    XOR             reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    GREATER_THAN    reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    UNEQUALS        reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    EQUALS          reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    LPAREN          reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    END             reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SEMICOLON       reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    RPAREN          reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    THEN            reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    COMMA           reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    COLON           reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    IN              reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ENDCOND         reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ELIF            reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ELSE            reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    EXP             shift and go to state 39
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! EXP             [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! DIVIDE_CEIL     [ shift and go to state 36 ]
  ! DIVIDE_FLOOR    [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 100

    (15) arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    MINUS           reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    TIMES           reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE          reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    MOD             reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    AND             reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    OR              reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    XOR             reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    GREATER_THAN    reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SMALLER_THAN    reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    UNEQUALS        reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    EQUALS          reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    LPAREN          reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    END             reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SEMICOLON       reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    RPAREN          reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    THEN            reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    COMMA           reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    COLON           reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    IN              reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ENDCOND         reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ELIF            reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ELSE            reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    EXP             shift and go to state 39
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! EXP             [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .) ]
  ! POWER           [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! DIVIDE_CEIL     [ shift and go to state 36 ]
  ! DIVIDE_FLOOR    [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 101

    (16) arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    MINUS           reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    TIMES           reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE          reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    MOD             reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    AND             reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    OR              reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    XOR             reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    GREATER_THAN    reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SMALLER_THAN    reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    UNEQUALS        reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    EQUALS          reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    LPAREN          reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    END             reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SEMICOLON       reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    RPAREN          reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    THEN            reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    COMMA           reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    COLON           reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    IN              reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ENDCOND         reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ELIF            reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ELSE            reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    EXP             shift and go to state 39
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! EXP             [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .) ]
  ! POWER           [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! DIVIDE_CEIL     [ shift and go to state 36 ]
  ! DIVIDE_FLOOR    [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 102

    (17) arithmetic_expression -> arithmetic_expression AND arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    AND             reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    OR              reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    XOR             reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    GREATER_THAN    reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SMALLER_THAN    reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    UNEQUALS        reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    EQUALS          reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    LPAREN          reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    END             reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SEMICOLON       reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    RPAREN          reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    THEN            reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    COMMA           reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    COLON           reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    IN              reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ENDCOND         reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ELIF            reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ELSE            reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    DIVIDE_CEIL     shift and go to state 36
    DIVIDE_FLOOR    shift and go to state 37
    MOD             shift and go to state 38
    EXP             shift and go to state 39
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! PLUS            [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! MOD             [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! EXP             [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! POWER           [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 103

    (18) arithmetic_expression -> arithmetic_expression OR arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    OR              reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    GREATER_THAN    reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    UNEQUALS        reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    EQUALS          reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    LPAREN          reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    END             reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SEMICOLON       reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    RPAREN          reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    THEN            reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    COMMA           reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    COLON           reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    IN              reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ENDCOND         reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ELIF            reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ELSE            reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    DIVIDE_CEIL     shift and go to state 36
    DIVIDE_FLOOR    shift and go to state 37
    MOD             shift and go to state 38
    EXP             shift and go to state 39
    AND             shift and go to state 40
    XOR             shift and go to state 42
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! PLUS            [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! MOD             [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! EXP             [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! AND             [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! XOR             [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! OR              [ shift and go to state 41 ]


state 104

    (19) arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    OR              reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    XOR             reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    GREATER_THAN    reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    UNEQUALS        reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    EQUALS          reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    LPAREN          reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    END             reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SEMICOLON       reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    RPAREN          reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    THEN            reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    COMMA           reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    COLON           reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    IN              reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ENDCOND         reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ELIF            reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ELSE            reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    DIVIDE_CEIL     shift and go to state 36
    DIVIDE_FLOOR    shift and go to state 37
    MOD             shift and go to state 38
    EXP             shift and go to state 39
    AND             shift and go to state 40
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! PLUS            [ reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! MOD             [ reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! EXP             [ reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! AND             [ reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 19 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 105

    (20) arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    MINUS           reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    TIMES           reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE          reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    MOD             reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    AND             reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    OR              reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    XOR             reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    GREATER_THAN    reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SMALLER_THAN    reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    UNEQUALS        reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    EQUALS          reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    LPAREN          reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    END             reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SEMICOLON       reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    RPAREN          reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    THEN            reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    COMMA           reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    COLON           reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    IN              reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ENDCOND         reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ELIF            reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ELSE            reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    EXP             shift and go to state 39
    POWER           shift and go to state 43
    IMAG            shift and go to state 44

  ! EXP             [ reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .) ]
  ! POWER           [ reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 20 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 32 ]
  ! MINUS           [ shift and go to state 33 ]
  ! TIMES           [ shift and go to state 34 ]
  ! DIVIDE          [ shift and go to state 35 ]
  ! DIVIDE_CEIL     [ shift and go to state 36 ]
  ! DIVIDE_FLOOR    [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 38 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 106

    (26) comparison -> arithmetic_expression comparison_op arithmetic_expression . comparison_chain
    (27) comparison -> arithmetic_expression comparison_op arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG
    (28) comparison_chain -> . comparison_op arithmetic_expression comparison_chain
    (29) comparison_chain -> . comparison_op arithmetic_expression
    (30) comparison_op -> . GREATER_THAN
    (31) comparison_op -> . SMALLER_THAN
    (32) comparison_op -> . UNEQUALS
    (33) comparison_op -> . EQUALS
    (34) comparison_op -> . SMALLER_EQUALS
    (35) comparison_op -> . GREATER_EQUALS

    LPAREN          reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    END             reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    SEMICOLON       reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    RPAREN          reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    THEN            reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    COMMA           reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    COLON           reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    IN              reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    ENDCOND         reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    ELIF            reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    ELSE            reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 27 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    DIVIDE_CEIL     shift and go to state 36
    DIVIDE_FLOOR    shift and go to state 37
    MOD             shift and go to state 38
    EXP             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    POWER           shift and go to state 43
    IMAG            shift and go to state 44
    GREATER_THAN    shift and go to state 46
    SMALLER_THAN    shift and go to state 47
    UNEQUALS        shift and go to state 48
    EQUALS          shift and go to state 49
    SMALLER_EQUALS  shift and go to state 50
    GREATER_EQUALS  shift and go to state 51

    comparison_op                  shift and go to state 143
    comparison_chain               shift and go to state 144

state 107

    (37) expression -> IDENTIFIER PLUS_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    END             reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    SEMICOLON       reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    THEN            reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    COMMA           reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    COLON           reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    IN              reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    ENDCOND         reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    ELIF            reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    ELSE            reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 37 (expression -> IDENTIFIER PLUS_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 108

    (38) expression -> IDENTIFIER MINUS_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    END             reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    SEMICOLON       reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    THEN            reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    COMMA           reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    COLON           reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    IN              reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    ENDCOND         reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    ELIF            reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    ELSE            reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 38 (expression -> IDENTIFIER MINUS_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 109

    (39) expression -> IDENTIFIER TIMES_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    END             reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    SEMICOLON       reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    RPAREN          reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    THEN            reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    COMMA           reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    COLON           reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    IN              reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    ENDCOND         reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    ELIF            reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    ELSE            reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 39 (expression -> IDENTIFIER TIMES_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 110

    (40) expression -> IDENTIFIER POWER_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    END             reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    SEMICOLON       reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    RPAREN          reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    THEN            reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    COMMA           reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    COLON           reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    IN              reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    ENDCOND         reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    ELIF            reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    ELSE            reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 40 (expression -> IDENTIFIER POWER_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 111

    (41) expression -> IDENTIFIER DIVIDE_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    END             reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    SEMICOLON       reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    RPAREN          reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    THEN            reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    COMMA           reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    COLON           reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    IN              reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ENDCOND         reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ELIF            reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 41 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 112

    (42) expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    END             reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    SEMICOLON       reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    RPAREN          reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    THEN            reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    COMMA           reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    COLON           reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    IN              reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    ENDCOND         reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    ELIF            reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    ELSE            reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 42 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 113

    (43) expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    END             reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    SEMICOLON       reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    RPAREN          reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    THEN            reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    COMMA           reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    COLON           reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    IN              reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    ENDCOND         reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    ELIF            reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    ELSE            reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 43 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 114

    (44) expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    END             reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    SEMICOLON       reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    RPAREN          reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    THEN            reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    COMMA           reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    COLON           reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    IN              reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    ENDCOND         reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    ELIF            reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    ELSE            reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 44 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 115

    (45) expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    END             reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    SEMICOLON       reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    RPAREN          reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    THEN            reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    COMMA           reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    COLON           reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    IN              reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    ENDCOND         reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    ELIF            reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    ELSE            reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 45 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 116

    (46) expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    END             reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    THEN            reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    COMMA           reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    COLON           reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    IN              reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    ENDCOND         reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    ELIF            reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    ELSE            reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 46 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 117

    (47) expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    END             reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    THEN            reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    COMMA           reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    COLON           reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    IN              reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    ENDCOND         reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    ELIF            reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    ELSE            reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 47 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 118

    (48) expression -> IDENTIFIER EQUALS_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    END             reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    THEN            reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    COMMA           reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    COLON           reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    IN              reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    ENDCOND         reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    ELIF            reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    ELSE            reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 48 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 119

    (49) expression -> IDENTIFIER UNEQUALS_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    END             reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    THEN            reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    COMMA           reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    COLON           reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    IN              reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    ENDCOND         reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    ELIF            reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    ELSE            reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 49 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 120

    (50) expression -> IDENTIFIER AND_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    END             reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    SEMICOLON       reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    RPAREN          reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    THEN            reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    COMMA           reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    COLON           reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    IN              reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    ENDCOND         reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    ELIF            reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    ELSE            reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 50 (expression -> IDENTIFIER AND_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 121

    (51) expression -> IDENTIFIER OR_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    END             reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    SEMICOLON       reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    RPAREN          reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    THEN            reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    COMMA           reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    COLON           reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    IN              reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    ENDCOND         reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    ELIF            reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    ELSE            reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 51 (expression -> IDENTIFIER OR_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 122

    (52) expression -> IDENTIFIER XOR_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    END             reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    SEMICOLON       reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    RPAREN          reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    THEN            reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    COMMA           reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    COLON           reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    IN              reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    ENDCOND         reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    ELIF            reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    ELSE            reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 52 (expression -> IDENTIFIER XOR_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 123

    (53) expression -> IDENTIFIER EXP_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    END             reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    SEMICOLON       reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    RPAREN          reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    THEN            reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    COMMA           reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    COLON           reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    IN              reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    ENDCOND         reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    ELIF            reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    ELSE            reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 53 (expression -> IDENTIFIER EXP_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 124

    (54) expression -> IDENTIFIER MOD_ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    END             reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    SEMICOLON       reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    RPAREN          reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    THEN            reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    COMMA           reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    COLON           reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    IN              reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    ENDCOND         reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    ELIF            reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    ELSE            reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 54 (expression -> IDENTIFIER MOD_ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 125

    (36) assignment -> IDENTIFIER ASSIGN expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    END             reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    SEMICOLON       reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    RPAREN          reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    IN              reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    THEN            reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    COLON           reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    ENDCOND         reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    ELIF            reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    ELSE            reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 36 (assignment -> IDENTIFIER ASSIGN expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 126

    (4) arithmetic_expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    DIVIDE_CEIL     reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    DIVIDE_FLOOR    reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    EXP             reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    IMAG            reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    SMALLER_THAN    reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    UNEQUALS        reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    SMALLER_EQUALS  reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    GREATER_EQUALS  reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    END             reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    ENDCOND         reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    ELIF            reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    CLOSED_BRACKETS reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    OPEN_BRACKETS   reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)


state 127

    (96) expression -> LET assignment IN . expression ENDCOND
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    assignment                     shift and go to state 12
    expression                     shift and go to state 145
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 128

    (97) expression -> ECHO LPAREN expression . RPAREN
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    RPAREN          shift and go to state 146
    LPAREN          shift and go to state 31


state 129

    (98) expression -> LENGTH LPAREN expression . RPAREN
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    RPAREN          shift and go to state 147
    LPAREN          shift and go to state 31


state 130

    (63) if_statement -> IF expression THEN . statements ENDCOND
    (64) if_statement -> IF expression THEN . statements else_elif_body ENDCOND
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    LOOP            shift and go to state 21
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 5
    statements                     shift and go to state 148
    statement                      shift and go to state 4
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 131

    (67) while_statement -> WHILE expression THEN . statements ENDCOND
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    LOOP            shift and go to state 21
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 5
    statements                     shift and go to state 149
    statement                      shift and go to state 4
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 132

    (68) loop_statement -> LOOP IDENTIFIER IN . interval LOOPTHEN statements ENDCOND
    (69) interval -> . OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS
    (70) interval -> . CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS
    (71) interval -> . OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS
    (72) interval -> . CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS

    OPEN_BRACKETS   shift and go to state 151
    CLOSED_BRACKETS shift and go to state 152

    interval                       shift and go to state 150

state 133

    (73) lambda -> LAMBDA parameter LAMBDA_ARROW . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 153
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 134

    (75) parameter -> LPAREN parameter_pos . RPAREN

    RPAREN          shift and go to state 154


state 135

    (78) parameter_pos -> parameter_pos_list .

    RPAREN          reduce using rule 78 (parameter_pos -> parameter_pos_list .)


state 136

    (79) parameter_pos_list -> IDENTIFIER . COMMA parameter_pos_list
    (80) parameter_pos_list -> IDENTIFIER .
    (83) parameter_kw_list -> IDENTIFIER . COLON expression COMMA parameter_kw_list
    (84) parameter_kw_list -> IDENTIFIER . COLON expression
    (86) parameter_infty -> IDENTIFIER . DOTS

    COMMA           shift and go to state 155
    RPAREN          reduce using rule 80 (parameter_pos_list -> IDENTIFIER .)
    COLON           shift and go to state 156
    DOTS            shift and go to state 157


state 137

    (81) parameter_pos_list -> parameter_keywords .

    RPAREN          reduce using rule 81 (parameter_pos_list -> parameter_keywords .)


state 138

    (82) parameter_keywords -> parameter_kw_list .

    RPAREN          reduce using rule 82 (parameter_keywords -> parameter_kw_list .)


state 139

    (85) parameter_kw_list -> parameter_infty .

    RPAREN          reduce using rule 85 (parameter_kw_list -> parameter_infty .)


state 140

    (89) parameter_pos_expr -> expression COMMA . parameter_pos_expr
    (89) parameter_pos_expr -> . expression COMMA parameter_pos_expr
    (90) parameter_pos_expr -> . expression
    (91) parameter_pos_expr -> . parameter_keywords_expr
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (92) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> . expression COLON expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 89
    parameter_pos_expr             shift and go to state 158
    parameter_keywords_expr        shift and go to state 93
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 141

    (92) parameter_keywords_expr -> expression COLON . expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> expression COLON . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 159
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 142

    (95) expression -> expression LPAREN parameter_expr RPAREN .

    LPAREN          reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    END             reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    SEMICOLON       reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    RPAREN          reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    THEN            reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    COMMA           reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    COLON           reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    IN              reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    ENDCOND         reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    ELIF            reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    ELSE            reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    CLOSED_BRACKETS reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)
    OPEN_BRACKETS   reduce using rule 95 (expression -> expression LPAREN parameter_expr RPAREN .)


state 143

    (28) comparison_chain -> comparison_op . arithmetic_expression comparison_chain
    (29) comparison_chain -> comparison_op . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28
    IDENTIFIER      shift and go to state 80

    arithmetic_expression          shift and go to state 160
    atomar                         shift and go to state 25

state 144

    (26) comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .

    LPAREN          reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    END             reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    SEMICOLON       reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    RPAREN          reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    THEN            reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    COMMA           reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    COLON           reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    IN              reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ENDCOND         reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ELIF            reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ELSE            reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    CLOSED_BRACKETS reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    OPEN_BRACKETS   reduce using rule 26 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)


state 145

    (96) expression -> LET assignment IN expression . ENDCOND
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    ENDCOND         shift and go to state 161
    LPAREN          shift and go to state 31


state 146

    (97) expression -> ECHO LPAREN expression RPAREN .

    LPAREN          reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    END             reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    RPAREN          reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    THEN            reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    COMMA           reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    COLON           reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    IN              reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    ENDCOND         reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    ELIF            reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    ELSE            reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    CLOSED_BRACKETS reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)
    OPEN_BRACKETS   reduce using rule 97 (expression -> ECHO LPAREN expression RPAREN .)


state 147

    (98) expression -> LENGTH LPAREN expression RPAREN .

    LPAREN          reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    END             reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    RPAREN          reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    THEN            reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    COMMA           reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    COLON           reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    IN              reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    ENDCOND         reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    ELIF            reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    ELSE            reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    CLOSED_BRACKETS reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)
    OPEN_BRACKETS   reduce using rule 98 (expression -> LENGTH LPAREN expression RPAREN .)


state 148

    (63) if_statement -> IF expression THEN statements . ENDCOND
    (64) if_statement -> IF expression THEN statements . else_elif_body ENDCOND
    (61) statements -> statements . SEMICOLON statement
    (65) else_elif_body -> . ELIF IF expression THEN statements else_elif_body
    (66) else_elif_body -> . ELSE statements

    ENDCOND         shift and go to state 162
    SEMICOLON       shift and go to state 164
    ELIF            shift and go to state 165
    ELSE            shift and go to state 166

    else_elif_body                 shift and go to state 163

state 149

    (67) while_statement -> WHILE expression THEN statements . ENDCOND
    (61) statements -> statements . SEMICOLON statement

    ENDCOND         shift and go to state 167
    SEMICOLON       shift and go to state 164


state 150

    (68) loop_statement -> LOOP IDENTIFIER IN interval . LOOPTHEN statements ENDCOND

    LOOPTHEN        shift and go to state 168


state 151

    (69) interval -> OPEN_BRACKETS . expression COMMA expression CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS . expression COMMA expression OPEN_BRACKETS
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 169
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 152

    (70) interval -> CLOSED_BRACKETS . expression COMMA expression CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS . expression COMMA expression OPEN_BRACKETS
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 170
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 153

    (73) lambda -> LAMBDA parameter LAMBDA_ARROW expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    END             reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    SEMICOLON       reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    RPAREN          reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    THEN            reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    COMMA           reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    COLON           reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    IN              reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    ENDCOND         reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    ELIF            reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    ELSE            reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    CLOSED_BRACKETS reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    OPEN_BRACKETS   reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)

  ! LPAREN          [ shift and go to state 31 ]


state 154

    (75) parameter -> LPAREN parameter_pos RPAREN .

    LAMBDA_ARROW    reduce using rule 75 (parameter -> LPAREN parameter_pos RPAREN .)


state 155

    (79) parameter_pos_list -> IDENTIFIER COMMA . parameter_pos_list
    (79) parameter_pos_list -> . IDENTIFIER COMMA parameter_pos_list
    (80) parameter_pos_list -> . IDENTIFIER
    (81) parameter_pos_list -> . parameter_keywords
    (82) parameter_keywords -> . parameter_kw_list
    (83) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (84) parameter_kw_list -> . IDENTIFIER COLON expression
    (85) parameter_kw_list -> . parameter_infty
    (86) parameter_infty -> . IDENTIFIER DOTS

    IDENTIFIER      shift and go to state 136

    parameter_pos_list             shift and go to state 171
    parameter_keywords             shift and go to state 137
    parameter_kw_list              shift and go to state 138
    parameter_infty                shift and go to state 139

state 156

    (83) parameter_kw_list -> IDENTIFIER COLON . expression COMMA parameter_kw_list
    (84) parameter_kw_list -> IDENTIFIER COLON . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 172
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 157

    (86) parameter_infty -> IDENTIFIER DOTS .

    RPAREN          reduce using rule 86 (parameter_infty -> IDENTIFIER DOTS .)


state 158

    (89) parameter_pos_expr -> expression COMMA parameter_pos_expr .

    RPAREN          reduce using rule 89 (parameter_pos_expr -> expression COMMA parameter_pos_expr .)


state 159

    (92) parameter_keywords_expr -> expression COLON expression . COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> expression COLON expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    COMMA           shift and go to state 173
    RPAREN          reduce using rule 93 (parameter_keywords_expr -> expression COLON expression .)
    LPAREN          shift and go to state 31


state 160

    (28) comparison_chain -> comparison_op arithmetic_expression . comparison_chain
    (29) comparison_chain -> comparison_op arithmetic_expression .
    (9) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (19) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (20) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (24) arithmetic_expression -> arithmetic_expression . IMAG
    (28) comparison_chain -> . comparison_op arithmetic_expression comparison_chain
    (29) comparison_chain -> . comparison_op arithmetic_expression
    (30) comparison_op -> . GREATER_THAN
    (31) comparison_op -> . SMALLER_THAN
    (32) comparison_op -> . UNEQUALS
    (33) comparison_op -> . EQUALS
    (34) comparison_op -> . SMALLER_EQUALS
    (35) comparison_op -> . GREATER_EQUALS

    LPAREN          reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    END             reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    SEMICOLON       reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    RPAREN          reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    THEN            reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    COMMA           reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    COLON           reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    IN              reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    ENDCOND         reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    ELIF            reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    ELSE            reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 29 (comparison_chain -> comparison_op arithmetic_expression .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    DIVIDE_CEIL     shift and go to state 36
    DIVIDE_FLOOR    shift and go to state 37
    MOD             shift and go to state 38
    EXP             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    POWER           shift and go to state 43
    IMAG            shift and go to state 44
    GREATER_THAN    shift and go to state 46
    SMALLER_THAN    shift and go to state 47
    UNEQUALS        shift and go to state 48
    EQUALS          shift and go to state 49
    SMALLER_EQUALS  shift and go to state 50
    GREATER_EQUALS  shift and go to state 51

    comparison_op                  shift and go to state 143
    comparison_chain               shift and go to state 174

state 161

    (96) expression -> LET assignment IN expression ENDCOND .

    LPAREN          reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    END             reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    SEMICOLON       reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    RPAREN          reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    THEN            reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    COMMA           reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    COLON           reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    IN              reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    ENDCOND         reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    ELIF            reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    ELSE            reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    CLOSED_BRACKETS reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)
    OPEN_BRACKETS   reduce using rule 96 (expression -> LET assignment IN expression ENDCOND .)


state 162

    (63) if_statement -> IF expression THEN statements ENDCOND .

    END             reduce using rule 63 (if_statement -> IF expression THEN statements ENDCOND .)
    SEMICOLON       reduce using rule 63 (if_statement -> IF expression THEN statements ENDCOND .)
    ENDCOND         reduce using rule 63 (if_statement -> IF expression THEN statements ENDCOND .)
    ELIF            reduce using rule 63 (if_statement -> IF expression THEN statements ENDCOND .)
    ELSE            reduce using rule 63 (if_statement -> IF expression THEN statements ENDCOND .)


state 163

    (64) if_statement -> IF expression THEN statements else_elif_body . ENDCOND

    ENDCOND         shift and go to state 175


state 164

    (61) statements -> statements SEMICOLON . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    LOOP            shift and go to state 21
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    statement                      shift and go to state 88
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 165

    (65) else_elif_body -> ELIF . IF expression THEN statements else_elif_body

    IF              shift and go to state 176


state 166

    (66) else_elif_body -> ELSE . statements
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    LOOP            shift and go to state 21
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    statements                     shift and go to state 177
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 167

    (67) while_statement -> WHILE expression THEN statements ENDCOND .

    END             reduce using rule 67 (while_statement -> WHILE expression THEN statements ENDCOND .)
    SEMICOLON       reduce using rule 67 (while_statement -> WHILE expression THEN statements ENDCOND .)
    ENDCOND         reduce using rule 67 (while_statement -> WHILE expression THEN statements ENDCOND .)
    ELIF            reduce using rule 67 (while_statement -> WHILE expression THEN statements ENDCOND .)
    ELSE            reduce using rule 67 (while_statement -> WHILE expression THEN statements ENDCOND .)


state 168

    (68) loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN . statements ENDCOND
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    LOOP            shift and go to state 21
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    statements                     shift and go to state 178
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 169

    (69) interval -> OPEN_BRACKETS expression . COMMA expression CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS expression . COMMA expression OPEN_BRACKETS
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    COMMA           shift and go to state 179
    LPAREN          shift and go to state 31


state 170

    (70) interval -> CLOSED_BRACKETS expression . COMMA expression CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS expression . COMMA expression OPEN_BRACKETS
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    COMMA           shift and go to state 180
    LPAREN          shift and go to state 31


state 171

    (79) parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list .

    RPAREN          reduce using rule 79 (parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list .)


state 172

    (83) parameter_kw_list -> IDENTIFIER COLON expression . COMMA parameter_kw_list
    (84) parameter_kw_list -> IDENTIFIER COLON expression .
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    COMMA           shift and go to state 181
    RPAREN          reduce using rule 84 (parameter_kw_list -> IDENTIFIER COLON expression .)
    LPAREN          shift and go to state 31


state 173

    (92) parameter_keywords_expr -> expression COLON expression COMMA . parameter_keywords_expr
    (92) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> . expression COLON expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 182
    parameter_keywords_expr        shift and go to state 183
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 174

    (28) comparison_chain -> comparison_op arithmetic_expression comparison_chain .

    LPAREN          reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    END             reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    SEMICOLON       reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    RPAREN          reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    THEN            reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    COMMA           reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    COLON           reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    IN              reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ENDCOND         reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ELIF            reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ELSE            reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    CLOSED_BRACKETS reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    OPEN_BRACKETS   reduce using rule 28 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)


state 175

    (64) if_statement -> IF expression THEN statements else_elif_body ENDCOND .

    END             reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body ENDCOND .)
    SEMICOLON       reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body ENDCOND .)
    ENDCOND         reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body ENDCOND .)
    ELIF            reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body ENDCOND .)
    ELSE            reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body ENDCOND .)


state 176

    (65) else_elif_body -> ELIF IF . expression THEN statements else_elif_body
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 184
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 177

    (66) else_elif_body -> ELSE statements .
    (61) statements -> statements . SEMICOLON statement

    ENDCOND         reduce using rule 66 (else_elif_body -> ELSE statements .)
    SEMICOLON       shift and go to state 164


state 178

    (68) loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements . ENDCOND
    (61) statements -> statements . SEMICOLON statement

    ENDCOND         shift and go to state 185
    SEMICOLON       shift and go to state 164


state 179

    (69) interval -> OPEN_BRACKETS expression COMMA . expression CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS expression COMMA . expression OPEN_BRACKETS
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 186
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 180

    (70) interval -> CLOSED_BRACKETS expression COMMA . expression CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS expression COMMA . expression OPEN_BRACKETS
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 187
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 181

    (83) parameter_kw_list -> IDENTIFIER COLON expression COMMA . parameter_kw_list
    (83) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (84) parameter_kw_list -> . IDENTIFIER COLON expression
    (85) parameter_kw_list -> . parameter_infty
    (86) parameter_infty -> . IDENTIFIER DOTS

    IDENTIFIER      shift and go to state 188

    parameter_kw_list              shift and go to state 189
    parameter_infty                shift and go to state 139

state 182

    (92) parameter_keywords_expr -> expression . COLON expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> expression . COLON expression
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    COLON           shift and go to state 141
    LPAREN          shift and go to state 31


state 183

    (92) parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr .

    RPAREN          reduce using rule 92 (parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr .)


state 184

    (65) else_elif_body -> ELIF IF expression . THEN statements else_elif_body
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    THEN            shift and go to state 190
    LPAREN          shift and go to state 31


state 185

    (68) loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND .

    END             reduce using rule 68 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND .)
    SEMICOLON       reduce using rule 68 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND .)
    ENDCOND         reduce using rule 68 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND .)
    ELIF            reduce using rule 68 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND .)
    ELSE            reduce using rule 68 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND .)


state 186

    (69) interval -> OPEN_BRACKETS expression COMMA expression . CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS expression COMMA expression . OPEN_BRACKETS
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    CLOSED_BRACKETS shift and go to state 192
    OPEN_BRACKETS   shift and go to state 191
    LPAREN          shift and go to state 31


state 187

    (70) interval -> CLOSED_BRACKETS expression COMMA expression . CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS expression COMMA expression . OPEN_BRACKETS
    (95) expression -> expression . LPAREN parameter_expr RPAREN

    CLOSED_BRACKETS shift and go to state 193
    OPEN_BRACKETS   shift and go to state 194
    LPAREN          shift and go to state 31


state 188

    (83) parameter_kw_list -> IDENTIFIER . COLON expression COMMA parameter_kw_list
    (84) parameter_kw_list -> IDENTIFIER . COLON expression
    (86) parameter_infty -> IDENTIFIER . DOTS

    COLON           shift and go to state 156
    DOTS            shift and go to state 157


state 189

    (83) parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list .

    RPAREN          reduce using rule 83 (parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list .)


state 190

    (65) else_elif_body -> ELIF IF expression THEN . statements else_elif_body
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (7) expression -> . sequence
    (8) expression -> . assignment
    (37) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (38) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (39) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (40) expression -> . IDENTIFIER POWER_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (43) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (46) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (50) expression -> . IDENTIFIER AND_ASSIGN expression
    (51) expression -> . IDENTIFIER OR_ASSIGN expression
    (52) expression -> . IDENTIFIER XOR_ASSIGN expression
    (53) expression -> . IDENTIFIER EXP_ASSIGN expression
    (54) expression -> . IDENTIFIER MOD_ASSIGN expression
    (74) expression -> . lambda
    (95) expression -> . expression LPAREN parameter_expr RPAREN
    (96) expression -> . LET assignment IN expression ENDCOND
    (97) expression -> . ECHO LPAREN expression RPAREN
    (98) expression -> . LENGTH LPAREN expression RPAREN
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements ENDCOND
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (9) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (21) arithmetic_expression -> . NOT arithmetic_expression
    (22) arithmetic_expression -> . MINUS arithmetic_expression
    (23) arithmetic_expression -> . PLUS arithmetic_expression
    (24) arithmetic_expression -> . arithmetic_expression IMAG
    (25) arithmetic_expression -> . atomar
    (26) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (27) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (55) sequence -> . BEGIN statements END
    (56) sequence -> . BEGIN statements SEMICOLON END
    (36) assignment -> . IDENTIFIER ASSIGN expression
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    LOOP            shift and go to state 21
    LPAREN          shift and go to state 15
    NOT             shift and go to state 24
    MINUS           shift and go to state 23
    PLUS            shift and go to state 22
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 26
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 28

    expression                     shift and go to state 5
    statements                     shift and go to state 195
    statement                      shift and go to state 4
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 11
    assignment                     shift and go to state 12
    lambda                         shift and go to state 14
    atomar                         shift and go to state 25

state 191

    (71) interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS .

    LOOPTHEN        reduce using rule 71 (interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS .)


state 192

    (69) interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS .

    LOOPTHEN        reduce using rule 69 (interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS .)


state 193

    (70) interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS .

    LOOPTHEN        reduce using rule 70 (interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS .)


state 194

    (72) interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS .

    LOOPTHEN        reduce using rule 72 (interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS .)


state 195

    (65) else_elif_body -> ELIF IF expression THEN statements . else_elif_body
    (61) statements -> statements . SEMICOLON statement
    (65) else_elif_body -> . ELIF IF expression THEN statements else_elif_body
    (66) else_elif_body -> . ELSE statements

    SEMICOLON       shift and go to state 164
    ELIF            shift and go to state 165
    ELSE            shift and go to state 166

    else_elif_body                 shift and go to state 196

state 196

    (65) else_elif_body -> ELIF IF expression THEN statements else_elif_body .

    ENDCOND         reduce using rule 65 (else_elif_body -> ELIF IF expression THEN statements else_elif_body .)

