
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'sequencerightASSIGNPLUSASSIGNMINUSASSIGNTIMESASSIGNPOWERASSIGNDIVIDE_CEILASSIGNDIVIDE_FLOORASSIGNDIVIDEASSIGNGREATER_THANASSIGNSMALLER_THANASSIGNUNEQUALSASSIGNEQUALSASSIGNSMALLER_EQUALSASSIGNGREATER_EQUALSASSIGNANDASSIGNORASSIGNXORASSIGNMODASSIGNEXPASSIGNleftLAMBDAleftORleftXORleftANDleftEQUALSUNEQUALSleftGREATER_THANSMALLER_THANSMALLER_EQUALSGREATER_EQUALSleftPLUSMINUSleftTIMESDIVIDEDIVIDE_CEILDIVIDE_FLOORMODrightPOWEREXPleftIMAGrightNOTUPLUSUMINUSAND ANDASSIGN ASSIGN BEGIN CLOSED_BRACKETS COLON COMMA DIVIDE DIVIDEASSIGN DIVIDE_CEIL DIVIDE_CEILASSIGN DIVIDE_FLOOR DIVIDE_FLOORASSIGN DOTS ECHO ELIF ELSE END ENDCOND EQUALS EQUALSASSIGN EXP EXPASSIGN FLOAT GREATER_EQUALS GREATER_EQUALSASSIGN GREATER_THAN GREATER_THANASSIGN IDENTIFIER IF IMAG LAMBDA LAMBDA_ARROW LENGTH LOOP LOOPIN LOOPTHEN LPAREN MINUS MINUSASSIGN MOD MODASSIGN NOT NUMBER OPEN_BRACKETS OR ORASSIGN PLUS PLUSASSIGN POWER POWERASSIGN RPAREN SEMICOLON SMALLER_EQUALS SMALLER_EQUALSASSIGN SMALLER_THAN SMALLER_THANASSIGN THEN TIMES TIMESASSIGN UNEQUALS UNEQUALSASSIGN WHILE XOR XORASSIGNatomar : NUMBERatomar : FLOATatomar : IDENTIFIER\narithmetic_expression : LPAREN expression RPAREN\nexpression : arithmetic_expression\n| comparison\narithmetic_expression : arithmetic_expression PLUS arithmetic_expression\n| arithmetic_expression MINUS arithmetic_expression\n| arithmetic_expression TIMES arithmetic_expression\n| arithmetic_expression DIVIDE arithmetic_expression\n| arithmetic_expression DIVIDE_CEIL arithmetic_expression\n| arithmetic_expression DIVIDE_FLOOR arithmetic_expression\n| arithmetic_expression MOD arithmetic_expression\n| arithmetic_expression EXP arithmetic_expression\n| arithmetic_expression AND arithmetic_expression\n| arithmetic_expression OR arithmetic_expression\n| arithmetic_expression XOR arithmetic_expression\n| arithmetic_expression POWER arithmetic_expression\narithmetic_expression : NOT   arithmetic_expression\n| MINUS arithmetic_expression %prec UMINUS\n| PLUS  arithmetic_expression %prec UPLUSarithmetic_expression : arithmetic_expression IMAGarithmetic_expression : atomar\ncomparison : arithmetic_expression comparison_op arithmetic_expression comparison_chain\n\ncomparison : arithmetic_expression comparison_op arithmetic_expression\n\ncomparison_chain : comparison_op arithmetic_expression comparison_chain\n\ncomparison_chain : comparison_op arithmetic_expression\ncomparison_op : GREATER_THAN\n| SMALLER_THAN\n| UNEQUALS\n| EQUALS\n| SMALLER_EQUALS\n| GREATER_EQUALSexpression : IDENTIFIER ASSIGN expression\nexpression : IDENTIFIER PLUSASSIGN expression\n           | IDENTIFIER MINUSASSIGN expression\n           | IDENTIFIER TIMESASSIGN expression\n           | IDENTIFIER POWERASSIGN expression\n           | IDENTIFIER DIVIDEASSIGN expression\n           | IDENTIFIER DIVIDE_FLOORASSIGN expression\n           | IDENTIFIER DIVIDE_CEILASSIGN expression\n           | IDENTIFIER GREATER_THANASSIGN expression\n           | IDENTIFIER SMALLER_THANASSIGN expression\n           | IDENTIFIER GREATER_EQUALSASSIGN expression\n           | IDENTIFIER SMALLER_EQUALSASSIGN expression\n           | IDENTIFIER EQUALSASSIGN expression\n           | IDENTIFIER UNEQUALSASSIGN expression\n           | IDENTIFIER ANDASSIGN expression\n           | IDENTIFIER ORASSIGN expression\n           | IDENTIFIER XORASSIGN expression\n           | IDENTIFIER EXPASSIGN expression\n           | IDENTIFIER MODASSIGN expression\n\nsequence : BEGIN statements END\n         | BEGIN statements SEMICOLON END\n\nstatement : expression\n          | sequence\n          | if_statement\n          | while_statement\n          | loop_statement\n          | function\n\nstatements : statements SEMICOLON statement\n\nstatements : statement\n\nif_statement : IF expression THEN statements ENDCOND\n             | IF expression THEN statements else_elif_body ENDCOND\n\nelse_elif_body : ELIF IF expression THEN statements else_elif_body\n               | ELSE statements\n\nwhile_statement : WHILE expression THEN statements ENDCOND\n\nloop_statement : LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND\n\ninterval : OPEN_BRACKETS   expression COMMA expression CLOSED_BRACKETS\n         | CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS\n         | OPEN_BRACKETS   expression COMMA expression OPEN_BRACKETS\n         | CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS\nexpression : LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression %prec LAMBDA\nparameter : parameter_list\n\nparameter_list : expression COMMA parameter_list\n                | expression\n                | parameter_keywords\n                |\n\nparameter_keywords : expression COLON expression COMMA parameter_keywords\n                   | expression COLON expression\n                   | parameter_infty\n\nparameter_infty : expression DOTS\nexpression : expression LPAREN parameter RPARENfunction : ECHO LPAREN expression RPARENfunction : LENGTH LPAREN expression RPAREN'
    
_lr_action_items = {'BEGIN':([0,2,28,121,122,146,148,150,168,],[2,2,2,2,2,2,2,2,2,]),'$end':([1,27,80,],[0,-53,-54,]),'IDENTIFIER':([2,15,16,17,18,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,121,122,126,127,130,136,137,143,146,148,150,153,157,160,161,168,],[13,13,13,13,73,77,77,77,13,13,77,77,77,77,77,77,77,77,77,77,77,77,77,-28,-29,-30,-31,-32,-33,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,77,13,13,13,13,13,13,13,13,13,13,13,]),'LAMBDA':([2,15,16,17,28,29,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,121,122,126,127,136,137,143,146,148,150,153,157,160,161,168,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF':([2,28,121,122,146,147,148,150,168,],[16,16,16,16,16,157,16,16,16,]),'WHILE':([2,28,121,122,146,148,150,168,],[17,17,17,17,17,17,17,17,]),'LOOP':([2,28,121,122,146,148,150,168,],[18,18,18,18,18,18,18,18,]),'ECHO':([2,28,121,122,146,148,150,168,],[19,19,19,19,19,19,19,19,]),'LENGTH':([2,28,121,122,146,148,150,168,],[20,20,20,20,20,20,20,20,]),'LPAREN':([2,5,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,124,125,126,127,129,130,131,136,137,141,142,143,146,148,150,151,152,153,154,155,157,160,161,162,164,166,167,168,],[15,29,-5,-6,-3,69,15,15,15,74,75,15,15,15,-23,-1,-2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-22,15,-28,-29,-30,-31,-32,-33,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,29,29,29,15,15,-21,-3,-20,-19,29,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,15,15,29,29,15,15,-83,15,-24,15,15,29,-27,15,15,15,15,29,29,15,-26,-73,15,15,15,29,29,29,29,15,]),'NOT':([2,15,16,17,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,121,122,126,127,130,136,137,143,146,148,150,153,157,160,161,168,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-28,-29,-30,-31,-32,-33,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'MINUS':([2,11,13,15,16,17,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,121,122,126,127,130,136,137,142,143,146,148,150,153,157,160,161,168,],[22,31,-3,22,22,22,22,22,22,-23,-1,-2,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-22,22,-28,-29,-30,-31,-32,-33,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,31,31,31,-18,31,-4,22,22,22,22,22,22,22,31,22,22,22,22,22,22,22,22,22,]),'PLUS':([2,11,13,15,16,17,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,121,122,126,127,130,136,137,142,143,146,148,150,153,157,160,161,168,],[21,30,-3,21,21,21,21,21,21,-23,-1,-2,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-22,21,-28,-29,-30,-31,-32,-33,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,30,30,30,-18,30,-4,21,21,21,21,21,21,21,30,21,21,21,21,21,21,21,21,21,]),'NUMBER':([2,15,16,17,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,121,122,126,127,130,136,137,143,146,148,150,153,157,160,161,168,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-28,-29,-30,-31,-32,-33,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'FLOAT':([2,15,16,17,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,121,122,126,127,130,136,137,143,146,148,150,153,157,160,161,168,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-28,-29,-30,-31,-32,-33,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'END':([3,4,5,6,7,8,9,10,11,12,13,24,25,26,27,28,42,76,77,78,79,80,81,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,138,139,142,144,149,154,155,156,165,],[27,-62,-55,-56,-57,-58,-59,-60,-5,-6,-3,-23,-1,-2,-53,80,-22,-21,-3,-20,-19,-54,-61,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,-83,-24,-84,-85,-27,-63,-67,-26,-73,-64,-68,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,13,24,25,26,27,42,76,77,78,79,80,81,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,133,134,138,139,142,144,149,154,155,156,158,159,165,173,],[28,-62,-55,-56,-57,-58,-59,-60,-5,-6,-3,-23,-1,-2,-53,-22,-21,-3,-20,-19,-54,-61,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,-83,-24,146,146,-84,-85,-27,-63,-67,-26,-73,-64,146,146,-68,146,]),'ENDCOND':([4,5,6,7,8,9,10,11,12,13,24,25,26,27,42,76,77,78,79,80,81,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,133,134,138,139,142,144,145,149,154,155,156,158,159,165,174,],[-62,-55,-56,-57,-58,-59,-60,-5,-6,-3,-23,-1,-2,-53,-22,-21,-3,-20,-19,-54,-61,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,-83,-24,144,149,-84,-85,-27,-63,156,-67,-26,-73,-64,-66,165,-68,-65,]),'ELIF':([4,5,6,7,8,9,10,11,12,13,24,25,26,27,42,76,77,78,79,80,81,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,133,138,139,142,144,149,154,155,156,165,173,],[-62,-55,-56,-57,-58,-59,-60,-5,-6,-3,-23,-1,-2,-53,-22,-21,-3,-20,-19,-54,-61,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,-83,-24,147,-84,-85,-27,-63,-67,-26,-73,-64,-68,147,]),'ELSE':([4,5,6,7,8,9,10,11,12,13,24,25,26,27,42,76,77,78,79,80,81,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,133,138,139,142,144,149,154,155,156,165,173,],[-62,-55,-56,-57,-58,-59,-60,-5,-6,-3,-23,-1,-2,-53,-22,-21,-3,-20,-19,-54,-61,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,-83,-24,148,-84,-85,-27,-63,-67,-26,-73,-64,-68,148,]),'RPAREN':([11,12,13,24,25,26,29,42,69,70,76,77,78,79,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,125,126,128,129,131,140,141,142,154,155,163,],[-5,-6,-3,-23,-1,-2,-78,-22,-78,120,-21,-3,-20,-19,-76,129,-74,-77,-81,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,132,-4,138,139,-78,-82,-83,-24,-75,-80,-27,-26,-73,-79,]),'THEN':([11,12,13,24,25,26,42,71,72,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,142,154,155,164,],[-5,-6,-3,-23,-1,-2,-22,121,122,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,-83,-24,-27,-26,-73,168,]),'COMMA':([11,12,13,24,25,26,42,76,77,78,79,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,141,142,151,152,154,155,],[-5,-6,-3,-23,-1,-2,-22,-21,-3,-20,-19,126,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,-83,-24,153,-27,160,161,-26,-73,]),'COLON':([11,12,13,24,25,26,42,76,77,78,79,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,142,154,155,162,],[-5,-6,-3,-23,-1,-2,-22,-21,-3,-20,-19,127,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,-83,-24,-27,-26,-73,127,]),'DOTS':([11,12,13,24,25,26,42,76,77,78,79,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,129,131,142,154,155,162,],[-5,-6,-3,-23,-1,-2,-22,-21,-3,-20,-19,128,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,-83,-24,-27,-26,-73,128,]),'CLOSED_BRACKETS':([11,12,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,123,129,131,142,154,155,166,167,],[-5,-6,-3,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,137,-83,-24,-27,-26,-73,170,171,]),'OPEN_BRACKETS':([11,12,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,123,129,131,142,154,155,166,167,],[-5,-6,-3,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-4,136,-83,-24,-27,-26,-73,169,172,]),'TIMES':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[32,-3,-23,-1,-2,-22,-21,-3,-20,-19,32,32,-9,-10,-11,-12,-13,-14,32,32,32,-18,32,-4,32,]),'DIVIDE':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[33,-3,-23,-1,-2,-22,-21,-3,-20,-19,33,33,-9,-10,-11,-12,-13,-14,33,33,33,-18,33,-4,33,]),'DIVIDE_CEIL':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[34,-3,-23,-1,-2,-22,-21,-3,-20,-19,34,34,-9,-10,-11,-12,-13,-14,34,34,34,-18,34,-4,34,]),'DIVIDE_FLOOR':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[35,-3,-23,-1,-2,-22,-21,-3,-20,-19,35,35,-9,-10,-11,-12,-13,-14,35,35,35,-18,35,-4,35,]),'MOD':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[36,-3,-23,-1,-2,-22,-21,-3,-20,-19,36,36,-9,-10,-11,-12,-13,-14,36,36,36,-18,36,-4,36,]),'EXP':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[37,-3,-23,-1,-2,-22,-21,-3,-20,-19,37,37,37,37,37,37,37,37,37,37,37,37,37,-4,37,]),'AND':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[38,-3,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,38,38,-18,38,-4,38,]),'OR':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[39,-3,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,39,-4,39,]),'XOR':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[40,-3,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,40,-17,-18,40,-4,40,]),'POWER':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[41,-3,-23,-1,-2,-22,-21,-3,-20,-19,41,41,41,41,41,41,41,41,41,41,41,41,41,-4,41,]),'IMAG':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[42,-3,-23,-1,-2,-22,-21,-3,-20,-19,42,42,42,42,42,42,42,42,42,42,42,42,42,-4,42,]),'GREATER_THAN':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[44,-3,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,44,-4,44,]),'SMALLER_THAN':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[45,-3,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,45,-4,45,]),'UNEQUALS':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[46,-3,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,46,-4,46,]),'EQUALS':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[47,-3,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,47,-4,47,]),'SMALLER_EQUALS':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[48,-3,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,48,-4,48,]),'GREATER_EQUALS':([11,13,24,25,26,42,76,77,78,79,87,88,89,90,91,92,93,94,95,96,97,98,99,120,142,],[49,-3,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,49,-4,49,]),'ASSIGN':([13,],[50,]),'PLUSASSIGN':([13,],[51,]),'MINUSASSIGN':([13,],[52,]),'TIMESASSIGN':([13,],[53,]),'POWERASSIGN':([13,],[54,]),'DIVIDEASSIGN':([13,],[55,]),'DIVIDE_FLOORASSIGN':([13,],[56,]),'DIVIDE_CEILASSIGN':([13,],[57,]),'GREATER_THANASSIGN':([13,],[58,]),'SMALLER_THANASSIGN':([13,],[59,]),'GREATER_EQUALSASSIGN':([13,],[60,]),'SMALLER_EQUALSASSIGN':([13,],[61,]),'EQUALSASSIGN':([13,],[62,]),'UNEQUALSASSIGN':([13,],[63,]),'ANDASSIGN':([13,],[64,]),'ORASSIGN':([13,],[65,]),'XORASSIGN':([13,],[66,]),'EXPASSIGN':([13,],[67,]),'MODASSIGN':([13,],[68,]),'LOOPIN':([73,],[123,]),'LAMBDA_ARROW':([132,],[143,]),'LOOPTHEN':([135,169,170,171,172,],[150,-71,-69,-70,-72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sequence':([0,2,28,121,122,146,148,150,168,],[1,6,6,6,6,6,6,6,6,]),'statements':([2,121,122,148,150,168,],[3,133,134,158,159,173,]),'statement':([2,28,121,122,146,148,150,168,],[4,81,4,4,81,4,4,4,]),'expression':([2,15,16,17,28,29,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,121,122,126,127,136,137,143,146,148,150,153,157,160,161,168,],[5,70,71,72,5,82,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,82,124,125,5,5,82,141,151,152,155,5,5,5,162,164,166,167,5,]),'if_statement':([2,28,121,122,146,148,150,168,],[7,7,7,7,7,7,7,7,]),'while_statement':([2,28,121,122,146,148,150,168,],[8,8,8,8,8,8,8,8,]),'loop_statement':([2,28,121,122,146,148,150,168,],[9,9,9,9,9,9,9,9,]),'function':([2,28,121,122,146,148,150,168,],[10,10,10,10,10,10,10,10,]),'arithmetic_expression':([2,15,16,17,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,121,122,126,127,130,136,137,143,146,148,150,153,157,160,161,168,],[11,11,11,11,76,78,79,11,11,87,88,89,90,91,92,93,94,95,96,97,98,99,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,142,11,11,11,11,11,11,11,11,11,11,11,]),'comparison':([2,15,16,17,28,29,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,121,122,126,127,136,137,143,146,148,150,153,157,160,161,168,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'atomar':([2,15,16,17,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,121,122,126,127,130,136,137,143,146,148,150,153,157,160,161,168,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'comparison_op':([11,99,142,],[43,130,130,]),'parameter':([29,69,],[83,119,]),'parameter_list':([29,69,126,],[84,84,140,]),'parameter_keywords':([29,69,126,153,],[85,85,85,163,]),'parameter_infty':([29,69,126,153,],[86,86,86,86,]),'comparison_chain':([99,142,],[131,154,]),'interval':([123,],[135,]),'else_elif_body':([133,173,],[145,174,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sequence","S'",1,None,None,None),
  ('atomar -> NUMBER','atomar',1,'p_number','parser.py',39),
  ('atomar -> FLOAT','atomar',1,'p_float','parser.py',44),
  ('atomar -> IDENTIFIER','atomar',1,'p_var','parser.py',49),
  ('arithmetic_expression -> LPAREN expression RPAREN','arithmetic_expression',3,'p_paran','parser.py',56),
  ('expression -> arithmetic_expression','expression',1,'p_expression','parser.py',62),
  ('expression -> comparison','expression',1,'p_expression','parser.py',63),
  ('arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',72),
  ('arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',73),
  ('arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',74),
  ('arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',75),
  ('arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',76),
  ('arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',77),
  ('arithmetic_expression -> arithmetic_expression MOD arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',78),
  ('arithmetic_expression -> arithmetic_expression EXP arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',79),
  ('arithmetic_expression -> arithmetic_expression AND arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',80),
  ('arithmetic_expression -> arithmetic_expression OR arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',81),
  ('arithmetic_expression -> arithmetic_expression XOR arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',82),
  ('arithmetic_expression -> arithmetic_expression POWER arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',83),
  ('arithmetic_expression -> NOT arithmetic_expression','arithmetic_expression',2,'p_unary','parser.py',90),
  ('arithmetic_expression -> MINUS arithmetic_expression','arithmetic_expression',2,'p_unary','parser.py',91),
  ('arithmetic_expression -> PLUS arithmetic_expression','arithmetic_expression',2,'p_unary','parser.py',92),
  ('arithmetic_expression -> arithmetic_expression IMAG','arithmetic_expression',2,'p_complex','parser.py',97),
  ('arithmetic_expression -> atomar','arithmetic_expression',1,'p_arithmetic_end','parser.py',102),
  ('comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain','comparison',4,'p_expression_comparison_chain1','parser.py',111),
  ('comparison -> arithmetic_expression comparison_op arithmetic_expression','comparison',3,'p_expression_comparison_chain2','parser.py',118),
  ('comparison_chain -> comparison_op arithmetic_expression comparison_chain','comparison_chain',3,'p_comparison_chain1','parser.py',125),
  ('comparison_chain -> comparison_op arithmetic_expression','comparison_chain',2,'p_comparison_chain2','parser.py',132),
  ('comparison_op -> GREATER_THAN','comparison_op',1,'p_comparison_op','parser.py',138),
  ('comparison_op -> SMALLER_THAN','comparison_op',1,'p_comparison_op','parser.py',139),
  ('comparison_op -> UNEQUALS','comparison_op',1,'p_comparison_op','parser.py',140),
  ('comparison_op -> EQUALS','comparison_op',1,'p_comparison_op','parser.py',141),
  ('comparison_op -> SMALLER_EQUALS','comparison_op',1,'p_comparison_op','parser.py',142),
  ('comparison_op -> GREATER_EQUALS','comparison_op',1,'p_comparison_op','parser.py',143),
  ('expression -> IDENTIFIER ASSIGN expression','expression',3,'p_assignment1','parser.py',151),
  ('expression -> IDENTIFIER PLUSASSIGN expression','expression',3,'p_assignment2','parser.py',157),
  ('expression -> IDENTIFIER MINUSASSIGN expression','expression',3,'p_assignment2','parser.py',158),
  ('expression -> IDENTIFIER TIMESASSIGN expression','expression',3,'p_assignment2','parser.py',159),
  ('expression -> IDENTIFIER POWERASSIGN expression','expression',3,'p_assignment2','parser.py',160),
  ('expression -> IDENTIFIER DIVIDEASSIGN expression','expression',3,'p_assignment2','parser.py',161),
  ('expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression','expression',3,'p_assignment2','parser.py',162),
  ('expression -> IDENTIFIER DIVIDE_CEILASSIGN expression','expression',3,'p_assignment2','parser.py',163),
  ('expression -> IDENTIFIER GREATER_THANASSIGN expression','expression',3,'p_assignment2','parser.py',164),
  ('expression -> IDENTIFIER SMALLER_THANASSIGN expression','expression',3,'p_assignment2','parser.py',165),
  ('expression -> IDENTIFIER GREATER_EQUALSASSIGN expression','expression',3,'p_assignment2','parser.py',166),
  ('expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression','expression',3,'p_assignment2','parser.py',167),
  ('expression -> IDENTIFIER EQUALSASSIGN expression','expression',3,'p_assignment2','parser.py',168),
  ('expression -> IDENTIFIER UNEQUALSASSIGN expression','expression',3,'p_assignment2','parser.py',169),
  ('expression -> IDENTIFIER ANDASSIGN expression','expression',3,'p_assignment2','parser.py',170),
  ('expression -> IDENTIFIER ORASSIGN expression','expression',3,'p_assignment2','parser.py',171),
  ('expression -> IDENTIFIER XORASSIGN expression','expression',3,'p_assignment2','parser.py',172),
  ('expression -> IDENTIFIER EXPASSIGN expression','expression',3,'p_assignment2','parser.py',173),
  ('expression -> IDENTIFIER MODASSIGN expression','expression',3,'p_assignment2','parser.py',174),
  ('sequence -> BEGIN statements END','sequence',3,'p_sequence','parser.py',184),
  ('sequence -> BEGIN statements SEMICOLON END','sequence',4,'p_sequence','parser.py',185),
  ('statement -> expression','statement',1,'p_statement0','parser.py',195),
  ('statement -> sequence','statement',1,'p_statement0','parser.py',196),
  ('statement -> if_statement','statement',1,'p_statement0','parser.py',197),
  ('statement -> while_statement','statement',1,'p_statement0','parser.py',198),
  ('statement -> loop_statement','statement',1,'p_statement0','parser.py',199),
  ('statement -> function','statement',1,'p_statement0','parser.py',200),
  ('statements -> statements SEMICOLON statement','statements',3,'p_statements0','parser.py',207),
  ('statements -> statement','statements',1,'p_statements1','parser.py',214),
  ('if_statement -> IF expression THEN statements ENDCOND','if_statement',5,'p_if_statements1','parser.py',233),
  ('if_statement -> IF expression THEN statements else_elif_body ENDCOND','if_statement',6,'p_if_statements1','parser.py',234),
  ('else_elif_body -> ELIF IF expression THEN statements else_elif_body','else_elif_body',6,'p_if_statements2','parser.py',244),
  ('else_elif_body -> ELSE statements','else_elif_body',2,'p_if_statements2','parser.py',245),
  ('while_statement -> WHILE expression THEN statements ENDCOND','while_statement',5,'p_while_statement','parser.py',258),
  ('loop_statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND','loop_statement',7,'p_loop_statement','parser.py',268),
  ('interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS','interval',5,'p_interval','parser.py',275),
  ('interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS','interval',5,'p_interval','parser.py',276),
  ('interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS','interval',5,'p_interval','parser.py',277),
  ('interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS','interval',5,'p_interval','parser.py',278),
  ('expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression','expression',6,'p_lambda','parser.py',287),
  ('parameter -> parameter_list','parameter',1,'p_parameter0','parser.py',293),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter1','parser.py',300),
  ('parameter_list -> expression','parameter_list',1,'p_parameter1','parser.py',301),
  ('parameter_list -> parameter_keywords','parameter_list',1,'p_parameter1','parser.py',302),
  ('parameter_list -> <empty>','parameter_list',0,'p_parameter1','parser.py',303),
  ('parameter_keywords -> expression COLON expression COMMA parameter_keywords','parameter_keywords',5,'p_parameter2','parser.py',315),
  ('parameter_keywords -> expression COLON expression','parameter_keywords',3,'p_parameter2','parser.py',316),
  ('parameter_keywords -> parameter_infty','parameter_keywords',1,'p_parameter2','parser.py',317),
  ('parameter_infty -> expression DOTS','parameter_infty',2,'p_parameter3','parser.py',329),
  ('expression -> expression LPAREN parameter RPAREN','expression',4,'p_call','parser.py',335),
  ('function -> ECHO LPAREN expression RPAREN','function',4,'p_echo','parser.py',343),
  ('function -> LENGTH LPAREN expression RPAREN','function',4,'p_length','parser.py',348),
]
