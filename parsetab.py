
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'sequencerightASSIGNPLUSASSIGNMINUSASSIGNTIMESASSIGNPOWERASSIGNDIVIDE_CEILASSIGNDIVIDE_FLOORASSIGNDIVIDEASSIGNGREATER_THANASSIGNSMALLER_THANASSIGNUNEQUALSASSIGNEQUALSASSIGNSMALLER_EQUALSASSIGNGREATER_EQUALSASSIGNANDASSIGNORASSIGNXORASSIGNMODASSIGNEXPASSIGNleftLAMBDAleftORleftXORleftANDleftEQUALSUNEQUALSleftGREATER_THANSMALLER_THANSMALLER_EQUALSGREATER_EQUALSleftPLUSMINUSleftTIMESDIVIDEDIVIDE_CEILDIVIDE_FLOORMODrightPOWEREXPleftIMAGrightNOTUPLUSUMINUSAND ANDASSIGN ASSIGN BEGIN CLOSED_BRACKETS COLON COMMA DIVIDE DIVIDEASSIGN DIVIDE_CEIL DIVIDE_CEILASSIGN DIVIDE_FLOOR DIVIDE_FLOORASSIGN DOTS ELIF ELSE END ENDCOND EQUALS EQUALSASSIGN EXP EXPASSIGN FLOAT GREATER_EQUALS GREATER_EQUALSASSIGN GREATER_THAN GREATER_THANASSIGN IDENTIFIER IF IMAG LAMBDA LAMBDA_ARROW LOOP LOOPIN LOOPTHEN LPAREN MINUS MINUSASSIGN MOD MODASSIGN NOT NUMBER OPEN_BRACKETS OR ORASSIGN PLUS PLUSASSIGN POWER POWERASSIGN RPAREN SEMICOLON SMALLER_EQUALS SMALLER_EQUALSASSIGN SMALLER_THAN SMALLER_THANASSIGN THEN TIMES TIMESASSIGN UNEQUALS UNEQUALSASSIGN WHILE XOR XORASSIGNatomar : NUMBERatomar : FLOATatomar : IDENTIFIER\narithmetic_expression : LPAREN expression RPAREN\nexpression : arithmetic_expression\n| comparison\narithmetic_expression : arithmetic_expression PLUS arithmetic_expression\n| arithmetic_expression MINUS arithmetic_expression\n| arithmetic_expression TIMES arithmetic_expression\n| arithmetic_expression DIVIDE arithmetic_expression\n| arithmetic_expression DIVIDE_CEIL arithmetic_expression\n| arithmetic_expression DIVIDE_FLOOR arithmetic_expression\n| arithmetic_expression MOD arithmetic_expression\n| arithmetic_expression EXP arithmetic_expression\n| arithmetic_expression AND arithmetic_expression\n| arithmetic_expression OR arithmetic_expression\n| arithmetic_expression XOR arithmetic_expression\n| arithmetic_expression POWER arithmetic_expression\narithmetic_expression : NOT   arithmetic_expression\n| MINUS arithmetic_expression %prec UMINUS\n| PLUS  arithmetic_expression %prec UPLUSarithmetic_expression : arithmetic_expression IMAGarithmetic_expression : atomar\ncomparison : arithmetic_expression comparison_op arithmetic_expression comparison_chain\n\ncomparison : arithmetic_expression comparison_op arithmetic_expression\n\ncomparison_chain : comparison_op arithmetic_expression comparison_chain\n\ncomparison_chain : comparison_op arithmetic_expression\ncomparison_op : GREATER_THAN\n| SMALLER_THAN\n| UNEQUALS\n| EQUALS\n| SMALLER_EQUALS\n| GREATER_EQUALSexpression : IDENTIFIER ASSIGN expression\nexpression : IDENTIFIER PLUSASSIGN expression\n           | IDENTIFIER MINUSASSIGN expression\n           | IDENTIFIER TIMESASSIGN expression\n           | IDENTIFIER POWERASSIGN expression\n           | IDENTIFIER DIVIDEASSIGN expression\n           | IDENTIFIER DIVIDE_FLOORASSIGN expression\n           | IDENTIFIER DIVIDE_CEILASSIGN expression\n           | IDENTIFIER GREATER_THANASSIGN expression\n           | IDENTIFIER SMALLER_THANASSIGN expression\n           | IDENTIFIER GREATER_EQUALSASSIGN expression\n           | IDENTIFIER SMALLER_EQUALSASSIGN expression\n           | IDENTIFIER EQUALSASSIGN expression\n           | IDENTIFIER UNEQUALSASSIGN expression\n           | IDENTIFIER ANDASSIGN expression\n           | IDENTIFIER ORASSIGN expression\n           | IDENTIFIER XORASSIGN expression\n           | IDENTIFIER EXPASSIGN expression\n           | IDENTIFIER MODASSIGN expression\n\nsequence : BEGIN statements END\n         | BEGIN statements SEMICOLON END\n\nstatement : expression\n          | sequence\n          | if_statement\n          | while_statement\n          | loop_statement\n\nstatements : statement\n\nstatements : statements SEMICOLON statement\n\nstatements : if_statement statement\n           | while_statement statement\n           | loop_statement statement\n\nif_statement : IF expression THEN statements ENDCOND\n             | IF expression THEN statements else_elif_body ENDCOND\n\nelse_elif_body : ELIF IF expression THEN statements else_elif_body\n               | ELSE statements\n\nwhile_statement : WHILE expression THEN statements ENDCOND\n\nloop_statement : LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND\n\ninterval : OPEN_BRACKETS   expression COMMA expression CLOSED_BRACKETS\n         | CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS\n         | OPEN_BRACKETS   expression COMMA expression OPEN_BRACKETS\n         | CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS\nexpression : LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression %prec LAMBDA\nparameter : expression COMMA parameter\n          | expression\n          | parameter_keywords\n\nparameter_keywords : expression COLON expression COMMA parameter_keywords\n                   | expression COLON expression\n                   | parameter_infty\n\nparameter_infty : expression DOTS\n                |\nexpression : expression LPAREN expression RPAREN'
    
_lr_action_items = {'BEGIN':([0,2,5,6,7,25,84,85,136,138,140,141,142,149,159,164,],[2,2,2,2,2,2,2,2,-65,2,2,-69,2,-66,-70,2,]),'$end':([1,24,81,],[0,-53,-54,]),'IF':([2,5,6,7,25,84,85,136,138,139,140,141,142,149,159,164,],[10,10,10,10,10,10,10,-65,10,150,10,-69,10,-66,-70,10,]),'WHILE':([2,5,6,7,25,84,85,136,138,140,141,142,149,159,164,],[11,11,11,11,11,11,11,-65,11,11,-69,11,-66,-70,11,]),'LOOP':([2,5,6,7,25,84,85,136,138,140,141,142,149,159,164,],[12,12,12,12,12,12,12,-65,12,12,-69,12,-66,-70,12,]),'IDENTIFIER':([2,5,6,7,10,11,12,17,18,19,20,25,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,84,85,128,129,130,133,134,136,138,140,141,142,146,149,150,153,154,157,159,164,],[13,13,13,13,13,13,35,13,78,78,78,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,78,78,78,78,78,78,78,78,78,78,78,78,78,-28,-29,-30,-31,-32,-33,13,13,13,13,13,78,13,13,-65,13,13,-69,13,13,-66,13,13,13,13,-70,13,]),'LAMBDA':([2,5,6,7,10,11,17,25,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,75,84,85,128,129,133,134,136,138,140,141,142,146,149,150,153,154,157,159,164,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-65,16,16,-69,16,16,-66,16,16,16,16,-70,16,]),'LPAREN':([2,5,6,7,8,10,11,13,14,15,16,17,18,19,20,21,22,23,25,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,123,124,128,129,130,131,133,134,136,138,140,141,142,143,144,145,146,148,149,150,153,154,155,156,157,158,159,160,161,162,164,],[17,17,17,17,32,17,17,-3,-5,-6,75,17,17,17,17,-23,-1,-2,17,17,32,32,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-22,17,-28,-29,-30,-31,-32,-33,17,32,-21,-3,-20,-19,32,17,17,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,32,-4,-84,17,17,17,-24,17,17,-65,17,17,-69,17,32,32,-27,17,32,-66,17,17,17,-26,-75,17,32,-70,32,32,32,17,]),'NOT':([2,5,6,7,10,11,17,18,19,20,25,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,84,85,128,129,130,133,134,136,138,140,141,142,146,149,150,153,154,157,159,164,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-28,-29,-30,-31,-32,-33,20,20,20,20,20,20,20,20,-65,20,20,-69,20,20,-66,20,20,20,20,-70,20,]),'MINUS':([2,5,6,7,10,11,13,14,17,18,19,20,21,22,23,25,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,84,85,106,107,108,109,110,111,112,113,114,115,116,117,118,123,128,129,130,133,134,136,138,140,141,142,145,146,149,150,153,154,157,159,164,],[19,19,19,19,19,19,-3,56,19,19,19,19,-23,-1,-2,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-22,19,-28,-29,-30,-31,-32,-33,19,-21,-3,-20,-19,19,19,-7,-8,-9,-10,-11,-12,-13,-14,56,56,56,-18,56,-4,19,19,19,19,19,-65,19,19,-69,19,56,19,-66,19,19,19,19,-70,19,]),'PLUS':([2,5,6,7,10,11,13,14,17,18,19,20,21,22,23,25,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,84,85,106,107,108,109,110,111,112,113,114,115,116,117,118,123,128,129,130,133,134,136,138,140,141,142,145,146,149,150,153,154,157,159,164,],[18,18,18,18,18,18,-3,55,18,18,18,18,-23,-1,-2,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-22,18,-28,-29,-30,-31,-32,-33,18,-21,-3,-20,-19,18,18,-7,-8,-9,-10,-11,-12,-13,-14,55,55,55,-18,55,-4,18,18,18,18,18,-65,18,18,-69,18,55,18,-66,18,18,18,18,-70,18,]),'NUMBER':([2,5,6,7,10,11,17,18,19,20,25,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,84,85,128,129,130,133,134,136,138,140,141,142,146,149,150,153,154,157,159,164,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-28,-29,-30,-31,-32,-33,22,22,22,22,22,22,22,22,-65,22,22,-69,22,22,-66,22,22,22,22,-70,22,]),'FLOAT':([2,5,6,7,10,11,17,18,19,20,25,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,84,85,128,129,130,133,134,136,138,140,141,142,146,149,150,153,154,157,159,164,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-28,-29,-30,-31,-32,-33,23,23,23,23,23,23,23,23,-65,23,23,-69,23,23,-66,23,23,23,23,-70,23,]),'END':([3,4,5,6,7,8,9,13,14,15,21,22,23,24,25,26,27,28,29,30,31,67,77,78,79,80,81,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,124,131,136,141,145,149,155,156,159,],[24,-60,-57,-58,-59,-55,-56,-3,-5,-6,-23,-1,-2,-53,81,-57,-62,-58,-59,-63,-64,-22,-21,-3,-20,-19,-54,-61,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-4,-84,-24,-65,-69,-27,-66,-26,-75,-70,]),'SEMICOLON':([3,4,5,6,7,8,9,13,14,15,21,22,23,24,26,27,28,29,30,31,67,77,78,79,80,81,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,124,125,126,131,136,141,145,149,151,152,155,156,159,169,],[25,-60,-57,-58,-59,-55,-56,-3,-5,-6,-23,-1,-2,-53,-57,-62,-58,-59,-63,-64,-22,-21,-3,-20,-19,-54,-61,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-4,-84,138,138,-24,-65,-69,-27,-66,138,138,-26,-75,-70,138,]),'ENDCOND':([4,5,6,7,8,9,13,14,15,21,22,23,24,26,27,28,29,30,31,67,77,78,79,80,81,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,124,125,126,131,136,137,141,145,149,151,152,155,156,159,170,],[-60,-57,-58,-59,-55,-56,-3,-5,-6,-23,-1,-2,-53,-57,-62,-58,-59,-63,-64,-22,-21,-3,-20,-19,-54,-61,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-4,-84,136,141,-24,-65,149,-69,-27,-66,-68,159,-26,-75,-70,-67,]),'ELIF':([4,5,6,7,8,9,13,14,15,21,22,23,24,26,27,28,29,30,31,67,77,78,79,80,81,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,124,125,131,136,141,145,149,155,156,159,169,],[-60,-57,-58,-59,-55,-56,-3,-5,-6,-23,-1,-2,-53,-57,-62,-58,-59,-63,-64,-22,-21,-3,-20,-19,-54,-61,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-4,-84,139,-24,-65,-69,-27,-66,-26,-75,-70,139,]),'ELSE':([4,5,6,7,8,9,13,14,15,21,22,23,24,26,27,28,29,30,31,67,77,78,79,80,81,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,124,125,131,136,141,145,149,155,156,159,169,],[-60,-57,-58,-59,-55,-56,-3,-5,-6,-23,-1,-2,-53,-57,-62,-58,-59,-63,-64,-22,-21,-3,-20,-19,-54,-61,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-4,-84,140,-24,-65,-69,-27,-66,-26,-75,-70,140,]),'ASSIGN':([13,],[36,]),'PLUSASSIGN':([13,],[37,]),'MINUSASSIGN':([13,],[38,]),'TIMESASSIGN':([13,],[39,]),'POWERASSIGN':([13,],[40,]),'DIVIDEASSIGN':([13,],[41,]),'DIVIDE_FLOORASSIGN':([13,],[42,]),'DIVIDE_CEILASSIGN':([13,],[43,]),'GREATER_THANASSIGN':([13,],[44,]),'SMALLER_THANASSIGN':([13,],[45,]),'GREATER_EQUALSASSIGN':([13,],[46,]),'SMALLER_EQUALSASSIGN':([13,],[47,]),'EQUALSASSIGN':([13,],[48,]),'UNEQUALSASSIGN':([13,],[49,]),'ANDASSIGN':([13,],[50,]),'ORASSIGN':([13,],[51,]),'XORASSIGN':([13,],[52,]),'EXPASSIGN':([13,],[53,]),'MODASSIGN':([13,],[54,]),'TIMES':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,57,-23,-1,-2,-22,-21,-3,-20,-19,57,57,-9,-10,-11,-12,-13,-14,57,57,57,-18,57,-4,57,]),'DIVIDE':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,58,-23,-1,-2,-22,-21,-3,-20,-19,58,58,-9,-10,-11,-12,-13,-14,58,58,58,-18,58,-4,58,]),'DIVIDE_CEIL':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,59,-23,-1,-2,-22,-21,-3,-20,-19,59,59,-9,-10,-11,-12,-13,-14,59,59,59,-18,59,-4,59,]),'DIVIDE_FLOOR':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,60,-23,-1,-2,-22,-21,-3,-20,-19,60,60,-9,-10,-11,-12,-13,-14,60,60,60,-18,60,-4,60,]),'MOD':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,61,-23,-1,-2,-22,-21,-3,-20,-19,61,61,-9,-10,-11,-12,-13,-14,61,61,61,-18,61,-4,61,]),'EXP':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,62,-23,-1,-2,-22,-21,-3,-20,-19,62,62,62,62,62,62,62,62,62,62,62,62,62,-4,62,]),'AND':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,63,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,63,63,-18,63,-4,63,]),'OR':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,64,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,64,-4,64,]),'XOR':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,65,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,65,-17,-18,65,-4,65,]),'POWER':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,66,-23,-1,-2,-22,-21,-3,-20,-19,66,66,66,66,66,66,66,66,66,66,66,66,66,-4,66,]),'IMAG':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,67,-23,-1,-2,-22,-21,-3,-20,-19,67,67,67,67,67,67,67,67,67,67,67,67,67,-4,67,]),'GREATER_THAN':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,69,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,69,-4,69,]),'SMALLER_THAN':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,70,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,70,-4,70,]),'UNEQUALS':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,71,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,71,-4,71,]),'EQUALS':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,72,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,72,-4,72,]),'SMALLER_EQUALS':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,73,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,73,-4,73,]),'GREATER_EQUALS':([13,14,21,22,23,67,77,78,79,80,106,107,108,109,110,111,112,113,114,115,116,117,118,123,145,],[-3,74,-23,-1,-2,-22,-21,-3,-20,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,74,-4,74,]),'THEN':([13,14,15,21,22,23,33,34,67,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,124,131,145,155,156,158,],[-3,-5,-6,-23,-1,-2,84,85,-22,-21,-3,-20,-19,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-4,-84,-24,-27,-26,-75,164,]),'RPAREN':([13,14,15,21,22,23,67,75,76,77,78,79,80,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,131,133,135,145,147,148,155,156,157,163,],[-3,-5,-6,-23,-1,-2,-22,-83,123,-21,-3,-20,-19,124,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,132,-77,-78,-81,-4,-84,-24,-83,-82,-27,-76,-80,-26,-75,-83,-79,]),'COMMA':([13,14,15,21,22,23,67,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,123,124,131,143,144,145,148,155,156,],[-3,-5,-6,-23,-1,-2,-22,-21,-3,-20,-19,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,133,-4,-84,-24,153,154,-27,157,-26,-75,]),'COLON':([13,14,15,21,22,23,67,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,123,124,131,145,155,156,162,],[-3,-5,-6,-23,-1,-2,-22,-21,-3,-20,-19,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,134,-4,-84,-24,-27,-26,-75,134,]),'DOTS':([13,14,15,21,22,23,67,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,123,124,131,145,155,156,162,],[-3,-5,-6,-23,-1,-2,-22,-21,-3,-20,-19,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,135,-4,-84,-24,-27,-26,-75,135,]),'CLOSED_BRACKETS':([13,14,15,21,22,23,67,77,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,124,131,145,155,156,160,161,],[-3,-5,-6,-23,-1,-2,-22,-21,-3,-20,-19,129,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-4,-84,-24,-27,-26,-75,166,167,]),'OPEN_BRACKETS':([13,14,15,21,22,23,67,77,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,124,131,145,155,156,160,161,],[-3,-5,-6,-23,-1,-2,-22,-21,-3,-20,-19,128,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-4,-84,-24,-27,-26,-75,165,168,]),'LOOPIN':([35,],[86,]),'LOOPTHEN':([127,165,166,167,168,],[142,-73,-71,-72,-74,]),'LAMBDA_ARROW':([132,],[146,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sequence':([0,2,5,6,7,25,84,85,138,140,142,164,],[1,9,9,9,9,9,9,9,9,9,9,9,]),'statements':([2,84,85,140,142,164,],[3,125,126,151,152,169,]),'statement':([2,5,6,7,25,84,85,138,140,142,164,],[4,27,30,31,82,4,4,82,4,4,4,]),'if_statement':([2,5,6,7,25,84,85,138,140,142,164,],[5,26,26,26,26,5,5,26,5,5,5,]),'while_statement':([2,5,6,7,25,84,85,138,140,142,164,],[6,28,28,28,28,6,6,28,6,6,6,]),'loop_statement':([2,5,6,7,25,84,85,138,140,142,164,],[7,29,29,29,29,7,7,29,7,7,7,]),'expression':([2,5,6,7,10,11,17,25,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,75,84,85,128,129,133,134,138,140,142,146,150,153,154,157,164,],[8,8,8,8,33,34,76,8,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,120,8,8,143,144,120,148,8,8,8,156,158,160,161,162,8,]),'arithmetic_expression':([2,5,6,7,10,11,17,18,19,20,25,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,75,84,85,128,129,130,133,134,138,140,142,146,150,153,154,157,164,],[14,14,14,14,14,14,14,77,79,80,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,106,107,108,109,110,111,112,113,114,115,116,117,118,14,14,14,14,14,145,14,14,14,14,14,14,14,14,14,14,14,]),'comparison':([2,5,6,7,10,11,17,25,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,75,84,85,128,129,133,134,138,140,142,146,150,153,154,157,164,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'atomar':([2,5,6,7,10,11,17,18,19,20,25,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,75,84,85,128,129,130,133,134,138,140,142,146,150,153,154,157,164,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'comparison_op':([14,118,145,],[68,130,130,]),'parameter':([75,133,],[119,147,]),'parameter_keywords':([75,133,157,],[121,121,163,]),'parameter_infty':([75,133,157,],[122,122,122,]),'interval':([86,],[127,]),'comparison_chain':([118,145,],[131,155,]),'else_elif_body':([125,169,],[137,170,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sequence","S'",1,None,None,None),
  ('atomar -> NUMBER','atomar',1,'p_number','parser.py',39),
  ('atomar -> FLOAT','atomar',1,'p_float','parser.py',44),
  ('atomar -> IDENTIFIER','atomar',1,'p_var','parser.py',49),
  ('arithmetic_expression -> LPAREN expression RPAREN','arithmetic_expression',3,'p_paran2','parser.py',63),
  ('expression -> arithmetic_expression','expression',1,'p_expression','parser.py',69),
  ('expression -> comparison','expression',1,'p_expression','parser.py',70),
  ('arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',79),
  ('arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',80),
  ('arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',81),
  ('arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',82),
  ('arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',83),
  ('arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',84),
  ('arithmetic_expression -> arithmetic_expression MOD arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',85),
  ('arithmetic_expression -> arithmetic_expression EXP arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',86),
  ('arithmetic_expression -> arithmetic_expression AND arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',87),
  ('arithmetic_expression -> arithmetic_expression OR arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',88),
  ('arithmetic_expression -> arithmetic_expression XOR arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',89),
  ('arithmetic_expression -> arithmetic_expression POWER arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',90),
  ('arithmetic_expression -> NOT arithmetic_expression','arithmetic_expression',2,'p_unary','parser.py',97),
  ('arithmetic_expression -> MINUS arithmetic_expression','arithmetic_expression',2,'p_unary','parser.py',98),
  ('arithmetic_expression -> PLUS arithmetic_expression','arithmetic_expression',2,'p_unary','parser.py',99),
  ('arithmetic_expression -> arithmetic_expression IMAG','arithmetic_expression',2,'p_complex','parser.py',104),
  ('arithmetic_expression -> atomar','arithmetic_expression',1,'p_arithmetic_end','parser.py',109),
  ('comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain','comparison',4,'p_expression_comparison_chain1','parser.py',118),
  ('comparison -> arithmetic_expression comparison_op arithmetic_expression','comparison',3,'p_expression_comparison_chain2','parser.py',125),
  ('comparison_chain -> comparison_op arithmetic_expression comparison_chain','comparison_chain',3,'p_comparison_chain1','parser.py',132),
  ('comparison_chain -> comparison_op arithmetic_expression','comparison_chain',2,'p_comparison_chain2','parser.py',139),
  ('comparison_op -> GREATER_THAN','comparison_op',1,'p_comparison_op','parser.py',145),
  ('comparison_op -> SMALLER_THAN','comparison_op',1,'p_comparison_op','parser.py',146),
  ('comparison_op -> UNEQUALS','comparison_op',1,'p_comparison_op','parser.py',147),
  ('comparison_op -> EQUALS','comparison_op',1,'p_comparison_op','parser.py',148),
  ('comparison_op -> SMALLER_EQUALS','comparison_op',1,'p_comparison_op','parser.py',149),
  ('comparison_op -> GREATER_EQUALS','comparison_op',1,'p_comparison_op','parser.py',150),
  ('expression -> IDENTIFIER ASSIGN expression','expression',3,'p_assignment1','parser.py',158),
  ('expression -> IDENTIFIER PLUSASSIGN expression','expression',3,'p_assignment2','parser.py',164),
  ('expression -> IDENTIFIER MINUSASSIGN expression','expression',3,'p_assignment2','parser.py',165),
  ('expression -> IDENTIFIER TIMESASSIGN expression','expression',3,'p_assignment2','parser.py',166),
  ('expression -> IDENTIFIER POWERASSIGN expression','expression',3,'p_assignment2','parser.py',167),
  ('expression -> IDENTIFIER DIVIDEASSIGN expression','expression',3,'p_assignment2','parser.py',168),
  ('expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression','expression',3,'p_assignment2','parser.py',169),
  ('expression -> IDENTIFIER DIVIDE_CEILASSIGN expression','expression',3,'p_assignment2','parser.py',170),
  ('expression -> IDENTIFIER GREATER_THANASSIGN expression','expression',3,'p_assignment2','parser.py',171),
  ('expression -> IDENTIFIER SMALLER_THANASSIGN expression','expression',3,'p_assignment2','parser.py',172),
  ('expression -> IDENTIFIER GREATER_EQUALSASSIGN expression','expression',3,'p_assignment2','parser.py',173),
  ('expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression','expression',3,'p_assignment2','parser.py',174),
  ('expression -> IDENTIFIER EQUALSASSIGN expression','expression',3,'p_assignment2','parser.py',175),
  ('expression -> IDENTIFIER UNEQUALSASSIGN expression','expression',3,'p_assignment2','parser.py',176),
  ('expression -> IDENTIFIER ANDASSIGN expression','expression',3,'p_assignment2','parser.py',177),
  ('expression -> IDENTIFIER ORASSIGN expression','expression',3,'p_assignment2','parser.py',178),
  ('expression -> IDENTIFIER XORASSIGN expression','expression',3,'p_assignment2','parser.py',179),
  ('expression -> IDENTIFIER EXPASSIGN expression','expression',3,'p_assignment2','parser.py',180),
  ('expression -> IDENTIFIER MODASSIGN expression','expression',3,'p_assignment2','parser.py',181),
  ('sequence -> BEGIN statements END','sequence',3,'p_sequence','parser.py',191),
  ('sequence -> BEGIN statements SEMICOLON END','sequence',4,'p_sequence','parser.py',192),
  ('statement -> expression','statement',1,'p_statement0','parser.py',202),
  ('statement -> sequence','statement',1,'p_statement0','parser.py',203),
  ('statement -> if_statement','statement',1,'p_statement0','parser.py',204),
  ('statement -> while_statement','statement',1,'p_statement0','parser.py',205),
  ('statement -> loop_statement','statement',1,'p_statement0','parser.py',206),
  ('statements -> statement','statements',1,'p_statements1','parser.py',213),
  ('statements -> statements SEMICOLON statement','statements',3,'p_statements2','parser.py',220),
  ('statements -> if_statement statement','statements',2,'p_statements3','parser.py',227),
  ('statements -> while_statement statement','statements',2,'p_statements3','parser.py',228),
  ('statements -> loop_statement statement','statements',2,'p_statements3','parser.py',229),
  ('if_statement -> IF expression THEN statements ENDCOND','if_statement',5,'p_if_statements1','parser.py',239),
  ('if_statement -> IF expression THEN statements else_elif_body ENDCOND','if_statement',6,'p_if_statements1','parser.py',240),
  ('else_elif_body -> ELIF IF expression THEN statements else_elif_body','else_elif_body',6,'p_if_statements2','parser.py',250),
  ('else_elif_body -> ELSE statements','else_elif_body',2,'p_if_statements2','parser.py',251),
  ('while_statement -> WHILE expression THEN statements ENDCOND','while_statement',5,'p_while_statement','parser.py',264),
  ('loop_statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND','loop_statement',7,'p_loop_statement','parser.py',274),
  ('interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS','interval',5,'p_interval','parser.py',281),
  ('interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS','interval',5,'p_interval','parser.py',282),
  ('interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS','interval',5,'p_interval','parser.py',283),
  ('interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS','interval',5,'p_interval','parser.py',284),
  ('expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression','expression',6,'p_lambda','parser.py',293),
  ('parameter -> expression COMMA parameter','parameter',3,'p_parameter1','parser.py',300),
  ('parameter -> expression','parameter',1,'p_parameter1','parser.py',301),
  ('parameter -> parameter_keywords','parameter',1,'p_parameter1','parser.py',302),
  ('parameter_keywords -> expression COLON expression COMMA parameter_keywords','parameter_keywords',5,'p_parameter2','parser.py',313),
  ('parameter_keywords -> expression COLON expression','parameter_keywords',3,'p_parameter2','parser.py',314),
  ('parameter_keywords -> parameter_infty','parameter_keywords',1,'p_parameter2','parser.py',315),
  ('parameter_infty -> expression DOTS','parameter_infty',2,'p_parameter3','parser.py',328),
  ('parameter_infty -> <empty>','parameter_infty',0,'p_parameter3','parser.py',329),
  ('expression -> expression LPAREN expression RPAREN','expression',4,'p_call','parser.py',339),
]
