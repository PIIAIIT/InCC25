Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> sequence
Rule 1     atomar -> NUMBER
Rule 2     atomar -> FLOAT
Rule 3     atomar -> STRING
Rule 4     atomar -> IDENTIFIER
Rule 5     atomar -> LPAREN expression RPAREN
Rule 6     expression -> expression PLUS expression
Rule 7     expression -> expression MINUS expression
Rule 8     expression -> expression TIMES expression
Rule 9     expression -> expression DIVIDE expression
Rule 10    expression -> expression DIVIDE_CEIL expression
Rule 11    expression -> expression DIVIDE_FLOOR expression
Rule 12    expression -> expression MOD expression
Rule 13    expression -> expression EXP expression
Rule 14    expression -> expression AND expression
Rule 15    expression -> expression OR expression
Rule 16    expression -> expression XOR expression
Rule 17    expression -> expression POWER expression
Rule 18    expression -> NOT expression
Rule 19    expression -> MINUS expression
Rule 20    expression -> PLUS expression
Rule 21    expression -> expression IMAG
Rule 22    expression -> atomar
Rule 23    comparison -> expression comparison_op expression
Rule 24    comparison -> comparison comparison_op expression
Rule 25    expression -> comparison
Rule 26    comparison_op -> GREATER_THAN
Rule 27    comparison_op -> SMALLER_THAN
Rule 28    comparison_op -> UNEQUALS
Rule 29    comparison_op -> EQUALS
Rule 30    comparison_op -> SMALLER_EQUALS
Rule 31    comparison_op -> GREATER_EQUALS
Rule 32    expression -> IDENTIFIER ASSIGN expression
Rule 33    expression -> IDENTIFIER PLUS_ASSIGN expression
Rule 34    expression -> IDENTIFIER MINUS_ASSIGN expression
Rule 35    expression -> IDENTIFIER TIMES_ASSIGN expression
Rule 36    expression -> IDENTIFIER POWER_ASSIGN expression
Rule 37    expression -> IDENTIFIER DIVIDE_ASSIGN expression
Rule 38    expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
Rule 39    expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression
Rule 40    expression -> IDENTIFIER GREATER_THAN_ASSIGN expression
Rule 41    expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression
Rule 42    expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression
Rule 43    expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression
Rule 44    expression -> IDENTIFIER EQUALS_ASSIGN expression
Rule 45    expression -> IDENTIFIER UNEQUALS_ASSIGN expression
Rule 46    expression -> IDENTIFIER AND_ASSIGN expression
Rule 47    expression -> IDENTIFIER OR_ASSIGN expression
Rule 48    expression -> IDENTIFIER XOR_ASSIGN expression
Rule 49    expression -> IDENTIFIER EXP_ASSIGN expression
Rule 50    expression -> IDENTIFIER MOD_ASSIGN expression
Rule 51    sequence -> BEGIN statements END
Rule 52    sequence -> BEGIN statements SEMICOLON END
Rule 53    expression -> sequence
Rule 54    statement -> expression
Rule 55    statements -> statements SEMICOLON statement
Rule 56    statements -> statement
Rule 57    if_statement -> IF expression THEN statements DOT
Rule 58    if_statement -> IF expression THEN statements else_elif_body DOT
Rule 59    else_elif_body -> ELIF IF expression THEN statements else_elif_body
Rule 60    else_elif_body -> ELSE statements
Rule 61    expression -> if_statement
Rule 62    while_statement -> WHILE expression THEN statements DOT
Rule 63    expression -> while_statement
Rule 64    loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
Rule 65    interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS
Rule 66    interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS
Rule 67    interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS
Rule 68    interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS
Rule 69    expression -> loop_statement
Rule 70    lambda -> LAMBDA parameter LAMBDA_ARROW expression
Rule 71    expression -> lambda
Rule 72    parameter -> LPAREN parameter_pos RPAREN
Rule 73    parameter -> IDENTIFIER
Rule 74    parameter -> empty
Rule 75    parameter_pos -> parameter_pos_list
Rule 76    parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list
Rule 77    parameter_pos_list -> IDENTIFIER
Rule 78    parameter_pos_list -> parameter_keywords
Rule 79    parameter_keywords -> parameter_kw_list
Rule 80    parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list
Rule 81    parameter_kw_list -> IDENTIFIER COLON expression
Rule 82    parameter_kw_list -> parameter_infty
Rule 83    parameter_infty -> IDENTIFIER DOTS
Rule 84    parameter_expr -> parameter_pos_expr
Rule 85    parameter_expr -> empty
Rule 86    parameter_pos_expr -> expression COMMA parameter_pos_expr
Rule 87    parameter_pos_expr -> expression
Rule 88    parameter_pos_expr -> parameter_keywords_expr
Rule 89    parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr
Rule 90    parameter_keywords_expr -> expression COLON expression
Rule 91    empty -> <empty>
Rule 92    expression -> expression LPAREN parameter_expr RPAREN
Rule 93    expression -> LET IDENTIFIER EQUALS expression IN expression DOT
Rule 94    expression -> ECHO LPAREN param_list RPAREN
Rule 95    expression -> LENGTH LPAREN param_list RPAREN
Rule 96    expression -> LIST LPAREN param_list RPAREN
Rule 97    param_list -> expression COMMA param_list
Rule 98    param_list -> expression
Rule 99    expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS
Rule 100   expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
Rule 101   expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS
Rule 102   expression -> NULL
Rule 103   expression -> expression CONS expression
Rule 104   expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS
Rule 105   expression -> OPEN_BRACKETS empty CLOSED_BRACKETS

Terminals, with rules where they appear

AND                  : 14
AND_ASSIGN           : 46
ASSIGN               : 32
BEGIN                : 51 52
CLOSED_BRACKETS      : 65 66 66 68 99 100 101 104 105
COLON                : 80 81 89 90
COMMA                : 65 66 67 68 76 80 86 89 97
CONS                 : 103
DIVIDE               : 9
DIVIDE_ASSIGN        : 37
DIVIDE_CEIL          : 10
DIVIDE_CEIL_ASSIGN   : 39
DIVIDE_FLOOR         : 11
DIVIDE_FLOOR_ASSIGN  : 38
DOT                  : 57 58 62 64 93 99
DOTS                 : 83
ECHO                 : 94
ELIF                 : 59
ELSE                 : 60
END                  : 51 52
EQUALS               : 29 93
EQUALS_ASSIGN        : 44
EXP                  : 13
EXP_ASSIGN           : 49
FLOAT                : 2
GREATER_EQUALS       : 31
GREATER_EQUALS_ASSIGN : 42
GREATER_THAN         : 26
GREATER_THAN_ASSIGN  : 40
IDENTIFIER           : 4 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 64 73 76 77 80 81 83 93
IF                   : 57 58 59
IMAG                 : 21
IN                   : 64 93
LAMBDA               : 70
LAMBDA_ARROW         : 70
LENGTH               : 95
LET                  : 93
LIST                 : 96
LOOP                 : 64
LOOPTHEN             : 64
LPAREN               : 5 72 92 94 95 96
MINUS                : 7 19
MINUS_ASSIGN         : 34
MOD                  : 12
MOD_ASSIGN           : 50
NOT                  : 18
NULL                 : 102
NUMBER               : 1
OPEN_BRACKETS        : 65 67 67 68 99 100 101 104 105
OR                   : 15
OR_ASSIGN            : 47
PLUS                 : 6 20
PLUS_ASSIGN          : 33
POWER                : 17
POWER_ASSIGN         : 36
RPAREN               : 5 72 92 94 95 96
SEMICOLON            : 52 55
SMALLER_EQUALS       : 30
SMALLER_EQUALS_ASSIGN : 43
SMALLER_THAN         : 27
SMALLER_THAN_ASSIGN  : 41
STRING               : 3
THEN                 : 57 58 59 62
TIMES                : 8 100
TIMES_ASSIGN         : 35
UNEQUALS             : 28
UNEQUALS_ASSIGN      : 45
WHILE                : 62
XOR                  : 16
XOR_ASSIGN           : 48
error                : 

Nonterminals, with rules where they appear

atomar               : 22
comparison           : 24 25
comparison_op        : 23 24
else_elif_body       : 58 59
empty                : 74 85 105
expression           : 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 19 20 21 23 23 24 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 54 57 58 59 62 65 65 66 66 67 67 68 68 70 80 81 86 87 89 89 90 90 92 93 93 97 98 99 100 101 101 103 103
if_statement         : 61
interval             : 64
lambda               : 71
loop_statement       : 69
param_list           : 94 95 96 97 104
parameter            : 70
parameter_expr       : 92
parameter_infty      : 82
parameter_keywords   : 78
parameter_keywords_expr : 88 89
parameter_kw_list    : 79 80
parameter_pos        : 72
parameter_pos_expr   : 84 86
parameter_pos_list   : 75 76
sequence             : 53 0
statement            : 55 56
statements           : 51 52 55 57 58 59 60 62 64
while_statement      : 63

Parsing method: LALR

state 0

    (0) S' -> . sequence
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END

    BEGIN           shift and go to state 2

    sequence                       shift and go to state 1

state 1

    (0) S' -> sequence .



state 2

    (51) sequence -> BEGIN . statements END
    (52) sequence -> BEGIN . statements SEMICOLON END
    (55) statements -> . statements SEMICOLON statement
    (56) statements -> . statement
    (54) statement -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    statements                     shift and go to state 3
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 3

    (51) sequence -> BEGIN statements . END
    (52) sequence -> BEGIN statements . SEMICOLON END
    (55) statements -> statements . SEMICOLON statement

    END             shift and go to state 31
    SEMICOLON       shift and go to state 32


state 4

    (56) statements -> statement .

    END             reduce using rule 56 (statements -> statement .)
    SEMICOLON       reduce using rule 56 (statements -> statement .)
    DOT             reduce using rule 56 (statements -> statement .)
    ELIF            reduce using rule 56 (statements -> statement .)
    ELSE            reduce using rule 56 (statements -> statement .)


state 5

    (54) statement -> expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    END             reduce using rule 54 (statement -> expression .)
    SEMICOLON       reduce using rule 54 (statement -> expression .)
    DOT             reduce using rule 54 (statement -> expression .)
    ELIF            reduce using rule 54 (statement -> expression .)
    ELSE            reduce using rule 54 (statement -> expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 6

    (20) expression -> PLUS . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 56
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 7

    (19) expression -> MINUS . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 57
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 8

    (18) expression -> NOT . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 58
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 9

    (22) expression -> atomar .

    PLUS            reduce using rule 22 (expression -> atomar .)
    MINUS           reduce using rule 22 (expression -> atomar .)
    TIMES           reduce using rule 22 (expression -> atomar .)
    DIVIDE          reduce using rule 22 (expression -> atomar .)
    DIVIDE_CEIL     reduce using rule 22 (expression -> atomar .)
    DIVIDE_FLOOR    reduce using rule 22 (expression -> atomar .)
    MOD             reduce using rule 22 (expression -> atomar .)
    EXP             reduce using rule 22 (expression -> atomar .)
    AND             reduce using rule 22 (expression -> atomar .)
    OR              reduce using rule 22 (expression -> atomar .)
    XOR             reduce using rule 22 (expression -> atomar .)
    POWER           reduce using rule 22 (expression -> atomar .)
    IMAG            reduce using rule 22 (expression -> atomar .)
    LPAREN          reduce using rule 22 (expression -> atomar .)
    OPEN_BRACKETS   reduce using rule 22 (expression -> atomar .)
    CONS            reduce using rule 22 (expression -> atomar .)
    GREATER_THAN    reduce using rule 22 (expression -> atomar .)
    SMALLER_THAN    reduce using rule 22 (expression -> atomar .)
    UNEQUALS        reduce using rule 22 (expression -> atomar .)
    EQUALS          reduce using rule 22 (expression -> atomar .)
    SMALLER_EQUALS  reduce using rule 22 (expression -> atomar .)
    GREATER_EQUALS  reduce using rule 22 (expression -> atomar .)
    END             reduce using rule 22 (expression -> atomar .)
    SEMICOLON       reduce using rule 22 (expression -> atomar .)
    RPAREN          reduce using rule 22 (expression -> atomar .)
    COMMA           reduce using rule 22 (expression -> atomar .)
    CLOSED_BRACKETS reduce using rule 22 (expression -> atomar .)
    THEN            reduce using rule 22 (expression -> atomar .)
    COLON           reduce using rule 22 (expression -> atomar .)
    IN              reduce using rule 22 (expression -> atomar .)
    DOT             reduce using rule 22 (expression -> atomar .)
    ELIF            reduce using rule 22 (expression -> atomar .)
    ELSE            reduce using rule 22 (expression -> atomar .)


state 10

    (25) expression -> comparison .
    (24) comparison -> comparison . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 25 (expression -> comparison .)
    MINUS           reduce using rule 25 (expression -> comparison .)
    TIMES           reduce using rule 25 (expression -> comparison .)
    DIVIDE          reduce using rule 25 (expression -> comparison .)
    DIVIDE_CEIL     reduce using rule 25 (expression -> comparison .)
    DIVIDE_FLOOR    reduce using rule 25 (expression -> comparison .)
    MOD             reduce using rule 25 (expression -> comparison .)
    EXP             reduce using rule 25 (expression -> comparison .)
    AND             reduce using rule 25 (expression -> comparison .)
    OR              reduce using rule 25 (expression -> comparison .)
    XOR             reduce using rule 25 (expression -> comparison .)
    POWER           reduce using rule 25 (expression -> comparison .)
    IMAG            reduce using rule 25 (expression -> comparison .)
    LPAREN          reduce using rule 25 (expression -> comparison .)
    OPEN_BRACKETS   reduce using rule 25 (expression -> comparison .)
    CONS            reduce using rule 25 (expression -> comparison .)
    END             reduce using rule 25 (expression -> comparison .)
    SEMICOLON       reduce using rule 25 (expression -> comparison .)
    RPAREN          reduce using rule 25 (expression -> comparison .)
    COMMA           reduce using rule 25 (expression -> comparison .)
    CLOSED_BRACKETS reduce using rule 25 (expression -> comparison .)
    THEN            reduce using rule 25 (expression -> comparison .)
    COLON           reduce using rule 25 (expression -> comparison .)
    IN              reduce using rule 25 (expression -> comparison .)
    DOT             reduce using rule 25 (expression -> comparison .)
    ELIF            reduce using rule 25 (expression -> comparison .)
    ELSE            reduce using rule 25 (expression -> comparison .)
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! GREATER_THAN    [ reduce using rule 25 (expression -> comparison .) ]
  ! SMALLER_THAN    [ reduce using rule 25 (expression -> comparison .) ]
  ! UNEQUALS        [ reduce using rule 25 (expression -> comparison .) ]
  ! EQUALS          [ reduce using rule 25 (expression -> comparison .) ]
  ! SMALLER_EQUALS  [ reduce using rule 25 (expression -> comparison .) ]
  ! GREATER_EQUALS  [ reduce using rule 25 (expression -> comparison .) ]

    comparison_op                  shift and go to state 59

state 11

    (32) expression -> IDENTIFIER . ASSIGN expression
    (33) expression -> IDENTIFIER . PLUS_ASSIGN expression
    (34) expression -> IDENTIFIER . MINUS_ASSIGN expression
    (35) expression -> IDENTIFIER . TIMES_ASSIGN expression
    (36) expression -> IDENTIFIER . POWER_ASSIGN expression
    (37) expression -> IDENTIFIER . DIVIDE_ASSIGN expression
    (38) expression -> IDENTIFIER . DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> IDENTIFIER . DIVIDE_CEIL_ASSIGN expression
    (40) expression -> IDENTIFIER . GREATER_THAN_ASSIGN expression
    (41) expression -> IDENTIFIER . SMALLER_THAN_ASSIGN expression
    (42) expression -> IDENTIFIER . GREATER_EQUALS_ASSIGN expression
    (43) expression -> IDENTIFIER . SMALLER_EQUALS_ASSIGN expression
    (44) expression -> IDENTIFIER . EQUALS_ASSIGN expression
    (45) expression -> IDENTIFIER . UNEQUALS_ASSIGN expression
    (46) expression -> IDENTIFIER . AND_ASSIGN expression
    (47) expression -> IDENTIFIER . OR_ASSIGN expression
    (48) expression -> IDENTIFIER . XOR_ASSIGN expression
    (49) expression -> IDENTIFIER . EXP_ASSIGN expression
    (50) expression -> IDENTIFIER . MOD_ASSIGN expression
    (4) atomar -> IDENTIFIER .

    ASSIGN          shift and go to state 60
    PLUS_ASSIGN     shift and go to state 61
    MINUS_ASSIGN    shift and go to state 62
    TIMES_ASSIGN    shift and go to state 63
    POWER_ASSIGN    shift and go to state 64
    DIVIDE_ASSIGN   shift and go to state 65
    DIVIDE_FLOOR_ASSIGN shift and go to state 66
    DIVIDE_CEIL_ASSIGN shift and go to state 67
    GREATER_THAN_ASSIGN shift and go to state 68
    SMALLER_THAN_ASSIGN shift and go to state 69
    GREATER_EQUALS_ASSIGN shift and go to state 70
    SMALLER_EQUALS_ASSIGN shift and go to state 71
    EQUALS_ASSIGN   shift and go to state 72
    UNEQUALS_ASSIGN shift and go to state 73
    AND_ASSIGN      shift and go to state 74
    OR_ASSIGN       shift and go to state 75
    XOR_ASSIGN      shift and go to state 76
    EXP_ASSIGN      shift and go to state 77
    MOD_ASSIGN      shift and go to state 78
    PLUS            reduce using rule 4 (atomar -> IDENTIFIER .)
    MINUS           reduce using rule 4 (atomar -> IDENTIFIER .)
    TIMES           reduce using rule 4 (atomar -> IDENTIFIER .)
    DIVIDE          reduce using rule 4 (atomar -> IDENTIFIER .)
    DIVIDE_CEIL     reduce using rule 4 (atomar -> IDENTIFIER .)
    DIVIDE_FLOOR    reduce using rule 4 (atomar -> IDENTIFIER .)
    MOD             reduce using rule 4 (atomar -> IDENTIFIER .)
    EXP             reduce using rule 4 (atomar -> IDENTIFIER .)
    AND             reduce using rule 4 (atomar -> IDENTIFIER .)
    OR              reduce using rule 4 (atomar -> IDENTIFIER .)
    XOR             reduce using rule 4 (atomar -> IDENTIFIER .)
    POWER           reduce using rule 4 (atomar -> IDENTIFIER .)
    IMAG            reduce using rule 4 (atomar -> IDENTIFIER .)
    LPAREN          reduce using rule 4 (atomar -> IDENTIFIER .)
    OPEN_BRACKETS   reduce using rule 4 (atomar -> IDENTIFIER .)
    CONS            reduce using rule 4 (atomar -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 4 (atomar -> IDENTIFIER .)
    SMALLER_THAN    reduce using rule 4 (atomar -> IDENTIFIER .)
    UNEQUALS        reduce using rule 4 (atomar -> IDENTIFIER .)
    EQUALS          reduce using rule 4 (atomar -> IDENTIFIER .)
    SMALLER_EQUALS  reduce using rule 4 (atomar -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 4 (atomar -> IDENTIFIER .)
    END             reduce using rule 4 (atomar -> IDENTIFIER .)
    SEMICOLON       reduce using rule 4 (atomar -> IDENTIFIER .)
    RPAREN          reduce using rule 4 (atomar -> IDENTIFIER .)
    COMMA           reduce using rule 4 (atomar -> IDENTIFIER .)
    CLOSED_BRACKETS reduce using rule 4 (atomar -> IDENTIFIER .)
    THEN            reduce using rule 4 (atomar -> IDENTIFIER .)
    COLON           reduce using rule 4 (atomar -> IDENTIFIER .)
    IN              reduce using rule 4 (atomar -> IDENTIFIER .)
    DOT             reduce using rule 4 (atomar -> IDENTIFIER .)
    ELIF            reduce using rule 4 (atomar -> IDENTIFIER .)
    ELSE            reduce using rule 4 (atomar -> IDENTIFIER .)


state 12

    (53) expression -> sequence .

    PLUS            reduce using rule 53 (expression -> sequence .)
    MINUS           reduce using rule 53 (expression -> sequence .)
    TIMES           reduce using rule 53 (expression -> sequence .)
    DIVIDE          reduce using rule 53 (expression -> sequence .)
    DIVIDE_CEIL     reduce using rule 53 (expression -> sequence .)
    DIVIDE_FLOOR    reduce using rule 53 (expression -> sequence .)
    MOD             reduce using rule 53 (expression -> sequence .)
    EXP             reduce using rule 53 (expression -> sequence .)
    AND             reduce using rule 53 (expression -> sequence .)
    OR              reduce using rule 53 (expression -> sequence .)
    XOR             reduce using rule 53 (expression -> sequence .)
    POWER           reduce using rule 53 (expression -> sequence .)
    IMAG            reduce using rule 53 (expression -> sequence .)
    LPAREN          reduce using rule 53 (expression -> sequence .)
    OPEN_BRACKETS   reduce using rule 53 (expression -> sequence .)
    CONS            reduce using rule 53 (expression -> sequence .)
    GREATER_THAN    reduce using rule 53 (expression -> sequence .)
    SMALLER_THAN    reduce using rule 53 (expression -> sequence .)
    UNEQUALS        reduce using rule 53 (expression -> sequence .)
    EQUALS          reduce using rule 53 (expression -> sequence .)
    SMALLER_EQUALS  reduce using rule 53 (expression -> sequence .)
    GREATER_EQUALS  reduce using rule 53 (expression -> sequence .)
    END             reduce using rule 53 (expression -> sequence .)
    SEMICOLON       reduce using rule 53 (expression -> sequence .)
    RPAREN          reduce using rule 53 (expression -> sequence .)
    COMMA           reduce using rule 53 (expression -> sequence .)
    CLOSED_BRACKETS reduce using rule 53 (expression -> sequence .)
    THEN            reduce using rule 53 (expression -> sequence .)
    COLON           reduce using rule 53 (expression -> sequence .)
    IN              reduce using rule 53 (expression -> sequence .)
    DOT             reduce using rule 53 (expression -> sequence .)
    ELIF            reduce using rule 53 (expression -> sequence .)
    ELSE            reduce using rule 53 (expression -> sequence .)


state 13

    (61) expression -> if_statement .

    PLUS            reduce using rule 61 (expression -> if_statement .)
    MINUS           reduce using rule 61 (expression -> if_statement .)
    TIMES           reduce using rule 61 (expression -> if_statement .)
    DIVIDE          reduce using rule 61 (expression -> if_statement .)
    DIVIDE_CEIL     reduce using rule 61 (expression -> if_statement .)
    DIVIDE_FLOOR    reduce using rule 61 (expression -> if_statement .)
    MOD             reduce using rule 61 (expression -> if_statement .)
    EXP             reduce using rule 61 (expression -> if_statement .)
    AND             reduce using rule 61 (expression -> if_statement .)
    OR              reduce using rule 61 (expression -> if_statement .)
    XOR             reduce using rule 61 (expression -> if_statement .)
    POWER           reduce using rule 61 (expression -> if_statement .)
    IMAG            reduce using rule 61 (expression -> if_statement .)
    LPAREN          reduce using rule 61 (expression -> if_statement .)
    OPEN_BRACKETS   reduce using rule 61 (expression -> if_statement .)
    CONS            reduce using rule 61 (expression -> if_statement .)
    GREATER_THAN    reduce using rule 61 (expression -> if_statement .)
    SMALLER_THAN    reduce using rule 61 (expression -> if_statement .)
    UNEQUALS        reduce using rule 61 (expression -> if_statement .)
    EQUALS          reduce using rule 61 (expression -> if_statement .)
    SMALLER_EQUALS  reduce using rule 61 (expression -> if_statement .)
    GREATER_EQUALS  reduce using rule 61 (expression -> if_statement .)
    END             reduce using rule 61 (expression -> if_statement .)
    SEMICOLON       reduce using rule 61 (expression -> if_statement .)
    RPAREN          reduce using rule 61 (expression -> if_statement .)
    COMMA           reduce using rule 61 (expression -> if_statement .)
    CLOSED_BRACKETS reduce using rule 61 (expression -> if_statement .)
    THEN            reduce using rule 61 (expression -> if_statement .)
    COLON           reduce using rule 61 (expression -> if_statement .)
    IN              reduce using rule 61 (expression -> if_statement .)
    DOT             reduce using rule 61 (expression -> if_statement .)
    ELIF            reduce using rule 61 (expression -> if_statement .)
    ELSE            reduce using rule 61 (expression -> if_statement .)


state 14

    (63) expression -> while_statement .

    PLUS            reduce using rule 63 (expression -> while_statement .)
    MINUS           reduce using rule 63 (expression -> while_statement .)
    TIMES           reduce using rule 63 (expression -> while_statement .)
    DIVIDE          reduce using rule 63 (expression -> while_statement .)
    DIVIDE_CEIL     reduce using rule 63 (expression -> while_statement .)
    DIVIDE_FLOOR    reduce using rule 63 (expression -> while_statement .)
    MOD             reduce using rule 63 (expression -> while_statement .)
    EXP             reduce using rule 63 (expression -> while_statement .)
    AND             reduce using rule 63 (expression -> while_statement .)
    OR              reduce using rule 63 (expression -> while_statement .)
    XOR             reduce using rule 63 (expression -> while_statement .)
    POWER           reduce using rule 63 (expression -> while_statement .)
    IMAG            reduce using rule 63 (expression -> while_statement .)
    LPAREN          reduce using rule 63 (expression -> while_statement .)
    OPEN_BRACKETS   reduce using rule 63 (expression -> while_statement .)
    CONS            reduce using rule 63 (expression -> while_statement .)
    GREATER_THAN    reduce using rule 63 (expression -> while_statement .)
    SMALLER_THAN    reduce using rule 63 (expression -> while_statement .)
    UNEQUALS        reduce using rule 63 (expression -> while_statement .)
    EQUALS          reduce using rule 63 (expression -> while_statement .)
    SMALLER_EQUALS  reduce using rule 63 (expression -> while_statement .)
    GREATER_EQUALS  reduce using rule 63 (expression -> while_statement .)
    END             reduce using rule 63 (expression -> while_statement .)
    SEMICOLON       reduce using rule 63 (expression -> while_statement .)
    RPAREN          reduce using rule 63 (expression -> while_statement .)
    COMMA           reduce using rule 63 (expression -> while_statement .)
    CLOSED_BRACKETS reduce using rule 63 (expression -> while_statement .)
    THEN            reduce using rule 63 (expression -> while_statement .)
    COLON           reduce using rule 63 (expression -> while_statement .)
    IN              reduce using rule 63 (expression -> while_statement .)
    DOT             reduce using rule 63 (expression -> while_statement .)
    ELIF            reduce using rule 63 (expression -> while_statement .)
    ELSE            reduce using rule 63 (expression -> while_statement .)


state 15

    (69) expression -> loop_statement .

    PLUS            reduce using rule 69 (expression -> loop_statement .)
    MINUS           reduce using rule 69 (expression -> loop_statement .)
    TIMES           reduce using rule 69 (expression -> loop_statement .)
    DIVIDE          reduce using rule 69 (expression -> loop_statement .)
    DIVIDE_CEIL     reduce using rule 69 (expression -> loop_statement .)
    DIVIDE_FLOOR    reduce using rule 69 (expression -> loop_statement .)
    MOD             reduce using rule 69 (expression -> loop_statement .)
    EXP             reduce using rule 69 (expression -> loop_statement .)
    AND             reduce using rule 69 (expression -> loop_statement .)
    OR              reduce using rule 69 (expression -> loop_statement .)
    XOR             reduce using rule 69 (expression -> loop_statement .)
    POWER           reduce using rule 69 (expression -> loop_statement .)
    IMAG            reduce using rule 69 (expression -> loop_statement .)
    LPAREN          reduce using rule 69 (expression -> loop_statement .)
    OPEN_BRACKETS   reduce using rule 69 (expression -> loop_statement .)
    CONS            reduce using rule 69 (expression -> loop_statement .)
    GREATER_THAN    reduce using rule 69 (expression -> loop_statement .)
    SMALLER_THAN    reduce using rule 69 (expression -> loop_statement .)
    UNEQUALS        reduce using rule 69 (expression -> loop_statement .)
    EQUALS          reduce using rule 69 (expression -> loop_statement .)
    SMALLER_EQUALS  reduce using rule 69 (expression -> loop_statement .)
    GREATER_EQUALS  reduce using rule 69 (expression -> loop_statement .)
    END             reduce using rule 69 (expression -> loop_statement .)
    SEMICOLON       reduce using rule 69 (expression -> loop_statement .)
    RPAREN          reduce using rule 69 (expression -> loop_statement .)
    COMMA           reduce using rule 69 (expression -> loop_statement .)
    CLOSED_BRACKETS reduce using rule 69 (expression -> loop_statement .)
    THEN            reduce using rule 69 (expression -> loop_statement .)
    COLON           reduce using rule 69 (expression -> loop_statement .)
    IN              reduce using rule 69 (expression -> loop_statement .)
    DOT             reduce using rule 69 (expression -> loop_statement .)
    ELIF            reduce using rule 69 (expression -> loop_statement .)
    ELSE            reduce using rule 69 (expression -> loop_statement .)


state 16

    (71) expression -> lambda .

    PLUS            reduce using rule 71 (expression -> lambda .)
    MINUS           reduce using rule 71 (expression -> lambda .)
    TIMES           reduce using rule 71 (expression -> lambda .)
    DIVIDE          reduce using rule 71 (expression -> lambda .)
    DIVIDE_CEIL     reduce using rule 71 (expression -> lambda .)
    DIVIDE_FLOOR    reduce using rule 71 (expression -> lambda .)
    MOD             reduce using rule 71 (expression -> lambda .)
    EXP             reduce using rule 71 (expression -> lambda .)
    AND             reduce using rule 71 (expression -> lambda .)
    OR              reduce using rule 71 (expression -> lambda .)
    XOR             reduce using rule 71 (expression -> lambda .)
    POWER           reduce using rule 71 (expression -> lambda .)
    IMAG            reduce using rule 71 (expression -> lambda .)
    LPAREN          reduce using rule 71 (expression -> lambda .)
    OPEN_BRACKETS   reduce using rule 71 (expression -> lambda .)
    CONS            reduce using rule 71 (expression -> lambda .)
    GREATER_THAN    reduce using rule 71 (expression -> lambda .)
    SMALLER_THAN    reduce using rule 71 (expression -> lambda .)
    UNEQUALS        reduce using rule 71 (expression -> lambda .)
    EQUALS          reduce using rule 71 (expression -> lambda .)
    SMALLER_EQUALS  reduce using rule 71 (expression -> lambda .)
    GREATER_EQUALS  reduce using rule 71 (expression -> lambda .)
    END             reduce using rule 71 (expression -> lambda .)
    SEMICOLON       reduce using rule 71 (expression -> lambda .)
    RPAREN          reduce using rule 71 (expression -> lambda .)
    COMMA           reduce using rule 71 (expression -> lambda .)
    CLOSED_BRACKETS reduce using rule 71 (expression -> lambda .)
    THEN            reduce using rule 71 (expression -> lambda .)
    COLON           reduce using rule 71 (expression -> lambda .)
    IN              reduce using rule 71 (expression -> lambda .)
    DOT             reduce using rule 71 (expression -> lambda .)
    ELIF            reduce using rule 71 (expression -> lambda .)
    ELSE            reduce using rule 71 (expression -> lambda .)


state 17

    (5) atomar -> LPAREN . expression RPAREN
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 79
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 18

    (93) expression -> LET . IDENTIFIER EQUALS expression IN expression DOT

    IDENTIFIER      shift and go to state 80


state 19

    (94) expression -> ECHO . LPAREN param_list RPAREN

    LPAREN          shift and go to state 81


state 20

    (95) expression -> LENGTH . LPAREN param_list RPAREN

    LPAREN          shift and go to state 82


state 21

    (96) expression -> LIST . LPAREN param_list RPAREN

    LPAREN          shift and go to state 83


state 22

    (104) expression -> OPEN_BRACKETS . param_list CLOSED_BRACKETS
    (105) expression -> OPEN_BRACKETS . empty CLOSED_BRACKETS
    (97) param_list -> . expression COMMA param_list
    (98) param_list -> . expression
    (91) empty -> .
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    CLOSED_BRACKETS reduce using rule 91 (empty -> .)
    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    param_list                     shift and go to state 84
    empty                          shift and go to state 85
    expression                     shift and go to state 86
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 23

    (102) expression -> NULL .

    PLUS            reduce using rule 102 (expression -> NULL .)
    MINUS           reduce using rule 102 (expression -> NULL .)
    TIMES           reduce using rule 102 (expression -> NULL .)
    DIVIDE          reduce using rule 102 (expression -> NULL .)
    DIVIDE_CEIL     reduce using rule 102 (expression -> NULL .)
    DIVIDE_FLOOR    reduce using rule 102 (expression -> NULL .)
    MOD             reduce using rule 102 (expression -> NULL .)
    EXP             reduce using rule 102 (expression -> NULL .)
    AND             reduce using rule 102 (expression -> NULL .)
    OR              reduce using rule 102 (expression -> NULL .)
    XOR             reduce using rule 102 (expression -> NULL .)
    POWER           reduce using rule 102 (expression -> NULL .)
    IMAG            reduce using rule 102 (expression -> NULL .)
    LPAREN          reduce using rule 102 (expression -> NULL .)
    OPEN_BRACKETS   reduce using rule 102 (expression -> NULL .)
    CONS            reduce using rule 102 (expression -> NULL .)
    GREATER_THAN    reduce using rule 102 (expression -> NULL .)
    SMALLER_THAN    reduce using rule 102 (expression -> NULL .)
    UNEQUALS        reduce using rule 102 (expression -> NULL .)
    EQUALS          reduce using rule 102 (expression -> NULL .)
    SMALLER_EQUALS  reduce using rule 102 (expression -> NULL .)
    GREATER_EQUALS  reduce using rule 102 (expression -> NULL .)
    END             reduce using rule 102 (expression -> NULL .)
    SEMICOLON       reduce using rule 102 (expression -> NULL .)
    RPAREN          reduce using rule 102 (expression -> NULL .)
    COMMA           reduce using rule 102 (expression -> NULL .)
    CLOSED_BRACKETS reduce using rule 102 (expression -> NULL .)
    THEN            reduce using rule 102 (expression -> NULL .)
    COLON           reduce using rule 102 (expression -> NULL .)
    IN              reduce using rule 102 (expression -> NULL .)
    DOT             reduce using rule 102 (expression -> NULL .)
    ELIF            reduce using rule 102 (expression -> NULL .)
    ELSE            reduce using rule 102 (expression -> NULL .)


state 24

    (1) atomar -> NUMBER .

    PLUS            reduce using rule 1 (atomar -> NUMBER .)
    MINUS           reduce using rule 1 (atomar -> NUMBER .)
    TIMES           reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE          reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE_CEIL     reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE_FLOOR    reduce using rule 1 (atomar -> NUMBER .)
    MOD             reduce using rule 1 (atomar -> NUMBER .)
    EXP             reduce using rule 1 (atomar -> NUMBER .)
    AND             reduce using rule 1 (atomar -> NUMBER .)
    OR              reduce using rule 1 (atomar -> NUMBER .)
    XOR             reduce using rule 1 (atomar -> NUMBER .)
    POWER           reduce using rule 1 (atomar -> NUMBER .)
    IMAG            reduce using rule 1 (atomar -> NUMBER .)
    LPAREN          reduce using rule 1 (atomar -> NUMBER .)
    OPEN_BRACKETS   reduce using rule 1 (atomar -> NUMBER .)
    CONS            reduce using rule 1 (atomar -> NUMBER .)
    GREATER_THAN    reduce using rule 1 (atomar -> NUMBER .)
    SMALLER_THAN    reduce using rule 1 (atomar -> NUMBER .)
    UNEQUALS        reduce using rule 1 (atomar -> NUMBER .)
    EQUALS          reduce using rule 1 (atomar -> NUMBER .)
    SMALLER_EQUALS  reduce using rule 1 (atomar -> NUMBER .)
    GREATER_EQUALS  reduce using rule 1 (atomar -> NUMBER .)
    END             reduce using rule 1 (atomar -> NUMBER .)
    SEMICOLON       reduce using rule 1 (atomar -> NUMBER .)
    RPAREN          reduce using rule 1 (atomar -> NUMBER .)
    COMMA           reduce using rule 1 (atomar -> NUMBER .)
    CLOSED_BRACKETS reduce using rule 1 (atomar -> NUMBER .)
    THEN            reduce using rule 1 (atomar -> NUMBER .)
    COLON           reduce using rule 1 (atomar -> NUMBER .)
    IN              reduce using rule 1 (atomar -> NUMBER .)
    DOT             reduce using rule 1 (atomar -> NUMBER .)
    ELIF            reduce using rule 1 (atomar -> NUMBER .)
    ELSE            reduce using rule 1 (atomar -> NUMBER .)


state 25

    (2) atomar -> FLOAT .

    PLUS            reduce using rule 2 (atomar -> FLOAT .)
    MINUS           reduce using rule 2 (atomar -> FLOAT .)
    TIMES           reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE          reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE_CEIL     reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE_FLOOR    reduce using rule 2 (atomar -> FLOAT .)
    MOD             reduce using rule 2 (atomar -> FLOAT .)
    EXP             reduce using rule 2 (atomar -> FLOAT .)
    AND             reduce using rule 2 (atomar -> FLOAT .)
    OR              reduce using rule 2 (atomar -> FLOAT .)
    XOR             reduce using rule 2 (atomar -> FLOAT .)
    POWER           reduce using rule 2 (atomar -> FLOAT .)
    IMAG            reduce using rule 2 (atomar -> FLOAT .)
    LPAREN          reduce using rule 2 (atomar -> FLOAT .)
    OPEN_BRACKETS   reduce using rule 2 (atomar -> FLOAT .)
    CONS            reduce using rule 2 (atomar -> FLOAT .)
    GREATER_THAN    reduce using rule 2 (atomar -> FLOAT .)
    SMALLER_THAN    reduce using rule 2 (atomar -> FLOAT .)
    UNEQUALS        reduce using rule 2 (atomar -> FLOAT .)
    EQUALS          reduce using rule 2 (atomar -> FLOAT .)
    SMALLER_EQUALS  reduce using rule 2 (atomar -> FLOAT .)
    GREATER_EQUALS  reduce using rule 2 (atomar -> FLOAT .)
    END             reduce using rule 2 (atomar -> FLOAT .)
    SEMICOLON       reduce using rule 2 (atomar -> FLOAT .)
    RPAREN          reduce using rule 2 (atomar -> FLOAT .)
    COMMA           reduce using rule 2 (atomar -> FLOAT .)
    CLOSED_BRACKETS reduce using rule 2 (atomar -> FLOAT .)
    THEN            reduce using rule 2 (atomar -> FLOAT .)
    COLON           reduce using rule 2 (atomar -> FLOAT .)
    IN              reduce using rule 2 (atomar -> FLOAT .)
    DOT             reduce using rule 2 (atomar -> FLOAT .)
    ELIF            reduce using rule 2 (atomar -> FLOAT .)
    ELSE            reduce using rule 2 (atomar -> FLOAT .)


state 26

    (3) atomar -> STRING .

    PLUS            reduce using rule 3 (atomar -> STRING .)
    MINUS           reduce using rule 3 (atomar -> STRING .)
    TIMES           reduce using rule 3 (atomar -> STRING .)
    DIVIDE          reduce using rule 3 (atomar -> STRING .)
    DIVIDE_CEIL     reduce using rule 3 (atomar -> STRING .)
    DIVIDE_FLOOR    reduce using rule 3 (atomar -> STRING .)
    MOD             reduce using rule 3 (atomar -> STRING .)
    EXP             reduce using rule 3 (atomar -> STRING .)
    AND             reduce using rule 3 (atomar -> STRING .)
    OR              reduce using rule 3 (atomar -> STRING .)
    XOR             reduce using rule 3 (atomar -> STRING .)
    POWER           reduce using rule 3 (atomar -> STRING .)
    IMAG            reduce using rule 3 (atomar -> STRING .)
    LPAREN          reduce using rule 3 (atomar -> STRING .)
    OPEN_BRACKETS   reduce using rule 3 (atomar -> STRING .)
    CONS            reduce using rule 3 (atomar -> STRING .)
    GREATER_THAN    reduce using rule 3 (atomar -> STRING .)
    SMALLER_THAN    reduce using rule 3 (atomar -> STRING .)
    UNEQUALS        reduce using rule 3 (atomar -> STRING .)
    EQUALS          reduce using rule 3 (atomar -> STRING .)
    SMALLER_EQUALS  reduce using rule 3 (atomar -> STRING .)
    GREATER_EQUALS  reduce using rule 3 (atomar -> STRING .)
    END             reduce using rule 3 (atomar -> STRING .)
    SEMICOLON       reduce using rule 3 (atomar -> STRING .)
    RPAREN          reduce using rule 3 (atomar -> STRING .)
    COMMA           reduce using rule 3 (atomar -> STRING .)
    CLOSED_BRACKETS reduce using rule 3 (atomar -> STRING .)
    THEN            reduce using rule 3 (atomar -> STRING .)
    COLON           reduce using rule 3 (atomar -> STRING .)
    IN              reduce using rule 3 (atomar -> STRING .)
    DOT             reduce using rule 3 (atomar -> STRING .)
    ELIF            reduce using rule 3 (atomar -> STRING .)
    ELSE            reduce using rule 3 (atomar -> STRING .)


state 27

    (57) if_statement -> IF . expression THEN statements DOT
    (58) if_statement -> IF . expression THEN statements else_elif_body DOT
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 87
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 28

    (62) while_statement -> WHILE . expression THEN statements DOT
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 88
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 29

    (64) loop_statement -> LOOP . IDENTIFIER IN interval LOOPTHEN statements DOT

    IDENTIFIER      shift and go to state 89


state 30

    (70) lambda -> LAMBDA . parameter LAMBDA_ARROW expression
    (72) parameter -> . LPAREN parameter_pos RPAREN
    (73) parameter -> . IDENTIFIER
    (74) parameter -> . empty
    (91) empty -> .

    LPAREN          shift and go to state 91
    IDENTIFIER      shift and go to state 92
    LAMBDA_ARROW    reduce using rule 91 (empty -> .)

    parameter                      shift and go to state 90
    empty                          shift and go to state 93

state 31

    (51) sequence -> BEGIN statements END .

    $end            reduce using rule 51 (sequence -> BEGIN statements END .)
    PLUS            reduce using rule 51 (sequence -> BEGIN statements END .)
    MINUS           reduce using rule 51 (sequence -> BEGIN statements END .)
    TIMES           reduce using rule 51 (sequence -> BEGIN statements END .)
    DIVIDE          reduce using rule 51 (sequence -> BEGIN statements END .)
    DIVIDE_CEIL     reduce using rule 51 (sequence -> BEGIN statements END .)
    DIVIDE_FLOOR    reduce using rule 51 (sequence -> BEGIN statements END .)
    MOD             reduce using rule 51 (sequence -> BEGIN statements END .)
    EXP             reduce using rule 51 (sequence -> BEGIN statements END .)
    AND             reduce using rule 51 (sequence -> BEGIN statements END .)
    OR              reduce using rule 51 (sequence -> BEGIN statements END .)
    XOR             reduce using rule 51 (sequence -> BEGIN statements END .)
    POWER           reduce using rule 51 (sequence -> BEGIN statements END .)
    IMAG            reduce using rule 51 (sequence -> BEGIN statements END .)
    LPAREN          reduce using rule 51 (sequence -> BEGIN statements END .)
    OPEN_BRACKETS   reduce using rule 51 (sequence -> BEGIN statements END .)
    CONS            reduce using rule 51 (sequence -> BEGIN statements END .)
    GREATER_THAN    reduce using rule 51 (sequence -> BEGIN statements END .)
    SMALLER_THAN    reduce using rule 51 (sequence -> BEGIN statements END .)
    UNEQUALS        reduce using rule 51 (sequence -> BEGIN statements END .)
    EQUALS          reduce using rule 51 (sequence -> BEGIN statements END .)
    SMALLER_EQUALS  reduce using rule 51 (sequence -> BEGIN statements END .)
    GREATER_EQUALS  reduce using rule 51 (sequence -> BEGIN statements END .)
    END             reduce using rule 51 (sequence -> BEGIN statements END .)
    SEMICOLON       reduce using rule 51 (sequence -> BEGIN statements END .)
    RPAREN          reduce using rule 51 (sequence -> BEGIN statements END .)
    COMMA           reduce using rule 51 (sequence -> BEGIN statements END .)
    CLOSED_BRACKETS reduce using rule 51 (sequence -> BEGIN statements END .)
    THEN            reduce using rule 51 (sequence -> BEGIN statements END .)
    COLON           reduce using rule 51 (sequence -> BEGIN statements END .)
    IN              reduce using rule 51 (sequence -> BEGIN statements END .)
    DOT             reduce using rule 51 (sequence -> BEGIN statements END .)
    ELIF            reduce using rule 51 (sequence -> BEGIN statements END .)
    ELSE            reduce using rule 51 (sequence -> BEGIN statements END .)


state 32

    (52) sequence -> BEGIN statements SEMICOLON . END
    (55) statements -> statements SEMICOLON . statement
    (54) statement -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    END             shift and go to state 94
    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    statement                      shift and go to state 95
    expression                     shift and go to state 5
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 33

    (6) expression -> expression PLUS . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 96
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 34

    (7) expression -> expression MINUS . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 97
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 35

    (8) expression -> expression TIMES . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 98
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 36

    (9) expression -> expression DIVIDE . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 99
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 37

    (10) expression -> expression DIVIDE_CEIL . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 100
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 38

    (11) expression -> expression DIVIDE_FLOOR . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 101
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 39

    (12) expression -> expression MOD . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 102
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 40

    (13) expression -> expression EXP . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 103
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 41

    (14) expression -> expression AND . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 104
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 42

    (15) expression -> expression OR . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 105
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 43

    (16) expression -> expression XOR . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 106
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 44

    (17) expression -> expression POWER . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 107
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 45

    (21) expression -> expression IMAG .

    PLUS            reduce using rule 21 (expression -> expression IMAG .)
    MINUS           reduce using rule 21 (expression -> expression IMAG .)
    TIMES           reduce using rule 21 (expression -> expression IMAG .)
    DIVIDE          reduce using rule 21 (expression -> expression IMAG .)
    DIVIDE_CEIL     reduce using rule 21 (expression -> expression IMAG .)
    DIVIDE_FLOOR    reduce using rule 21 (expression -> expression IMAG .)
    MOD             reduce using rule 21 (expression -> expression IMAG .)
    EXP             reduce using rule 21 (expression -> expression IMAG .)
    AND             reduce using rule 21 (expression -> expression IMAG .)
    OR              reduce using rule 21 (expression -> expression IMAG .)
    XOR             reduce using rule 21 (expression -> expression IMAG .)
    POWER           reduce using rule 21 (expression -> expression IMAG .)
    IMAG            reduce using rule 21 (expression -> expression IMAG .)
    LPAREN          reduce using rule 21 (expression -> expression IMAG .)
    OPEN_BRACKETS   reduce using rule 21 (expression -> expression IMAG .)
    CONS            reduce using rule 21 (expression -> expression IMAG .)
    GREATER_THAN    reduce using rule 21 (expression -> expression IMAG .)
    SMALLER_THAN    reduce using rule 21 (expression -> expression IMAG .)
    UNEQUALS        reduce using rule 21 (expression -> expression IMAG .)
    EQUALS          reduce using rule 21 (expression -> expression IMAG .)
    SMALLER_EQUALS  reduce using rule 21 (expression -> expression IMAG .)
    GREATER_EQUALS  reduce using rule 21 (expression -> expression IMAG .)
    END             reduce using rule 21 (expression -> expression IMAG .)
    SEMICOLON       reduce using rule 21 (expression -> expression IMAG .)
    RPAREN          reduce using rule 21 (expression -> expression IMAG .)
    COMMA           reduce using rule 21 (expression -> expression IMAG .)
    CLOSED_BRACKETS reduce using rule 21 (expression -> expression IMAG .)
    THEN            reduce using rule 21 (expression -> expression IMAG .)
    COLON           reduce using rule 21 (expression -> expression IMAG .)
    IN              reduce using rule 21 (expression -> expression IMAG .)
    DOT             reduce using rule 21 (expression -> expression IMAG .)
    ELIF            reduce using rule 21 (expression -> expression IMAG .)
    ELSE            reduce using rule 21 (expression -> expression IMAG .)


state 46

    (92) expression -> expression LPAREN . parameter_expr RPAREN
    (84) parameter_expr -> . parameter_pos_expr
    (85) parameter_expr -> . empty
    (86) parameter_pos_expr -> . expression COMMA parameter_pos_expr
    (87) parameter_pos_expr -> . expression
    (88) parameter_pos_expr -> . parameter_keywords_expr
    (91) empty -> .
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (89) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (90) parameter_keywords_expr -> . expression COLON expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    RPAREN          reduce using rule 91 (empty -> .)
    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 108
    parameter_expr                 shift and go to state 109
    parameter_pos_expr             shift and go to state 110
    empty                          shift and go to state 111
    parameter_keywords_expr        shift and go to state 112
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 47

    (99) expression -> expression OPEN_BRACKETS . DOT CLOSED_BRACKETS
    (100) expression -> expression OPEN_BRACKETS . TIMES CLOSED_BRACKETS
    (101) expression -> expression OPEN_BRACKETS . expression CLOSED_BRACKETS
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    DOT             shift and go to state 114
    TIMES           shift and go to state 115
    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 113
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 48

    (103) expression -> expression CONS . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 116
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 49

    (23) comparison -> expression comparison_op . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 117
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 50

    (26) comparison_op -> GREATER_THAN .

    NOT             reduce using rule 26 (comparison_op -> GREATER_THAN .)
    MINUS           reduce using rule 26 (comparison_op -> GREATER_THAN .)
    PLUS            reduce using rule 26 (comparison_op -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 26 (comparison_op -> GREATER_THAN .)
    LET             reduce using rule 26 (comparison_op -> GREATER_THAN .)
    ECHO            reduce using rule 26 (comparison_op -> GREATER_THAN .)
    LENGTH          reduce using rule 26 (comparison_op -> GREATER_THAN .)
    LIST            reduce using rule 26 (comparison_op -> GREATER_THAN .)
    NULL            reduce using rule 26 (comparison_op -> GREATER_THAN .)
    OPEN_BRACKETS   reduce using rule 26 (comparison_op -> GREATER_THAN .)
    NUMBER          reduce using rule 26 (comparison_op -> GREATER_THAN .)
    FLOAT           reduce using rule 26 (comparison_op -> GREATER_THAN .)
    STRING          reduce using rule 26 (comparison_op -> GREATER_THAN .)
    LPAREN          reduce using rule 26 (comparison_op -> GREATER_THAN .)
    BEGIN           reduce using rule 26 (comparison_op -> GREATER_THAN .)
    IF              reduce using rule 26 (comparison_op -> GREATER_THAN .)
    WHILE           reduce using rule 26 (comparison_op -> GREATER_THAN .)
    LOOP            reduce using rule 26 (comparison_op -> GREATER_THAN .)
    LAMBDA          reduce using rule 26 (comparison_op -> GREATER_THAN .)


state 51

    (27) comparison_op -> SMALLER_THAN .

    NOT             reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    MINUS           reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    PLUS            reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    IDENTIFIER      reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    LET             reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    ECHO            reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    LENGTH          reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    LIST            reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    NULL            reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    OPEN_BRACKETS   reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    NUMBER          reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    FLOAT           reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    STRING          reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    LPAREN          reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    BEGIN           reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    IF              reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    WHILE           reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    LOOP            reduce using rule 27 (comparison_op -> SMALLER_THAN .)
    LAMBDA          reduce using rule 27 (comparison_op -> SMALLER_THAN .)


state 52

    (28) comparison_op -> UNEQUALS .

    NOT             reduce using rule 28 (comparison_op -> UNEQUALS .)
    MINUS           reduce using rule 28 (comparison_op -> UNEQUALS .)
    PLUS            reduce using rule 28 (comparison_op -> UNEQUALS .)
    IDENTIFIER      reduce using rule 28 (comparison_op -> UNEQUALS .)
    LET             reduce using rule 28 (comparison_op -> UNEQUALS .)
    ECHO            reduce using rule 28 (comparison_op -> UNEQUALS .)
    LENGTH          reduce using rule 28 (comparison_op -> UNEQUALS .)
    LIST            reduce using rule 28 (comparison_op -> UNEQUALS .)
    NULL            reduce using rule 28 (comparison_op -> UNEQUALS .)
    OPEN_BRACKETS   reduce using rule 28 (comparison_op -> UNEQUALS .)
    NUMBER          reduce using rule 28 (comparison_op -> UNEQUALS .)
    FLOAT           reduce using rule 28 (comparison_op -> UNEQUALS .)
    STRING          reduce using rule 28 (comparison_op -> UNEQUALS .)
    LPAREN          reduce using rule 28 (comparison_op -> UNEQUALS .)
    BEGIN           reduce using rule 28 (comparison_op -> UNEQUALS .)
    IF              reduce using rule 28 (comparison_op -> UNEQUALS .)
    WHILE           reduce using rule 28 (comparison_op -> UNEQUALS .)
    LOOP            reduce using rule 28 (comparison_op -> UNEQUALS .)
    LAMBDA          reduce using rule 28 (comparison_op -> UNEQUALS .)


state 53

    (29) comparison_op -> EQUALS .

    NOT             reduce using rule 29 (comparison_op -> EQUALS .)
    MINUS           reduce using rule 29 (comparison_op -> EQUALS .)
    PLUS            reduce using rule 29 (comparison_op -> EQUALS .)
    IDENTIFIER      reduce using rule 29 (comparison_op -> EQUALS .)
    LET             reduce using rule 29 (comparison_op -> EQUALS .)
    ECHO            reduce using rule 29 (comparison_op -> EQUALS .)
    LENGTH          reduce using rule 29 (comparison_op -> EQUALS .)
    LIST            reduce using rule 29 (comparison_op -> EQUALS .)
    NULL            reduce using rule 29 (comparison_op -> EQUALS .)
    OPEN_BRACKETS   reduce using rule 29 (comparison_op -> EQUALS .)
    NUMBER          reduce using rule 29 (comparison_op -> EQUALS .)
    FLOAT           reduce using rule 29 (comparison_op -> EQUALS .)
    STRING          reduce using rule 29 (comparison_op -> EQUALS .)
    LPAREN          reduce using rule 29 (comparison_op -> EQUALS .)
    BEGIN           reduce using rule 29 (comparison_op -> EQUALS .)
    IF              reduce using rule 29 (comparison_op -> EQUALS .)
    WHILE           reduce using rule 29 (comparison_op -> EQUALS .)
    LOOP            reduce using rule 29 (comparison_op -> EQUALS .)
    LAMBDA          reduce using rule 29 (comparison_op -> EQUALS .)


state 54

    (30) comparison_op -> SMALLER_EQUALS .

    NOT             reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    MINUS           reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    PLUS            reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    IDENTIFIER      reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    LET             reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    ECHO            reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    LENGTH          reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    LIST            reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    NULL            reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    OPEN_BRACKETS   reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    NUMBER          reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    FLOAT           reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    STRING          reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    LPAREN          reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    BEGIN           reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    IF              reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    WHILE           reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    LOOP            reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)
    LAMBDA          reduce using rule 30 (comparison_op -> SMALLER_EQUALS .)


state 55

    (31) comparison_op -> GREATER_EQUALS .

    NOT             reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    MINUS           reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    PLUS            reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    IDENTIFIER      reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    LET             reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    ECHO            reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    LENGTH          reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    LIST            reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    NULL            reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    OPEN_BRACKETS   reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    NUMBER          reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    FLOAT           reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    STRING          reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    LPAREN          reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    BEGIN           reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    IF              reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    WHILE           reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    LOOP            reduce using rule 31 (comparison_op -> GREATER_EQUALS .)
    LAMBDA          reduce using rule 31 (comparison_op -> GREATER_EQUALS .)


state 56

    (20) expression -> PLUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 20 (expression -> PLUS expression .)
    MINUS           reduce using rule 20 (expression -> PLUS expression .)
    TIMES           reduce using rule 20 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 20 (expression -> PLUS expression .)
    DIVIDE_CEIL     reduce using rule 20 (expression -> PLUS expression .)
    DIVIDE_FLOOR    reduce using rule 20 (expression -> PLUS expression .)
    MOD             reduce using rule 20 (expression -> PLUS expression .)
    EXP             reduce using rule 20 (expression -> PLUS expression .)
    AND             reduce using rule 20 (expression -> PLUS expression .)
    OR              reduce using rule 20 (expression -> PLUS expression .)
    XOR             reduce using rule 20 (expression -> PLUS expression .)
    POWER           reduce using rule 20 (expression -> PLUS expression .)
    IMAG            reduce using rule 20 (expression -> PLUS expression .)
    OPEN_BRACKETS   reduce using rule 20 (expression -> PLUS expression .)
    CONS            reduce using rule 20 (expression -> PLUS expression .)
    GREATER_THAN    reduce using rule 20 (expression -> PLUS expression .)
    SMALLER_THAN    reduce using rule 20 (expression -> PLUS expression .)
    UNEQUALS        reduce using rule 20 (expression -> PLUS expression .)
    EQUALS          reduce using rule 20 (expression -> PLUS expression .)
    SMALLER_EQUALS  reduce using rule 20 (expression -> PLUS expression .)
    GREATER_EQUALS  reduce using rule 20 (expression -> PLUS expression .)
    END             reduce using rule 20 (expression -> PLUS expression .)
    SEMICOLON       reduce using rule 20 (expression -> PLUS expression .)
    RPAREN          reduce using rule 20 (expression -> PLUS expression .)
    COMMA           reduce using rule 20 (expression -> PLUS expression .)
    CLOSED_BRACKETS reduce using rule 20 (expression -> PLUS expression .)
    THEN            reduce using rule 20 (expression -> PLUS expression .)
    COLON           reduce using rule 20 (expression -> PLUS expression .)
    IN              reduce using rule 20 (expression -> PLUS expression .)
    DOT             reduce using rule 20 (expression -> PLUS expression .)
    ELIF            reduce using rule 20 (expression -> PLUS expression .)
    ELSE            reduce using rule 20 (expression -> PLUS expression .)
    LPAREN          shift and go to state 46

  ! LPAREN          [ reduce using rule 20 (expression -> PLUS expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! DIVIDE_CEIL     [ shift and go to state 37 ]
  ! DIVIDE_FLOOR    [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! EXP             [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! POWER           [ shift and go to state 44 ]
  ! IMAG            [ shift and go to state 45 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 57

    (19) expression -> MINUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 19 (expression -> MINUS expression .)
    MINUS           reduce using rule 19 (expression -> MINUS expression .)
    TIMES           reduce using rule 19 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 19 (expression -> MINUS expression .)
    DIVIDE_CEIL     reduce using rule 19 (expression -> MINUS expression .)
    DIVIDE_FLOOR    reduce using rule 19 (expression -> MINUS expression .)
    MOD             reduce using rule 19 (expression -> MINUS expression .)
    EXP             reduce using rule 19 (expression -> MINUS expression .)
    AND             reduce using rule 19 (expression -> MINUS expression .)
    OR              reduce using rule 19 (expression -> MINUS expression .)
    XOR             reduce using rule 19 (expression -> MINUS expression .)
    POWER           reduce using rule 19 (expression -> MINUS expression .)
    IMAG            reduce using rule 19 (expression -> MINUS expression .)
    OPEN_BRACKETS   reduce using rule 19 (expression -> MINUS expression .)
    CONS            reduce using rule 19 (expression -> MINUS expression .)
    GREATER_THAN    reduce using rule 19 (expression -> MINUS expression .)
    SMALLER_THAN    reduce using rule 19 (expression -> MINUS expression .)
    UNEQUALS        reduce using rule 19 (expression -> MINUS expression .)
    EQUALS          reduce using rule 19 (expression -> MINUS expression .)
    SMALLER_EQUALS  reduce using rule 19 (expression -> MINUS expression .)
    GREATER_EQUALS  reduce using rule 19 (expression -> MINUS expression .)
    END             reduce using rule 19 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 19 (expression -> MINUS expression .)
    RPAREN          reduce using rule 19 (expression -> MINUS expression .)
    COMMA           reduce using rule 19 (expression -> MINUS expression .)
    CLOSED_BRACKETS reduce using rule 19 (expression -> MINUS expression .)
    THEN            reduce using rule 19 (expression -> MINUS expression .)
    COLON           reduce using rule 19 (expression -> MINUS expression .)
    IN              reduce using rule 19 (expression -> MINUS expression .)
    DOT             reduce using rule 19 (expression -> MINUS expression .)
    ELIF            reduce using rule 19 (expression -> MINUS expression .)
    ELSE            reduce using rule 19 (expression -> MINUS expression .)
    LPAREN          shift and go to state 46

  ! LPAREN          [ reduce using rule 19 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! DIVIDE_CEIL     [ shift and go to state 37 ]
  ! DIVIDE_FLOOR    [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! EXP             [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! POWER           [ shift and go to state 44 ]
  ! IMAG            [ shift and go to state 45 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 58

    (18) expression -> NOT expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 18 (expression -> NOT expression .)
    MINUS           reduce using rule 18 (expression -> NOT expression .)
    TIMES           reduce using rule 18 (expression -> NOT expression .)
    DIVIDE          reduce using rule 18 (expression -> NOT expression .)
    DIVIDE_CEIL     reduce using rule 18 (expression -> NOT expression .)
    DIVIDE_FLOOR    reduce using rule 18 (expression -> NOT expression .)
    MOD             reduce using rule 18 (expression -> NOT expression .)
    EXP             reduce using rule 18 (expression -> NOT expression .)
    AND             reduce using rule 18 (expression -> NOT expression .)
    OR              reduce using rule 18 (expression -> NOT expression .)
    XOR             reduce using rule 18 (expression -> NOT expression .)
    POWER           reduce using rule 18 (expression -> NOT expression .)
    IMAG            reduce using rule 18 (expression -> NOT expression .)
    OPEN_BRACKETS   reduce using rule 18 (expression -> NOT expression .)
    CONS            reduce using rule 18 (expression -> NOT expression .)
    GREATER_THAN    reduce using rule 18 (expression -> NOT expression .)
    SMALLER_THAN    reduce using rule 18 (expression -> NOT expression .)
    UNEQUALS        reduce using rule 18 (expression -> NOT expression .)
    EQUALS          reduce using rule 18 (expression -> NOT expression .)
    SMALLER_EQUALS  reduce using rule 18 (expression -> NOT expression .)
    GREATER_EQUALS  reduce using rule 18 (expression -> NOT expression .)
    END             reduce using rule 18 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 18 (expression -> NOT expression .)
    RPAREN          reduce using rule 18 (expression -> NOT expression .)
    COMMA           reduce using rule 18 (expression -> NOT expression .)
    CLOSED_BRACKETS reduce using rule 18 (expression -> NOT expression .)
    THEN            reduce using rule 18 (expression -> NOT expression .)
    COLON           reduce using rule 18 (expression -> NOT expression .)
    IN              reduce using rule 18 (expression -> NOT expression .)
    DOT             reduce using rule 18 (expression -> NOT expression .)
    ELIF            reduce using rule 18 (expression -> NOT expression .)
    ELSE            reduce using rule 18 (expression -> NOT expression .)
    LPAREN          shift and go to state 46

  ! LPAREN          [ reduce using rule 18 (expression -> NOT expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! DIVIDE_CEIL     [ shift and go to state 37 ]
  ! DIVIDE_FLOOR    [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! EXP             [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! POWER           [ shift and go to state 44 ]
  ! IMAG            [ shift and go to state 45 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 59

    (24) comparison -> comparison comparison_op . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    comparison                     shift and go to state 10
    expression                     shift and go to state 118
    atomar                         shift and go to state 9
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 60

    (32) expression -> IDENTIFIER ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 119
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 61

    (33) expression -> IDENTIFIER PLUS_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 120
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 62

    (34) expression -> IDENTIFIER MINUS_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 121
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 63

    (35) expression -> IDENTIFIER TIMES_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 122
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 64

    (36) expression -> IDENTIFIER POWER_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 123
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 65

    (37) expression -> IDENTIFIER DIVIDE_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 124
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 66

    (38) expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 125
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 67

    (39) expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 126
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 68

    (40) expression -> IDENTIFIER GREATER_THAN_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 127
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 69

    (41) expression -> IDENTIFIER SMALLER_THAN_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 128
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 70

    (42) expression -> IDENTIFIER GREATER_EQUALS_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 129
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 71

    (43) expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 130
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 72

    (44) expression -> IDENTIFIER EQUALS_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 131
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 73

    (45) expression -> IDENTIFIER UNEQUALS_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 132
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 74

    (46) expression -> IDENTIFIER AND_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 133
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 75

    (47) expression -> IDENTIFIER OR_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 134
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 76

    (48) expression -> IDENTIFIER XOR_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 135
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 77

    (49) expression -> IDENTIFIER EXP_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 136
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 78

    (50) expression -> IDENTIFIER MOD_ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 137
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 79

    (5) atomar -> LPAREN expression . RPAREN
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    RPAREN          shift and go to state 138
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 80

    (93) expression -> LET IDENTIFIER . EQUALS expression IN expression DOT

    EQUALS          shift and go to state 139


state 81

    (94) expression -> ECHO LPAREN . param_list RPAREN
    (97) param_list -> . expression COMMA param_list
    (98) param_list -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    param_list                     shift and go to state 140
    expression                     shift and go to state 86
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 82

    (95) expression -> LENGTH LPAREN . param_list RPAREN
    (97) param_list -> . expression COMMA param_list
    (98) param_list -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    param_list                     shift and go to state 141
    expression                     shift and go to state 86
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 83

    (96) expression -> LIST LPAREN . param_list RPAREN
    (97) param_list -> . expression COMMA param_list
    (98) param_list -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    param_list                     shift and go to state 142
    expression                     shift and go to state 86
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 84

    (104) expression -> OPEN_BRACKETS param_list . CLOSED_BRACKETS

    CLOSED_BRACKETS shift and go to state 143


state 85

    (105) expression -> OPEN_BRACKETS empty . CLOSED_BRACKETS

    CLOSED_BRACKETS shift and go to state 144


state 86

    (97) param_list -> expression . COMMA param_list
    (98) param_list -> expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    COMMA           shift and go to state 145
    CLOSED_BRACKETS reduce using rule 98 (param_list -> expression .)
    RPAREN          reduce using rule 98 (param_list -> expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 87

    (57) if_statement -> IF expression . THEN statements DOT
    (58) if_statement -> IF expression . THEN statements else_elif_body DOT
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    THEN            shift and go to state 146
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 88

    (62) while_statement -> WHILE expression . THEN statements DOT
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    THEN            shift and go to state 147
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 89

    (64) loop_statement -> LOOP IDENTIFIER . IN interval LOOPTHEN statements DOT

    IN              shift and go to state 148


state 90

    (70) lambda -> LAMBDA parameter . LAMBDA_ARROW expression

    LAMBDA_ARROW    shift and go to state 149


state 91

    (72) parameter -> LPAREN . parameter_pos RPAREN
    (75) parameter_pos -> . parameter_pos_list
    (76) parameter_pos_list -> . IDENTIFIER COMMA parameter_pos_list
    (77) parameter_pos_list -> . IDENTIFIER
    (78) parameter_pos_list -> . parameter_keywords
    (79) parameter_keywords -> . parameter_kw_list
    (80) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (81) parameter_kw_list -> . IDENTIFIER COLON expression
    (82) parameter_kw_list -> . parameter_infty
    (83) parameter_infty -> . IDENTIFIER DOTS

    IDENTIFIER      shift and go to state 152

    parameter_pos                  shift and go to state 150
    parameter_pos_list             shift and go to state 151
    parameter_keywords             shift and go to state 153
    parameter_kw_list              shift and go to state 154
    parameter_infty                shift and go to state 155

state 92

    (73) parameter -> IDENTIFIER .

    LAMBDA_ARROW    reduce using rule 73 (parameter -> IDENTIFIER .)


state 93

    (74) parameter -> empty .

    LAMBDA_ARROW    reduce using rule 74 (parameter -> empty .)


state 94

    (52) sequence -> BEGIN statements SEMICOLON END .

    $end            reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    PLUS            reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    MINUS           reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    TIMES           reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    DIVIDE          reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    DIVIDE_CEIL     reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    DIVIDE_FLOOR    reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    MOD             reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    EXP             reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    AND             reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    OR              reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    XOR             reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    POWER           reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    IMAG            reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    LPAREN          reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    OPEN_BRACKETS   reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    CONS            reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    GREATER_THAN    reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    SMALLER_THAN    reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    UNEQUALS        reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    EQUALS          reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    SMALLER_EQUALS  reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    GREATER_EQUALS  reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    END             reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    SEMICOLON       reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    RPAREN          reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    COMMA           reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    CLOSED_BRACKETS reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    THEN            reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    COLON           reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    IN              reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    DOT             reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    ELIF            reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)
    ELSE            reduce using rule 52 (sequence -> BEGIN statements SEMICOLON END .)


state 95

    (55) statements -> statements SEMICOLON statement .

    END             reduce using rule 55 (statements -> statements SEMICOLON statement .)
    SEMICOLON       reduce using rule 55 (statements -> statements SEMICOLON statement .)
    DOT             reduce using rule 55 (statements -> statements SEMICOLON statement .)
    ELIF            reduce using rule 55 (statements -> statements SEMICOLON statement .)
    ELSE            reduce using rule 55 (statements -> statements SEMICOLON statement .)


state 96

    (6) expression -> expression PLUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 6 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 6 (expression -> expression PLUS expression .)
    AND             reduce using rule 6 (expression -> expression PLUS expression .)
    OR              reduce using rule 6 (expression -> expression PLUS expression .)
    XOR             reduce using rule 6 (expression -> expression PLUS expression .)
    OPEN_BRACKETS   reduce using rule 6 (expression -> expression PLUS expression .)
    CONS            reduce using rule 6 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 6 (expression -> expression PLUS expression .)
    SMALLER_THAN    reduce using rule 6 (expression -> expression PLUS expression .)
    UNEQUALS        reduce using rule 6 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 6 (expression -> expression PLUS expression .)
    SMALLER_EQUALS  reduce using rule 6 (expression -> expression PLUS expression .)
    GREATER_EQUALS  reduce using rule 6 (expression -> expression PLUS expression .)
    END             reduce using rule 6 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 6 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 6 (expression -> expression PLUS expression .)
    CLOSED_BRACKETS reduce using rule 6 (expression -> expression PLUS expression .)
    THEN            reduce using rule 6 (expression -> expression PLUS expression .)
    COLON           reduce using rule 6 (expression -> expression PLUS expression .)
    IN              reduce using rule 6 (expression -> expression PLUS expression .)
    DOT             reduce using rule 6 (expression -> expression PLUS expression .)
    ELIF            reduce using rule 6 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 6 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46

  ! TIMES           [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! EXP             [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! IMAG            [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! LPAREN          [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 97

    (7) expression -> expression MINUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 7 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 7 (expression -> expression MINUS expression .)
    AND             reduce using rule 7 (expression -> expression MINUS expression .)
    OR              reduce using rule 7 (expression -> expression MINUS expression .)
    XOR             reduce using rule 7 (expression -> expression MINUS expression .)
    OPEN_BRACKETS   reduce using rule 7 (expression -> expression MINUS expression .)
    CONS            reduce using rule 7 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 7 (expression -> expression MINUS expression .)
    SMALLER_THAN    reduce using rule 7 (expression -> expression MINUS expression .)
    UNEQUALS        reduce using rule 7 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 7 (expression -> expression MINUS expression .)
    SMALLER_EQUALS  reduce using rule 7 (expression -> expression MINUS expression .)
    GREATER_EQUALS  reduce using rule 7 (expression -> expression MINUS expression .)
    END             reduce using rule 7 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 7 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 7 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 7 (expression -> expression MINUS expression .)
    CLOSED_BRACKETS reduce using rule 7 (expression -> expression MINUS expression .)
    THEN            reduce using rule 7 (expression -> expression MINUS expression .)
    COLON           reduce using rule 7 (expression -> expression MINUS expression .)
    IN              reduce using rule 7 (expression -> expression MINUS expression .)
    DOT             reduce using rule 7 (expression -> expression MINUS expression .)
    ELIF            reduce using rule 7 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 7 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46

  ! TIMES           [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! EXP             [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! IMAG            [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! LPAREN          [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 98

    (8) expression -> expression TIMES expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 8 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 8 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 8 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 8 (expression -> expression TIMES expression .)
    DIVIDE_CEIL     reduce using rule 8 (expression -> expression TIMES expression .)
    DIVIDE_FLOOR    reduce using rule 8 (expression -> expression TIMES expression .)
    MOD             reduce using rule 8 (expression -> expression TIMES expression .)
    AND             reduce using rule 8 (expression -> expression TIMES expression .)
    OR              reduce using rule 8 (expression -> expression TIMES expression .)
    XOR             reduce using rule 8 (expression -> expression TIMES expression .)
    OPEN_BRACKETS   reduce using rule 8 (expression -> expression TIMES expression .)
    CONS            reduce using rule 8 (expression -> expression TIMES expression .)
    GREATER_THAN    reduce using rule 8 (expression -> expression TIMES expression .)
    SMALLER_THAN    reduce using rule 8 (expression -> expression TIMES expression .)
    UNEQUALS        reduce using rule 8 (expression -> expression TIMES expression .)
    EQUALS          reduce using rule 8 (expression -> expression TIMES expression .)
    SMALLER_EQUALS  reduce using rule 8 (expression -> expression TIMES expression .)
    GREATER_EQUALS  reduce using rule 8 (expression -> expression TIMES expression .)
    END             reduce using rule 8 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 8 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 8 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 8 (expression -> expression TIMES expression .)
    CLOSED_BRACKETS reduce using rule 8 (expression -> expression TIMES expression .)
    THEN            reduce using rule 8 (expression -> expression TIMES expression .)
    COLON           reduce using rule 8 (expression -> expression TIMES expression .)
    IN              reduce using rule 8 (expression -> expression TIMES expression .)
    DOT             reduce using rule 8 (expression -> expression TIMES expression .)
    ELIF            reduce using rule 8 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 8 (expression -> expression TIMES expression .)
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46

  ! EXP             [ reduce using rule 8 (expression -> expression TIMES expression .) ]
  ! POWER           [ reduce using rule 8 (expression -> expression TIMES expression .) ]
  ! IMAG            [ reduce using rule 8 (expression -> expression TIMES expression .) ]
  ! LPAREN          [ reduce using rule 8 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! DIVIDE_CEIL     [ shift and go to state 37 ]
  ! DIVIDE_FLOOR    [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 99

    (9) expression -> expression DIVIDE expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 9 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 9 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 9 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 9 (expression -> expression DIVIDE expression .)
    DIVIDE_CEIL     reduce using rule 9 (expression -> expression DIVIDE expression .)
    DIVIDE_FLOOR    reduce using rule 9 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 9 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 9 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 9 (expression -> expression DIVIDE expression .)
    XOR             reduce using rule 9 (expression -> expression DIVIDE expression .)
    OPEN_BRACKETS   reduce using rule 9 (expression -> expression DIVIDE expression .)
    CONS            reduce using rule 9 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 9 (expression -> expression DIVIDE expression .)
    SMALLER_THAN    reduce using rule 9 (expression -> expression DIVIDE expression .)
    UNEQUALS        reduce using rule 9 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 9 (expression -> expression DIVIDE expression .)
    SMALLER_EQUALS  reduce using rule 9 (expression -> expression DIVIDE expression .)
    GREATER_EQUALS  reduce using rule 9 (expression -> expression DIVIDE expression .)
    END             reduce using rule 9 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 9 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 9 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 9 (expression -> expression DIVIDE expression .)
    CLOSED_BRACKETS reduce using rule 9 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 9 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 9 (expression -> expression DIVIDE expression .)
    IN              reduce using rule 9 (expression -> expression DIVIDE expression .)
    DOT             reduce using rule 9 (expression -> expression DIVIDE expression .)
    ELIF            reduce using rule 9 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 9 (expression -> expression DIVIDE expression .)
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46

  ! EXP             [ reduce using rule 9 (expression -> expression DIVIDE expression .) ]
  ! POWER           [ reduce using rule 9 (expression -> expression DIVIDE expression .) ]
  ! IMAG            [ reduce using rule 9 (expression -> expression DIVIDE expression .) ]
  ! LPAREN          [ reduce using rule 9 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! DIVIDE_CEIL     [ shift and go to state 37 ]
  ! DIVIDE_FLOOR    [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 100

    (10) expression -> expression DIVIDE_CEIL expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    MINUS           reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    TIMES           reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    DIVIDE          reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    DIVIDE_CEIL     reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    DIVIDE_FLOOR    reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    MOD             reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    AND             reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    OR              reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    XOR             reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    OPEN_BRACKETS   reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    CONS            reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    GREATER_THAN    reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    SMALLER_THAN    reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    UNEQUALS        reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    EQUALS          reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    SMALLER_EQUALS  reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    GREATER_EQUALS  reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    END             reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    SEMICOLON       reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    RPAREN          reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    COMMA           reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    CLOSED_BRACKETS reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    THEN            reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    COLON           reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    IN              reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    DOT             reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    ELIF            reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    ELSE            reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .)
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46

  ! EXP             [ reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .) ]
  ! POWER           [ reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .) ]
  ! IMAG            [ reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .) ]
  ! LPAREN          [ reduce using rule 10 (expression -> expression DIVIDE_CEIL expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! DIVIDE_CEIL     [ shift and go to state 37 ]
  ! DIVIDE_FLOOR    [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 101

    (11) expression -> expression DIVIDE_FLOOR expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    MINUS           reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    TIMES           reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    DIVIDE          reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    DIVIDE_CEIL     reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    DIVIDE_FLOOR    reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    MOD             reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    AND             reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    OR              reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    XOR             reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    OPEN_BRACKETS   reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    CONS            reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    GREATER_THAN    reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    SMALLER_THAN    reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    UNEQUALS        reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    EQUALS          reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    SMALLER_EQUALS  reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    GREATER_EQUALS  reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    END             reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    SEMICOLON       reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    RPAREN          reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    COMMA           reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    CLOSED_BRACKETS reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    THEN            reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    COLON           reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    IN              reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    DOT             reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    ELIF            reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    ELSE            reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .)
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46

  ! EXP             [ reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .) ]
  ! POWER           [ reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .) ]
  ! IMAG            [ reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .) ]
  ! LPAREN          [ reduce using rule 11 (expression -> expression DIVIDE_FLOOR expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! DIVIDE_CEIL     [ shift and go to state 37 ]
  ! DIVIDE_FLOOR    [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 102

    (12) expression -> expression MOD expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 12 (expression -> expression MOD expression .)
    MINUS           reduce using rule 12 (expression -> expression MOD expression .)
    TIMES           reduce using rule 12 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 12 (expression -> expression MOD expression .)
    DIVIDE_CEIL     reduce using rule 12 (expression -> expression MOD expression .)
    DIVIDE_FLOOR    reduce using rule 12 (expression -> expression MOD expression .)
    MOD             reduce using rule 12 (expression -> expression MOD expression .)
    AND             reduce using rule 12 (expression -> expression MOD expression .)
    OR              reduce using rule 12 (expression -> expression MOD expression .)
    XOR             reduce using rule 12 (expression -> expression MOD expression .)
    OPEN_BRACKETS   reduce using rule 12 (expression -> expression MOD expression .)
    CONS            reduce using rule 12 (expression -> expression MOD expression .)
    GREATER_THAN    reduce using rule 12 (expression -> expression MOD expression .)
    SMALLER_THAN    reduce using rule 12 (expression -> expression MOD expression .)
    UNEQUALS        reduce using rule 12 (expression -> expression MOD expression .)
    EQUALS          reduce using rule 12 (expression -> expression MOD expression .)
    SMALLER_EQUALS  reduce using rule 12 (expression -> expression MOD expression .)
    GREATER_EQUALS  reduce using rule 12 (expression -> expression MOD expression .)
    END             reduce using rule 12 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 12 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 12 (expression -> expression MOD expression .)
    COMMA           reduce using rule 12 (expression -> expression MOD expression .)
    CLOSED_BRACKETS reduce using rule 12 (expression -> expression MOD expression .)
    THEN            reduce using rule 12 (expression -> expression MOD expression .)
    COLON           reduce using rule 12 (expression -> expression MOD expression .)
    IN              reduce using rule 12 (expression -> expression MOD expression .)
    DOT             reduce using rule 12 (expression -> expression MOD expression .)
    ELIF            reduce using rule 12 (expression -> expression MOD expression .)
    ELSE            reduce using rule 12 (expression -> expression MOD expression .)
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46

  ! EXP             [ reduce using rule 12 (expression -> expression MOD expression .) ]
  ! POWER           [ reduce using rule 12 (expression -> expression MOD expression .) ]
  ! IMAG            [ reduce using rule 12 (expression -> expression MOD expression .) ]
  ! LPAREN          [ reduce using rule 12 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! DIVIDE_CEIL     [ shift and go to state 37 ]
  ! DIVIDE_FLOOR    [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 103

    (13) expression -> expression EXP expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 13 (expression -> expression EXP expression .)
    MINUS           reduce using rule 13 (expression -> expression EXP expression .)
    TIMES           reduce using rule 13 (expression -> expression EXP expression .)
    DIVIDE          reduce using rule 13 (expression -> expression EXP expression .)
    DIVIDE_CEIL     reduce using rule 13 (expression -> expression EXP expression .)
    DIVIDE_FLOOR    reduce using rule 13 (expression -> expression EXP expression .)
    MOD             reduce using rule 13 (expression -> expression EXP expression .)
    AND             reduce using rule 13 (expression -> expression EXP expression .)
    OR              reduce using rule 13 (expression -> expression EXP expression .)
    XOR             reduce using rule 13 (expression -> expression EXP expression .)
    OPEN_BRACKETS   reduce using rule 13 (expression -> expression EXP expression .)
    CONS            reduce using rule 13 (expression -> expression EXP expression .)
    GREATER_THAN    reduce using rule 13 (expression -> expression EXP expression .)
    SMALLER_THAN    reduce using rule 13 (expression -> expression EXP expression .)
    UNEQUALS        reduce using rule 13 (expression -> expression EXP expression .)
    EQUALS          reduce using rule 13 (expression -> expression EXP expression .)
    SMALLER_EQUALS  reduce using rule 13 (expression -> expression EXP expression .)
    GREATER_EQUALS  reduce using rule 13 (expression -> expression EXP expression .)
    END             reduce using rule 13 (expression -> expression EXP expression .)
    SEMICOLON       reduce using rule 13 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 13 (expression -> expression EXP expression .)
    COMMA           reduce using rule 13 (expression -> expression EXP expression .)
    CLOSED_BRACKETS reduce using rule 13 (expression -> expression EXP expression .)
    THEN            reduce using rule 13 (expression -> expression EXP expression .)
    COLON           reduce using rule 13 (expression -> expression EXP expression .)
    IN              reduce using rule 13 (expression -> expression EXP expression .)
    DOT             reduce using rule 13 (expression -> expression EXP expression .)
    ELIF            reduce using rule 13 (expression -> expression EXP expression .)
    ELSE            reduce using rule 13 (expression -> expression EXP expression .)
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46

  ! EXP             [ reduce using rule 13 (expression -> expression EXP expression .) ]
  ! POWER           [ reduce using rule 13 (expression -> expression EXP expression .) ]
  ! IMAG            [ reduce using rule 13 (expression -> expression EXP expression .) ]
  ! LPAREN          [ reduce using rule 13 (expression -> expression EXP expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! DIVIDE_CEIL     [ shift and go to state 37 ]
  ! DIVIDE_FLOOR    [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 104

    (14) expression -> expression AND expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    AND             reduce using rule 14 (expression -> expression AND expression .)
    OR              reduce using rule 14 (expression -> expression AND expression .)
    XOR             reduce using rule 14 (expression -> expression AND expression .)
    OPEN_BRACKETS   reduce using rule 14 (expression -> expression AND expression .)
    CONS            reduce using rule 14 (expression -> expression AND expression .)
    END             reduce using rule 14 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 14 (expression -> expression AND expression .)
    RPAREN          reduce using rule 14 (expression -> expression AND expression .)
    COMMA           reduce using rule 14 (expression -> expression AND expression .)
    CLOSED_BRACKETS reduce using rule 14 (expression -> expression AND expression .)
    THEN            reduce using rule 14 (expression -> expression AND expression .)
    COLON           reduce using rule 14 (expression -> expression AND expression .)
    IN              reduce using rule 14 (expression -> expression AND expression .)
    DOT             reduce using rule 14 (expression -> expression AND expression .)
    ELIF            reduce using rule 14 (expression -> expression AND expression .)
    ELSE            reduce using rule 14 (expression -> expression AND expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! EXP             [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! POWER           [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! IMAG            [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! LPAREN          [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! SMALLER_THAN    [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! UNEQUALS        [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! EQUALS          [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 14 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]

    comparison_op                  shift and go to state 49

state 105

    (15) expression -> expression OR expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OR              reduce using rule 15 (expression -> expression OR expression .)
    OPEN_BRACKETS   reduce using rule 15 (expression -> expression OR expression .)
    CONS            reduce using rule 15 (expression -> expression OR expression .)
    END             reduce using rule 15 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 15 (expression -> expression OR expression .)
    RPAREN          reduce using rule 15 (expression -> expression OR expression .)
    COMMA           reduce using rule 15 (expression -> expression OR expression .)
    CLOSED_BRACKETS reduce using rule 15 (expression -> expression OR expression .)
    THEN            reduce using rule 15 (expression -> expression OR expression .)
    COLON           reduce using rule 15 (expression -> expression OR expression .)
    IN              reduce using rule 15 (expression -> expression OR expression .)
    DOT             reduce using rule 15 (expression -> expression OR expression .)
    ELIF            reduce using rule 15 (expression -> expression OR expression .)
    ELSE            reduce using rule 15 (expression -> expression OR expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! EXP             [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! XOR             [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! POWER           [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! IMAG            [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! LPAREN          [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! SMALLER_THAN    [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! UNEQUALS        [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 15 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]

    comparison_op                  shift and go to state 49

state 106

    (16) expression -> expression XOR expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OR              reduce using rule 16 (expression -> expression XOR expression .)
    XOR             reduce using rule 16 (expression -> expression XOR expression .)
    OPEN_BRACKETS   reduce using rule 16 (expression -> expression XOR expression .)
    CONS            reduce using rule 16 (expression -> expression XOR expression .)
    END             reduce using rule 16 (expression -> expression XOR expression .)
    SEMICOLON       reduce using rule 16 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 16 (expression -> expression XOR expression .)
    COMMA           reduce using rule 16 (expression -> expression XOR expression .)
    CLOSED_BRACKETS reduce using rule 16 (expression -> expression XOR expression .)
    THEN            reduce using rule 16 (expression -> expression XOR expression .)
    COLON           reduce using rule 16 (expression -> expression XOR expression .)
    IN              reduce using rule 16 (expression -> expression XOR expression .)
    DOT             reduce using rule 16 (expression -> expression XOR expression .)
    ELIF            reduce using rule 16 (expression -> expression XOR expression .)
    ELSE            reduce using rule 16 (expression -> expression XOR expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! TIMES           [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! MOD             [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! EXP             [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! POWER           [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! IMAG            [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! LPAREN          [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! GREATER_THAN    [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! SMALLER_THAN    [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! UNEQUALS        [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! EQUALS          [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 16 (expression -> expression XOR expression .) ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]

    comparison_op                  shift and go to state 49

state 107

    (17) expression -> expression POWER expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    PLUS            reduce using rule 17 (expression -> expression POWER expression .)
    MINUS           reduce using rule 17 (expression -> expression POWER expression .)
    TIMES           reduce using rule 17 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 17 (expression -> expression POWER expression .)
    DIVIDE_CEIL     reduce using rule 17 (expression -> expression POWER expression .)
    DIVIDE_FLOOR    reduce using rule 17 (expression -> expression POWER expression .)
    MOD             reduce using rule 17 (expression -> expression POWER expression .)
    AND             reduce using rule 17 (expression -> expression POWER expression .)
    OR              reduce using rule 17 (expression -> expression POWER expression .)
    XOR             reduce using rule 17 (expression -> expression POWER expression .)
    OPEN_BRACKETS   reduce using rule 17 (expression -> expression POWER expression .)
    CONS            reduce using rule 17 (expression -> expression POWER expression .)
    GREATER_THAN    reduce using rule 17 (expression -> expression POWER expression .)
    SMALLER_THAN    reduce using rule 17 (expression -> expression POWER expression .)
    UNEQUALS        reduce using rule 17 (expression -> expression POWER expression .)
    EQUALS          reduce using rule 17 (expression -> expression POWER expression .)
    SMALLER_EQUALS  reduce using rule 17 (expression -> expression POWER expression .)
    GREATER_EQUALS  reduce using rule 17 (expression -> expression POWER expression .)
    END             reduce using rule 17 (expression -> expression POWER expression .)
    SEMICOLON       reduce using rule 17 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 17 (expression -> expression POWER expression .)
    COMMA           reduce using rule 17 (expression -> expression POWER expression .)
    CLOSED_BRACKETS reduce using rule 17 (expression -> expression POWER expression .)
    THEN            reduce using rule 17 (expression -> expression POWER expression .)
    COLON           reduce using rule 17 (expression -> expression POWER expression .)
    IN              reduce using rule 17 (expression -> expression POWER expression .)
    DOT             reduce using rule 17 (expression -> expression POWER expression .)
    ELIF            reduce using rule 17 (expression -> expression POWER expression .)
    ELSE            reduce using rule 17 (expression -> expression POWER expression .)
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46

  ! EXP             [ reduce using rule 17 (expression -> expression POWER expression .) ]
  ! POWER           [ reduce using rule 17 (expression -> expression POWER expression .) ]
  ! IMAG            [ reduce using rule 17 (expression -> expression POWER expression .) ]
  ! LPAREN          [ reduce using rule 17 (expression -> expression POWER expression .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 34 ]
  ! TIMES           [ shift and go to state 35 ]
  ! DIVIDE          [ shift and go to state 36 ]
  ! DIVIDE_CEIL     [ shift and go to state 37 ]
  ! DIVIDE_FLOOR    [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! SMALLER_THAN    [ shift and go to state 51 ]
  ! UNEQUALS        [ shift and go to state 52 ]
  ! EQUALS          [ shift and go to state 53 ]
  ! SMALLER_EQUALS  [ shift and go to state 54 ]
  ! GREATER_EQUALS  [ shift and go to state 55 ]

    comparison_op                  shift and go to state 49

state 108

    (86) parameter_pos_expr -> expression . COMMA parameter_pos_expr
    (87) parameter_pos_expr -> expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (89) parameter_keywords_expr -> expression . COLON expression COMMA parameter_keywords_expr
    (90) parameter_keywords_expr -> expression . COLON expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    COMMA           shift and go to state 156
    RPAREN          reduce using rule 87 (parameter_pos_expr -> expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    COLON           shift and go to state 157
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 109

    (92) expression -> expression LPAREN parameter_expr . RPAREN

    RPAREN          shift and go to state 158


state 110

    (84) parameter_expr -> parameter_pos_expr .

    RPAREN          reduce using rule 84 (parameter_expr -> parameter_pos_expr .)


state 111

    (85) parameter_expr -> empty .

    RPAREN          reduce using rule 85 (parameter_expr -> empty .)


state 112

    (88) parameter_pos_expr -> parameter_keywords_expr .

    RPAREN          reduce using rule 88 (parameter_pos_expr -> parameter_keywords_expr .)


state 113

    (101) expression -> expression OPEN_BRACKETS expression . CLOSED_BRACKETS
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    CLOSED_BRACKETS shift and go to state 159
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 114

    (99) expression -> expression OPEN_BRACKETS DOT . CLOSED_BRACKETS

    CLOSED_BRACKETS shift and go to state 160


state 115

    (100) expression -> expression OPEN_BRACKETS TIMES . CLOSED_BRACKETS

    CLOSED_BRACKETS shift and go to state 161


state 116

    (103) expression -> expression CONS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 103 (expression -> expression CONS expression .)
    CONS            reduce using rule 103 (expression -> expression CONS expression .)
    END             reduce using rule 103 (expression -> expression CONS expression .)
    SEMICOLON       reduce using rule 103 (expression -> expression CONS expression .)
    RPAREN          reduce using rule 103 (expression -> expression CONS expression .)
    COMMA           reduce using rule 103 (expression -> expression CONS expression .)
    CLOSED_BRACKETS reduce using rule 103 (expression -> expression CONS expression .)
    THEN            reduce using rule 103 (expression -> expression CONS expression .)
    COLON           reduce using rule 103 (expression -> expression CONS expression .)
    IN              reduce using rule 103 (expression -> expression CONS expression .)
    DOT             reduce using rule 103 (expression -> expression CONS expression .)
    ELIF            reduce using rule 103 (expression -> expression CONS expression .)
    ELSE            reduce using rule 103 (expression -> expression CONS expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! MINUS           [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! TIMES           [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! DIVIDE          [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! MOD             [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! EXP             [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! AND             [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! OR              [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! XOR             [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! POWER           [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! IMAG            [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! LPAREN          [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! GREATER_THAN    [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! SMALLER_THAN    [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! UNEQUALS        [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! EQUALS          [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 103 (expression -> expression CONS expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]

    comparison_op                  shift and go to state 49

state 117

    (23) comparison -> expression comparison_op expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    AND             reduce using rule 23 (comparison -> expression comparison_op expression .)
    OR              reduce using rule 23 (comparison -> expression comparison_op expression .)
    XOR             reduce using rule 23 (comparison -> expression comparison_op expression .)
    OPEN_BRACKETS   reduce using rule 23 (comparison -> expression comparison_op expression .)
    CONS            reduce using rule 23 (comparison -> expression comparison_op expression .)
    END             reduce using rule 23 (comparison -> expression comparison_op expression .)
    SEMICOLON       reduce using rule 23 (comparison -> expression comparison_op expression .)
    RPAREN          reduce using rule 23 (comparison -> expression comparison_op expression .)
    COMMA           reduce using rule 23 (comparison -> expression comparison_op expression .)
    CLOSED_BRACKETS reduce using rule 23 (comparison -> expression comparison_op expression .)
    THEN            reduce using rule 23 (comparison -> expression comparison_op expression .)
    COLON           reduce using rule 23 (comparison -> expression comparison_op expression .)
    IN              reduce using rule 23 (comparison -> expression comparison_op expression .)
    DOT             reduce using rule 23 (comparison -> expression comparison_op expression .)
    ELIF            reduce using rule 23 (comparison -> expression comparison_op expression .)
    ELSE            reduce using rule 23 (comparison -> expression comparison_op expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! GREATER_THAN    [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! SMALLER_THAN    [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! UNEQUALS        [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! EQUALS          [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! PLUS            [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! MINUS           [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! TIMES           [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! DIVIDE          [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! MOD             [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! EXP             [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! POWER           [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! IMAG            [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! LPAREN          [ reduce using rule 23 (comparison -> expression comparison_op expression .) ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]

    comparison_op                  shift and go to state 49

state 118

    (24) comparison -> comparison comparison_op expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    AND             reduce using rule 24 (comparison -> comparison comparison_op expression .)
    OR              reduce using rule 24 (comparison -> comparison comparison_op expression .)
    XOR             reduce using rule 24 (comparison -> comparison comparison_op expression .)
    OPEN_BRACKETS   reduce using rule 24 (comparison -> comparison comparison_op expression .)
    CONS            reduce using rule 24 (comparison -> comparison comparison_op expression .)
    END             reduce using rule 24 (comparison -> comparison comparison_op expression .)
    SEMICOLON       reduce using rule 24 (comparison -> comparison comparison_op expression .)
    RPAREN          reduce using rule 24 (comparison -> comparison comparison_op expression .)
    COMMA           reduce using rule 24 (comparison -> comparison comparison_op expression .)
    CLOSED_BRACKETS reduce using rule 24 (comparison -> comparison comparison_op expression .)
    THEN            reduce using rule 24 (comparison -> comparison comparison_op expression .)
    COLON           reduce using rule 24 (comparison -> comparison comparison_op expression .)
    IN              reduce using rule 24 (comparison -> comparison comparison_op expression .)
    DOT             reduce using rule 24 (comparison -> comparison comparison_op expression .)
    ELIF            reduce using rule 24 (comparison -> comparison comparison_op expression .)
    ELSE            reduce using rule 24 (comparison -> comparison comparison_op expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! GREATER_THAN    [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! SMALLER_THAN    [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! UNEQUALS        [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! EQUALS          [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! PLUS            [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! MINUS           [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! TIMES           [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! DIVIDE          [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! MOD             [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! EXP             [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! POWER           [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! IMAG            [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! LPAREN          [ reduce using rule 24 (comparison -> comparison comparison_op expression .) ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! XOR             [ shift and go to state 43 ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]

    comparison_op                  shift and go to state 49

state 119

    (32) expression -> IDENTIFIER ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    END             reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    SEMICOLON       reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    RPAREN          reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    THEN            reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    COLON           reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    IN              reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    DOT             reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    ELIF            reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    ELSE            reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! MOD             [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! EXP             [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! AND             [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! OR              [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! XOR             [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! POWER           [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! CONS            [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 32 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 120

    (33) expression -> IDENTIFIER PLUS_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    END             reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    SEMICOLON       reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    COMMA           reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    THEN            reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    COLON           reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    IN              reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    DOT             reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    ELIF            reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    ELSE            reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 33 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 121

    (34) expression -> IDENTIFIER MINUS_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    END             reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    SEMICOLON       reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    COMMA           reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    THEN            reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    COLON           reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    IN              reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    DOT             reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    ELIF            reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    ELSE            reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 34 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 122

    (35) expression -> IDENTIFIER TIMES_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    END             reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    SEMICOLON       reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    RPAREN          reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    COMMA           reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    THEN            reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    COLON           reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    IN              reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    DOT             reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    ELIF            reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    ELSE            reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! AND             [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! OR              [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 35 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 123

    (36) expression -> IDENTIFIER POWER_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    END             reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    SEMICOLON       reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    RPAREN          reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    COMMA           reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    THEN            reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    COLON           reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    IN              reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    DOT             reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    ELIF            reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    ELSE            reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! AND             [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! OR              [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 36 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 124

    (37) expression -> IDENTIFIER DIVIDE_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    END             reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    SEMICOLON       reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    RPAREN          reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    COMMA           reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    THEN            reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    COLON           reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    IN              reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    DOT             reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ELIF            reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! AND             [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! OR              [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 37 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 125

    (38) expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    END             reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    SEMICOLON       reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    RPAREN          reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    COMMA           reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    THEN            reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    COLON           reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    IN              reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    DOT             reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    ELIF            reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    ELSE            reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! AND             [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! OR              [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 38 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 126

    (39) expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    END             reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    SEMICOLON       reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    RPAREN          reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    COMMA           reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    THEN            reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    COLON           reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    IN              reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    DOT             reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    ELIF            reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    ELSE            reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! AND             [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! OR              [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 39 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 127

    (40) expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    END             reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    SEMICOLON       reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    RPAREN          reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    COMMA           reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    THEN            reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    COLON           reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    IN              reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    DOT             reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    ELIF            reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    ELSE            reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! AND             [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! OR              [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 40 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 128

    (41) expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    END             reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    SEMICOLON       reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    RPAREN          reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    COMMA           reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    THEN            reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    COLON           reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    IN              reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    DOT             reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    ELIF            reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    ELSE            reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! AND             [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! OR              [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 41 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 129

    (42) expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    END             reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    COMMA           reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    THEN            reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    COLON           reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    IN              reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    DOT             reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    ELIF            reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    ELSE            reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 42 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 130

    (43) expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    END             reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    COMMA           reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    THEN            reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    COLON           reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    IN              reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    DOT             reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    ELIF            reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    ELSE            reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 43 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 131

    (44) expression -> IDENTIFIER EQUALS_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    END             reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    COMMA           reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    THEN            reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    COLON           reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    IN              reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    DOT             reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    ELIF            reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    ELSE            reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 44 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 132

    (45) expression -> IDENTIFIER UNEQUALS_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    END             reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    COMMA           reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    THEN            reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    COLON           reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    IN              reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    DOT             reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    ELIF            reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    ELSE            reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! AND             [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! OR              [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 45 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 133

    (46) expression -> IDENTIFIER AND_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    END             reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    SEMICOLON       reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    RPAREN          reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    COMMA           reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    THEN            reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    COLON           reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    IN              reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    DOT             reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    ELIF            reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    ELSE            reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! AND             [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! OR              [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 46 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 134

    (47) expression -> IDENTIFIER OR_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    END             reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    SEMICOLON       reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    RPAREN          reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    COMMA           reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    THEN            reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    COLON           reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    IN              reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    DOT             reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    ELIF            reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    ELSE            reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! AND             [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! OR              [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 47 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 135

    (48) expression -> IDENTIFIER XOR_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    END             reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    SEMICOLON       reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    RPAREN          reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    COMMA           reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    THEN            reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    COLON           reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    IN              reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    DOT             reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    ELIF            reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    ELSE            reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! AND             [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! OR              [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 48 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 136

    (49) expression -> IDENTIFIER EXP_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    END             reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    SEMICOLON       reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    RPAREN          reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    COMMA           reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    THEN            reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    COLON           reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    IN              reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    DOT             reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    ELIF            reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    ELSE            reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! AND             [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! OR              [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 49 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 137

    (50) expression -> IDENTIFIER MOD_ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    END             reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    SEMICOLON       reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    RPAREN          reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    COMMA           reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    THEN            reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    COLON           reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    IN              reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    DOT             reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    ELIF            reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    ELSE            reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MOD             [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! EXP             [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! AND             [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! OR              [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! XOR             [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! POWER           [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! IMAG            [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! CONS            [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! GREATER_THAN    [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! SMALLER_THAN    [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! UNEQUALS        [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 50 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]

    comparison_op                  shift and go to state 49

state 138

    (5) atomar -> LPAREN expression RPAREN .

    PLUS            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    DIVIDE_CEIL     reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    DIVIDE_FLOOR    reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    MOD             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    EXP             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    AND             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    OR              reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    XOR             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    POWER           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    IMAG            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    OPEN_BRACKETS   reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    CONS            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    SMALLER_THAN    reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    UNEQUALS        reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    SMALLER_EQUALS  reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    GREATER_EQUALS  reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    END             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    CLOSED_BRACKETS reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    THEN            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    COLON           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    IN              reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    DOT             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    ELIF            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)


state 139

    (93) expression -> LET IDENTIFIER EQUALS . expression IN expression DOT
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 162
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 140

    (94) expression -> ECHO LPAREN param_list . RPAREN

    RPAREN          shift and go to state 163


state 141

    (95) expression -> LENGTH LPAREN param_list . RPAREN

    RPAREN          shift and go to state 164


state 142

    (96) expression -> LIST LPAREN param_list . RPAREN

    RPAREN          shift and go to state 165


state 143

    (104) expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .

    PLUS            reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    MINUS           reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    TIMES           reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    DIVIDE          reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    DIVIDE_CEIL     reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    DIVIDE_FLOOR    reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    MOD             reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    EXP             reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    AND             reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    OR              reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    XOR             reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    POWER           reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    IMAG            reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    LPAREN          reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    OPEN_BRACKETS   reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    CONS            reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    GREATER_THAN    reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    SMALLER_THAN    reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    UNEQUALS        reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    EQUALS          reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    SMALLER_EQUALS  reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    GREATER_EQUALS  reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    END             reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    SEMICOLON       reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    RPAREN          reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    COMMA           reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    CLOSED_BRACKETS reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    THEN            reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    COLON           reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    IN              reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    DOT             reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    ELIF            reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    ELSE            reduce using rule 104 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)


state 144

    (105) expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .

    PLUS            reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    MINUS           reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    TIMES           reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    DIVIDE          reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    DIVIDE_CEIL     reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    DIVIDE_FLOOR    reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    MOD             reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    EXP             reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    AND             reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    OR              reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    XOR             reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    POWER           reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    IMAG            reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    LPAREN          reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    OPEN_BRACKETS   reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    CONS            reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    GREATER_THAN    reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    SMALLER_THAN    reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    UNEQUALS        reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    EQUALS          reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    SMALLER_EQUALS  reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    GREATER_EQUALS  reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    END             reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    SEMICOLON       reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    RPAREN          reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    COMMA           reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    CLOSED_BRACKETS reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    THEN            reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    COLON           reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    IN              reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    DOT             reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    ELIF            reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    ELSE            reduce using rule 105 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)


state 145

    (97) param_list -> expression COMMA . param_list
    (97) param_list -> . expression COMMA param_list
    (98) param_list -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 86
    param_list                     shift and go to state 166
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 146

    (57) if_statement -> IF expression THEN . statements DOT
    (58) if_statement -> IF expression THEN . statements else_elif_body DOT
    (55) statements -> . statements SEMICOLON statement
    (56) statements -> . statement
    (54) statement -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 5
    statements                     shift and go to state 167
    statement                      shift and go to state 4
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 147

    (62) while_statement -> WHILE expression THEN . statements DOT
    (55) statements -> . statements SEMICOLON statement
    (56) statements -> . statement
    (54) statement -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 5
    statements                     shift and go to state 168
    statement                      shift and go to state 4
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 148

    (64) loop_statement -> LOOP IDENTIFIER IN . interval LOOPTHEN statements DOT
    (65) interval -> . OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS
    (66) interval -> . CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS
    (67) interval -> . OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS
    (68) interval -> . CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS

    OPEN_BRACKETS   shift and go to state 170
    CLOSED_BRACKETS shift and go to state 171

    interval                       shift and go to state 169

state 149

    (70) lambda -> LAMBDA parameter LAMBDA_ARROW . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 172
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 150

    (72) parameter -> LPAREN parameter_pos . RPAREN

    RPAREN          shift and go to state 173


state 151

    (75) parameter_pos -> parameter_pos_list .

    RPAREN          reduce using rule 75 (parameter_pos -> parameter_pos_list .)


state 152

    (76) parameter_pos_list -> IDENTIFIER . COMMA parameter_pos_list
    (77) parameter_pos_list -> IDENTIFIER .
    (80) parameter_kw_list -> IDENTIFIER . COLON expression COMMA parameter_kw_list
    (81) parameter_kw_list -> IDENTIFIER . COLON expression
    (83) parameter_infty -> IDENTIFIER . DOTS

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 77 (parameter_pos_list -> IDENTIFIER .)
    COLON           shift and go to state 175
    DOTS            shift and go to state 176


state 153

    (78) parameter_pos_list -> parameter_keywords .

    RPAREN          reduce using rule 78 (parameter_pos_list -> parameter_keywords .)


state 154

    (79) parameter_keywords -> parameter_kw_list .

    RPAREN          reduce using rule 79 (parameter_keywords -> parameter_kw_list .)


state 155

    (82) parameter_kw_list -> parameter_infty .

    RPAREN          reduce using rule 82 (parameter_kw_list -> parameter_infty .)


state 156

    (86) parameter_pos_expr -> expression COMMA . parameter_pos_expr
    (86) parameter_pos_expr -> . expression COMMA parameter_pos_expr
    (87) parameter_pos_expr -> . expression
    (88) parameter_pos_expr -> . parameter_keywords_expr
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (89) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (90) parameter_keywords_expr -> . expression COLON expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 108
    parameter_pos_expr             shift and go to state 177
    parameter_keywords_expr        shift and go to state 112
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 157

    (89) parameter_keywords_expr -> expression COLON . expression COMMA parameter_keywords_expr
    (90) parameter_keywords_expr -> expression COLON . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 178
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 158

    (92) expression -> expression LPAREN parameter_expr RPAREN .

    PLUS            reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    MINUS           reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    TIMES           reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    DIVIDE          reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    DIVIDE_CEIL     reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    DIVIDE_FLOOR    reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    MOD             reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    EXP             reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    AND             reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    OR              reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    XOR             reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    POWER           reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    IMAG            reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    LPAREN          reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    OPEN_BRACKETS   reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    CONS            reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    GREATER_THAN    reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    SMALLER_THAN    reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    UNEQUALS        reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    EQUALS          reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    SMALLER_EQUALS  reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    GREATER_EQUALS  reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    END             reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    SEMICOLON       reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    RPAREN          reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    COMMA           reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    CLOSED_BRACKETS reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    THEN            reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    COLON           reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    IN              reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    DOT             reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    ELIF            reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)
    ELSE            reduce using rule 92 (expression -> expression LPAREN parameter_expr RPAREN .)


state 159

    (101) expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .

    PLUS            reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    MINUS           reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    TIMES           reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    DIVIDE          reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    DIVIDE_CEIL     reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    DIVIDE_FLOOR    reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    MOD             reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    EXP             reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    AND             reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    OR              reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    XOR             reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    POWER           reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    IMAG            reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    LPAREN          reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    OPEN_BRACKETS   reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    CONS            reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    GREATER_THAN    reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    SMALLER_THAN    reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    UNEQUALS        reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    EQUALS          reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    SMALLER_EQUALS  reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    GREATER_EQUALS  reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    END             reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    SEMICOLON       reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    RPAREN          reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    COMMA           reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    CLOSED_BRACKETS reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    THEN            reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    COLON           reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    IN              reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    DOT             reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    ELIF            reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)
    ELSE            reduce using rule 101 (expression -> expression OPEN_BRACKETS expression CLOSED_BRACKETS .)


state 160

    (99) expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .

    PLUS            reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    MINUS           reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    TIMES           reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    DIVIDE          reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    DIVIDE_CEIL     reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    DIVIDE_FLOOR    reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    MOD             reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    EXP             reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    AND             reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    OR              reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    XOR             reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    POWER           reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    IMAG            reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    LPAREN          reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    OPEN_BRACKETS   reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    CONS            reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    GREATER_THAN    reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    SMALLER_THAN    reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    UNEQUALS        reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    EQUALS          reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    SMALLER_EQUALS  reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    GREATER_EQUALS  reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    END             reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    SEMICOLON       reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    RPAREN          reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    COMMA           reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    CLOSED_BRACKETS reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    THEN            reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    COLON           reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    IN              reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    DOT             reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    ELIF            reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)
    ELSE            reduce using rule 99 (expression -> expression OPEN_BRACKETS DOT CLOSED_BRACKETS .)


state 161

    (100) expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .

    PLUS            reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    MINUS           reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    TIMES           reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    DIVIDE          reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    DIVIDE_CEIL     reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    DIVIDE_FLOOR    reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    MOD             reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    EXP             reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    AND             reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    OR              reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    XOR             reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    POWER           reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    IMAG            reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    LPAREN          reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    OPEN_BRACKETS   reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    CONS            reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    GREATER_THAN    reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    SMALLER_THAN    reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    UNEQUALS        reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    EQUALS          reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    SMALLER_EQUALS  reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    GREATER_EQUALS  reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    END             reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    SEMICOLON       reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    RPAREN          reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    COMMA           reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    CLOSED_BRACKETS reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    THEN            reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    COLON           reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    IN              reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    DOT             reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    ELIF            reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)
    ELSE            reduce using rule 100 (expression -> expression OPEN_BRACKETS TIMES CLOSED_BRACKETS .)


state 162

    (93) expression -> LET IDENTIFIER EQUALS expression . IN expression DOT
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    IN              shift and go to state 179
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 163

    (94) expression -> ECHO LPAREN param_list RPAREN .

    PLUS            reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    MINUS           reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    TIMES           reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    DIVIDE          reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    DIVIDE_CEIL     reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    DIVIDE_FLOOR    reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    MOD             reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    EXP             reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    AND             reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    OR              reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    XOR             reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    POWER           reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    IMAG            reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    LPAREN          reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    OPEN_BRACKETS   reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    CONS            reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    GREATER_THAN    reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    SMALLER_THAN    reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    UNEQUALS        reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    EQUALS          reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    SMALLER_EQUALS  reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    GREATER_EQUALS  reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    END             reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    SEMICOLON       reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    RPAREN          reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    COMMA           reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    CLOSED_BRACKETS reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    THEN            reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    COLON           reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    IN              reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    DOT             reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    ELIF            reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)
    ELSE            reduce using rule 94 (expression -> ECHO LPAREN param_list RPAREN .)


state 164

    (95) expression -> LENGTH LPAREN param_list RPAREN .

    PLUS            reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    MINUS           reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    TIMES           reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    DIVIDE          reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    DIVIDE_CEIL     reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    DIVIDE_FLOOR    reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    MOD             reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    EXP             reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    AND             reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    OR              reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    XOR             reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    POWER           reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    IMAG            reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    LPAREN          reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    OPEN_BRACKETS   reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    CONS            reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    GREATER_THAN    reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    SMALLER_THAN    reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    UNEQUALS        reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    EQUALS          reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    SMALLER_EQUALS  reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    GREATER_EQUALS  reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    END             reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    SEMICOLON       reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    RPAREN          reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    COMMA           reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    CLOSED_BRACKETS reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    THEN            reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    COLON           reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    IN              reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    DOT             reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    ELIF            reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)
    ELSE            reduce using rule 95 (expression -> LENGTH LPAREN param_list RPAREN .)


state 165

    (96) expression -> LIST LPAREN param_list RPAREN .

    PLUS            reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    MINUS           reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    TIMES           reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    DIVIDE          reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    DIVIDE_CEIL     reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    DIVIDE_FLOOR    reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    MOD             reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    EXP             reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    AND             reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    OR              reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    XOR             reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    POWER           reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    IMAG            reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    LPAREN          reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    OPEN_BRACKETS   reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    CONS            reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    GREATER_THAN    reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    SMALLER_THAN    reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    UNEQUALS        reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    EQUALS          reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    SMALLER_EQUALS  reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    GREATER_EQUALS  reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    END             reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    SEMICOLON       reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    RPAREN          reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    COMMA           reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    CLOSED_BRACKETS reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    THEN            reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    COLON           reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    IN              reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    DOT             reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    ELIF            reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)
    ELSE            reduce using rule 96 (expression -> LIST LPAREN param_list RPAREN .)


state 166

    (97) param_list -> expression COMMA param_list .

    CLOSED_BRACKETS reduce using rule 97 (param_list -> expression COMMA param_list .)
    RPAREN          reduce using rule 97 (param_list -> expression COMMA param_list .)


state 167

    (57) if_statement -> IF expression THEN statements . DOT
    (58) if_statement -> IF expression THEN statements . else_elif_body DOT
    (55) statements -> statements . SEMICOLON statement
    (59) else_elif_body -> . ELIF IF expression THEN statements else_elif_body
    (60) else_elif_body -> . ELSE statements

    DOT             shift and go to state 180
    SEMICOLON       shift and go to state 182
    ELIF            shift and go to state 183
    ELSE            shift and go to state 184

    else_elif_body                 shift and go to state 181

state 168

    (62) while_statement -> WHILE expression THEN statements . DOT
    (55) statements -> statements . SEMICOLON statement

    DOT             shift and go to state 185
    SEMICOLON       shift and go to state 182


state 169

    (64) loop_statement -> LOOP IDENTIFIER IN interval . LOOPTHEN statements DOT

    LOOPTHEN        shift and go to state 186


state 170

    (65) interval -> OPEN_BRACKETS . expression COMMA expression CLOSED_BRACKETS
    (67) interval -> OPEN_BRACKETS . expression COMMA expression OPEN_BRACKETS
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 187
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 171

    (66) interval -> CLOSED_BRACKETS . expression COMMA expression CLOSED_BRACKETS
    (68) interval -> CLOSED_BRACKETS . expression COMMA expression OPEN_BRACKETS
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 188
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 172

    (70) lambda -> LAMBDA parameter LAMBDA_ARROW expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    OPEN_BRACKETS   reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    CONS            reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    END             reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    SEMICOLON       reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    RPAREN          reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    COMMA           reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    CLOSED_BRACKETS reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    THEN            reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    COLON           reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    IN              reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    DOT             reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    ELIF            reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    ELSE            reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! PLUS            [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! MINUS           [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! TIMES           [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! DIVIDE          [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! MOD             [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! EXP             [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! AND             [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! OR              [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! XOR             [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! POWER           [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! IMAG            [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! LPAREN          [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! GREATER_THAN    [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! SMALLER_THAN    [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! UNEQUALS        [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! EQUALS          [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! SMALLER_EQUALS  [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! GREATER_EQUALS  [ reduce using rule 70 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! OPEN_BRACKETS   [ shift and go to state 47 ]
  ! CONS            [ shift and go to state 48 ]

    comparison_op                  shift and go to state 49

state 173

    (72) parameter -> LPAREN parameter_pos RPAREN .

    LAMBDA_ARROW    reduce using rule 72 (parameter -> LPAREN parameter_pos RPAREN .)


state 174

    (76) parameter_pos_list -> IDENTIFIER COMMA . parameter_pos_list
    (76) parameter_pos_list -> . IDENTIFIER COMMA parameter_pos_list
    (77) parameter_pos_list -> . IDENTIFIER
    (78) parameter_pos_list -> . parameter_keywords
    (79) parameter_keywords -> . parameter_kw_list
    (80) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (81) parameter_kw_list -> . IDENTIFIER COLON expression
    (82) parameter_kw_list -> . parameter_infty
    (83) parameter_infty -> . IDENTIFIER DOTS

    IDENTIFIER      shift and go to state 152

    parameter_pos_list             shift and go to state 189
    parameter_keywords             shift and go to state 153
    parameter_kw_list              shift and go to state 154
    parameter_infty                shift and go to state 155

state 175

    (80) parameter_kw_list -> IDENTIFIER COLON . expression COMMA parameter_kw_list
    (81) parameter_kw_list -> IDENTIFIER COLON . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 190
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 176

    (83) parameter_infty -> IDENTIFIER DOTS .

    RPAREN          reduce using rule 83 (parameter_infty -> IDENTIFIER DOTS .)


state 177

    (86) parameter_pos_expr -> expression COMMA parameter_pos_expr .

    RPAREN          reduce using rule 86 (parameter_pos_expr -> expression COMMA parameter_pos_expr .)


state 178

    (89) parameter_keywords_expr -> expression COLON expression . COMMA parameter_keywords_expr
    (90) parameter_keywords_expr -> expression COLON expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    COMMA           shift and go to state 191
    RPAREN          reduce using rule 90 (parameter_keywords_expr -> expression COLON expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 179

    (93) expression -> LET IDENTIFIER EQUALS expression IN . expression DOT
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 192
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 180

    (57) if_statement -> IF expression THEN statements DOT .

    PLUS            reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    MINUS           reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    TIMES           reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    DIVIDE          reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    DIVIDE_CEIL     reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    DIVIDE_FLOOR    reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    MOD             reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    EXP             reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    AND             reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    OR              reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    XOR             reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    POWER           reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    IMAG            reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    LPAREN          reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    OPEN_BRACKETS   reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    CONS            reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    GREATER_THAN    reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    SMALLER_THAN    reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    UNEQUALS        reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    EQUALS          reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    SMALLER_EQUALS  reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    GREATER_EQUALS  reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    END             reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    SEMICOLON       reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    RPAREN          reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    COMMA           reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    CLOSED_BRACKETS reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    THEN            reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    COLON           reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    IN              reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    DOT             reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    ELIF            reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)
    ELSE            reduce using rule 57 (if_statement -> IF expression THEN statements DOT .)


state 181

    (58) if_statement -> IF expression THEN statements else_elif_body . DOT

    DOT             shift and go to state 193


state 182

    (55) statements -> statements SEMICOLON . statement
    (54) statement -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    statement                      shift and go to state 95
    expression                     shift and go to state 5
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 183

    (59) else_elif_body -> ELIF . IF expression THEN statements else_elif_body

    IF              shift and go to state 194


state 184

    (60) else_elif_body -> ELSE . statements
    (55) statements -> . statements SEMICOLON statement
    (56) statements -> . statement
    (54) statement -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    statements                     shift and go to state 195
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 185

    (62) while_statement -> WHILE expression THEN statements DOT .

    PLUS            reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    MINUS           reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    TIMES           reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    DIVIDE          reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    DIVIDE_CEIL     reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    DIVIDE_FLOOR    reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    MOD             reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    EXP             reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    AND             reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    OR              reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    XOR             reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    POWER           reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    IMAG            reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    LPAREN          reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    OPEN_BRACKETS   reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    CONS            reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    GREATER_THAN    reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    SMALLER_THAN    reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    UNEQUALS        reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    EQUALS          reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    SMALLER_EQUALS  reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    GREATER_EQUALS  reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    END             reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    SEMICOLON       reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    RPAREN          reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    COMMA           reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    CLOSED_BRACKETS reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    THEN            reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    COLON           reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    IN              reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    DOT             reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    ELIF            reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)
    ELSE            reduce using rule 62 (while_statement -> WHILE expression THEN statements DOT .)


state 186

    (64) loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN . statements DOT
    (55) statements -> . statements SEMICOLON statement
    (56) statements -> . statement
    (54) statement -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    statements                     shift and go to state 196
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 187

    (65) interval -> OPEN_BRACKETS expression . COMMA expression CLOSED_BRACKETS
    (67) interval -> OPEN_BRACKETS expression . COMMA expression OPEN_BRACKETS
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    COMMA           shift and go to state 197
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 188

    (66) interval -> CLOSED_BRACKETS expression . COMMA expression CLOSED_BRACKETS
    (68) interval -> CLOSED_BRACKETS expression . COMMA expression OPEN_BRACKETS
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    COMMA           shift and go to state 198
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 189

    (76) parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list .

    RPAREN          reduce using rule 76 (parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list .)


state 190

    (80) parameter_kw_list -> IDENTIFIER COLON expression . COMMA parameter_kw_list
    (81) parameter_kw_list -> IDENTIFIER COLON expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    COMMA           shift and go to state 199
    RPAREN          reduce using rule 81 (parameter_kw_list -> IDENTIFIER COLON expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 191

    (89) parameter_keywords_expr -> expression COLON expression COMMA . parameter_keywords_expr
    (89) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (90) parameter_keywords_expr -> . expression COLON expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 200
    parameter_keywords_expr        shift and go to state 201
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 192

    (93) expression -> LET IDENTIFIER EQUALS expression IN expression . DOT
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    DOT             shift and go to state 202
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 193

    (58) if_statement -> IF expression THEN statements else_elif_body DOT .

    PLUS            reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    MINUS           reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    TIMES           reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    DIVIDE          reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    DIVIDE_CEIL     reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    DIVIDE_FLOOR    reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    MOD             reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    EXP             reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    AND             reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    OR              reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    XOR             reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    POWER           reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    IMAG            reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    LPAREN          reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    OPEN_BRACKETS   reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    CONS            reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    GREATER_THAN    reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    SMALLER_THAN    reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    UNEQUALS        reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    EQUALS          reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    SMALLER_EQUALS  reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    GREATER_EQUALS  reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    END             reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    SEMICOLON       reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    RPAREN          reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    COMMA           reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    CLOSED_BRACKETS reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    THEN            reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    COLON           reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    IN              reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    DOT             reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    ELIF            reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    ELSE            reduce using rule 58 (if_statement -> IF expression THEN statements else_elif_body DOT .)


state 194

    (59) else_elif_body -> ELIF IF . expression THEN statements else_elif_body
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 203
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 195

    (60) else_elif_body -> ELSE statements .
    (55) statements -> statements . SEMICOLON statement

    DOT             reduce using rule 60 (else_elif_body -> ELSE statements .)
    SEMICOLON       shift and go to state 182


state 196

    (64) loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements . DOT
    (55) statements -> statements . SEMICOLON statement

    DOT             shift and go to state 204
    SEMICOLON       shift and go to state 182


state 197

    (65) interval -> OPEN_BRACKETS expression COMMA . expression CLOSED_BRACKETS
    (67) interval -> OPEN_BRACKETS expression COMMA . expression OPEN_BRACKETS
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 205
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 198

    (66) interval -> CLOSED_BRACKETS expression COMMA . expression CLOSED_BRACKETS
    (68) interval -> CLOSED_BRACKETS expression COMMA . expression OPEN_BRACKETS
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 206
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 199

    (80) parameter_kw_list -> IDENTIFIER COLON expression COMMA . parameter_kw_list
    (80) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (81) parameter_kw_list -> . IDENTIFIER COLON expression
    (82) parameter_kw_list -> . parameter_infty
    (83) parameter_infty -> . IDENTIFIER DOTS

    IDENTIFIER      shift and go to state 207

    parameter_kw_list              shift and go to state 208
    parameter_infty                shift and go to state 155

state 200

    (89) parameter_keywords_expr -> expression . COLON expression COMMA parameter_keywords_expr
    (90) parameter_keywords_expr -> expression . COLON expression
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    COLON           shift and go to state 157
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 201

    (89) parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr .

    RPAREN          reduce using rule 89 (parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr .)


state 202

    (93) expression -> LET IDENTIFIER EQUALS expression IN expression DOT .

    PLUS            reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    MINUS           reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    TIMES           reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    DIVIDE          reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    DIVIDE_CEIL     reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    DIVIDE_FLOOR    reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    MOD             reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    EXP             reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    AND             reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    OR              reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    XOR             reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    POWER           reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    IMAG            reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    LPAREN          reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    OPEN_BRACKETS   reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    CONS            reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    GREATER_THAN    reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    SMALLER_THAN    reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    UNEQUALS        reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    EQUALS          reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    SMALLER_EQUALS  reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    GREATER_EQUALS  reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    END             reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    SEMICOLON       reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    RPAREN          reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    COMMA           reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    CLOSED_BRACKETS reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    THEN            reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    COLON           reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    IN              reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    DOT             reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    ELIF            reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    ELSE            reduce using rule 93 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)


state 203

    (59) else_elif_body -> ELIF IF expression . THEN statements else_elif_body
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    THEN            shift and go to state 209
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    OPEN_BRACKETS   shift and go to state 47
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 204

    (64) loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .

    PLUS            reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    MINUS           reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    TIMES           reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    DIVIDE          reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    DIVIDE_CEIL     reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    DIVIDE_FLOOR    reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    MOD             reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    EXP             reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    AND             reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    OR              reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    XOR             reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    POWER           reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    IMAG            reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    LPAREN          reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    OPEN_BRACKETS   reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    CONS            reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    GREATER_THAN    reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    SMALLER_THAN    reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    UNEQUALS        reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    EQUALS          reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    SMALLER_EQUALS  reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    GREATER_EQUALS  reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    END             reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    SEMICOLON       reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    RPAREN          reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    COMMA           reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    CLOSED_BRACKETS reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    THEN            reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    COLON           reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    IN              reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    DOT             reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    ELIF            reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    ELSE            reduce using rule 64 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)


state 205

    (65) interval -> OPEN_BRACKETS expression COMMA expression . CLOSED_BRACKETS
    (67) interval -> OPEN_BRACKETS expression COMMA expression . OPEN_BRACKETS
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    CLOSED_BRACKETS shift and go to state 211
    OPEN_BRACKETS   shift and go to state 210
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 206

    (66) interval -> CLOSED_BRACKETS expression COMMA expression . CLOSED_BRACKETS
    (68) interval -> CLOSED_BRACKETS expression COMMA expression . OPEN_BRACKETS
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . DIVIDE_CEIL expression
    (11) expression -> expression . DIVIDE_FLOOR expression
    (12) expression -> expression . MOD expression
    (13) expression -> expression . EXP expression
    (14) expression -> expression . AND expression
    (15) expression -> expression . OR expression
    (16) expression -> expression . XOR expression
    (17) expression -> expression . POWER expression
    (21) expression -> expression . IMAG
    (92) expression -> expression . LPAREN parameter_expr RPAREN
    (99) expression -> expression . OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> expression . OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> expression . OPEN_BRACKETS expression CLOSED_BRACKETS
    (103) expression -> expression . CONS expression
    (23) comparison -> expression . comparison_op expression
    (26) comparison_op -> . GREATER_THAN
    (27) comparison_op -> . SMALLER_THAN
    (28) comparison_op -> . UNEQUALS
    (29) comparison_op -> . EQUALS
    (30) comparison_op -> . SMALLER_EQUALS
    (31) comparison_op -> . GREATER_EQUALS

    CLOSED_BRACKETS shift and go to state 212
    OPEN_BRACKETS   shift and go to state 213
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    DIVIDE_CEIL     shift and go to state 37
    DIVIDE_FLOOR    shift and go to state 38
    MOD             shift and go to state 39
    EXP             shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    POWER           shift and go to state 44
    IMAG            shift and go to state 45
    LPAREN          shift and go to state 46
    CONS            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

    comparison_op                  shift and go to state 49

state 207

    (80) parameter_kw_list -> IDENTIFIER . COLON expression COMMA parameter_kw_list
    (81) parameter_kw_list -> IDENTIFIER . COLON expression
    (83) parameter_infty -> IDENTIFIER . DOTS

    COLON           shift and go to state 175
    DOTS            shift and go to state 176


state 208

    (80) parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list .

    RPAREN          reduce using rule 80 (parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list .)


state 209

    (59) else_elif_body -> ELIF IF expression THEN . statements else_elif_body
    (55) statements -> . statements SEMICOLON statement
    (56) statements -> . statement
    (54) statement -> . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 5
    statements                     shift and go to state 214
    statement                      shift and go to state 4
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 210

    (67) interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS .
    (99) expression -> expression OPEN_BRACKETS . DOT CLOSED_BRACKETS
    (100) expression -> expression OPEN_BRACKETS . TIMES CLOSED_BRACKETS
    (101) expression -> expression OPEN_BRACKETS . expression CLOSED_BRACKETS
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    LOOPTHEN        reduce using rule 67 (interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS .)
    DOT             shift and go to state 114
    TIMES           shift and go to state 115
    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 113
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 211

    (65) interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS .

    LOOPTHEN        reduce using rule 65 (interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS .)


state 212

    (66) interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS .

    LOOPTHEN        reduce using rule 66 (interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS .)


state 213

    (68) interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS .
    (99) expression -> expression OPEN_BRACKETS . DOT CLOSED_BRACKETS
    (100) expression -> expression OPEN_BRACKETS . TIMES CLOSED_BRACKETS
    (101) expression -> expression OPEN_BRACKETS . expression CLOSED_BRACKETS
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression DIVIDE_CEIL expression
    (11) expression -> . expression DIVIDE_FLOOR expression
    (12) expression -> . expression MOD expression
    (13) expression -> . expression EXP expression
    (14) expression -> . expression AND expression
    (15) expression -> . expression OR expression
    (16) expression -> . expression XOR expression
    (17) expression -> . expression POWER expression
    (18) expression -> . NOT expression
    (19) expression -> . MINUS expression
    (20) expression -> . PLUS expression
    (21) expression -> . expression IMAG
    (22) expression -> . atomar
    (25) expression -> . comparison
    (32) expression -> . IDENTIFIER ASSIGN expression
    (33) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (34) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (35) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (36) expression -> . IDENTIFIER POWER_ASSIGN expression
    (37) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (38) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (40) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (41) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (44) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (45) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER AND_ASSIGN expression
    (47) expression -> . IDENTIFIER OR_ASSIGN expression
    (48) expression -> . IDENTIFIER XOR_ASSIGN expression
    (49) expression -> . IDENTIFIER EXP_ASSIGN expression
    (50) expression -> . IDENTIFIER MOD_ASSIGN expression
    (53) expression -> . sequence
    (61) expression -> . if_statement
    (63) expression -> . while_statement
    (69) expression -> . loop_statement
    (71) expression -> . lambda
    (92) expression -> . expression LPAREN parameter_expr RPAREN
    (93) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (94) expression -> . ECHO LPAREN param_list RPAREN
    (95) expression -> . LENGTH LPAREN param_list RPAREN
    (96) expression -> . LIST LPAREN param_list RPAREN
    (99) expression -> . expression OPEN_BRACKETS DOT CLOSED_BRACKETS
    (100) expression -> . expression OPEN_BRACKETS TIMES CLOSED_BRACKETS
    (101) expression -> . expression OPEN_BRACKETS expression CLOSED_BRACKETS
    (102) expression -> . NULL
    (103) expression -> . expression CONS expression
    (104) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (105) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (23) comparison -> . expression comparison_op expression
    (24) comparison -> . comparison comparison_op expression
    (51) sequence -> . BEGIN statements END
    (52) sequence -> . BEGIN statements SEMICOLON END
    (57) if_statement -> . IF expression THEN statements DOT
    (58) if_statement -> . IF expression THEN statements else_elif_body DOT
    (62) while_statement -> . WHILE expression THEN statements DOT
    (64) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (70) lambda -> . LAMBDA parameter LAMBDA_ARROW expression

    LOOPTHEN        reduce using rule 68 (interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS .)
    DOT             shift and go to state 114
    TIMES           shift and go to state 115
    NOT             shift and go to state 8
    MINUS           shift and go to state 7
    PLUS            shift and go to state 6
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LIST            shift and go to state 21
    NULL            shift and go to state 23
    OPEN_BRACKETS   shift and go to state 22
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 26
    LPAREN          shift and go to state 17
    BEGIN           shift and go to state 2
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    LOOP            shift and go to state 29
    LAMBDA          shift and go to state 30

    expression                     shift and go to state 113
    atomar                         shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    if_statement                   shift and go to state 13
    while_statement                shift and go to state 14
    loop_statement                 shift and go to state 15
    lambda                         shift and go to state 16

state 214

    (59) else_elif_body -> ELIF IF expression THEN statements . else_elif_body
    (55) statements -> statements . SEMICOLON statement
    (59) else_elif_body -> . ELIF IF expression THEN statements else_elif_body
    (60) else_elif_body -> . ELSE statements

    SEMICOLON       shift and go to state 182
    ELIF            shift and go to state 183
    ELSE            shift and go to state 184

    else_elif_body                 shift and go to state 215

state 215

    (59) else_elif_body -> ELIF IF expression THEN statements else_elif_body .

    DOT             reduce using rule 59 (else_elif_body -> ELIF IF expression THEN statements else_elif_body .)

