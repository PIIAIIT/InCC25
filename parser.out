Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> sequence
Rule 1     atomar -> NUMBER
Rule 2     atomar -> FLOAT
Rule 3     atomar -> IDENTIFIER
Rule 4     arithmetic_expression -> LPAREN expression RPAREN
Rule 5     expression -> arithmetic_expression
Rule 6     expression -> comparison
Rule 7     arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression
Rule 8     arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression
Rule 9     arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression
Rule 10    arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression
Rule 11    arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression
Rule 12    arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression
Rule 13    arithmetic_expression -> arithmetic_expression MOD arithmetic_expression
Rule 14    arithmetic_expression -> arithmetic_expression EXP arithmetic_expression
Rule 15    arithmetic_expression -> arithmetic_expression AND arithmetic_expression
Rule 16    arithmetic_expression -> arithmetic_expression OR arithmetic_expression
Rule 17    arithmetic_expression -> arithmetic_expression XOR arithmetic_expression
Rule 18    arithmetic_expression -> arithmetic_expression POWER arithmetic_expression
Rule 19    arithmetic_expression -> NOT arithmetic_expression
Rule 20    arithmetic_expression -> MINUS arithmetic_expression
Rule 21    arithmetic_expression -> PLUS arithmetic_expression
Rule 22    arithmetic_expression -> arithmetic_expression IMAG
Rule 23    arithmetic_expression -> atomar
Rule 24    comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain
Rule 25    comparison -> arithmetic_expression comparison_op arithmetic_expression
Rule 26    comparison_chain -> comparison_op arithmetic_expression comparison_chain
Rule 27    comparison_chain -> comparison_op arithmetic_expression
Rule 28    comparison_op -> GREATER_THAN
Rule 29    comparison_op -> SMALLER_THAN
Rule 30    comparison_op -> UNEQUALS
Rule 31    comparison_op -> EQUALS
Rule 32    comparison_op -> SMALLER_EQUALS
Rule 33    comparison_op -> GREATER_EQUALS
Rule 34    expression -> IDENTIFIER ASSIGN expression
Rule 35    expression -> IDENTIFIER PLUSASSIGN expression
Rule 36    expression -> IDENTIFIER MINUSASSIGN expression
Rule 37    expression -> IDENTIFIER TIMESASSIGN expression
Rule 38    expression -> IDENTIFIER POWERASSIGN expression
Rule 39    expression -> IDENTIFIER DIVIDEASSIGN expression
Rule 40    expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression
Rule 41    expression -> IDENTIFIER DIVIDE_CEILASSIGN expression
Rule 42    expression -> IDENTIFIER GREATER_THANASSIGN expression
Rule 43    expression -> IDENTIFIER SMALLER_THANASSIGN expression
Rule 44    expression -> IDENTIFIER GREATER_EQUALSASSIGN expression
Rule 45    expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression
Rule 46    expression -> IDENTIFIER EQUALSASSIGN expression
Rule 47    expression -> IDENTIFIER UNEQUALSASSIGN expression
Rule 48    expression -> IDENTIFIER ANDASSIGN expression
Rule 49    expression -> IDENTIFIER ORASSIGN expression
Rule 50    expression -> IDENTIFIER XORASSIGN expression
Rule 51    expression -> IDENTIFIER EXPASSIGN expression
Rule 52    expression -> IDENTIFIER MODASSIGN expression
Rule 53    sequence -> BEGIN statements END
Rule 54    sequence -> BEGIN statements SEMICOLON END
Rule 55    statement -> expression
Rule 56    statement -> sequence
Rule 57    statement -> if_statement
Rule 58    statement -> while_statement
Rule 59    statement -> loop_statement
Rule 60    statement -> function
Rule 61    statements -> statements SEMICOLON statement
Rule 62    statements -> statement
Rule 63    if_statement -> IF expression THEN statements ENDCOND
Rule 64    if_statement -> IF expression THEN statements else_elif_body ENDCOND
Rule 65    else_elif_body -> ELIF IF expression THEN statements else_elif_body
Rule 66    else_elif_body -> ELSE statements
Rule 67    while_statement -> WHILE expression THEN statements ENDCOND
Rule 68    loop_statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
Rule 69    interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS
Rule 70    interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS
Rule 71    interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS
Rule 72    interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS
Rule 73    expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
Rule 74    parameter -> parameter_pos
Rule 75    parameter -> empty
Rule 76    parameter_pos -> parameter_pos_list
Rule 77    parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list
Rule 78    parameter_pos_list -> IDENTIFIER
Rule 79    parameter_pos_list -> parameter_keywords
Rule 80    parameter_keywords -> parameter_kw_list
Rule 81    parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list
Rule 82    parameter_kw_list -> IDENTIFIER COLON expression
Rule 83    parameter_kw_list -> parameter_infty
Rule 84    parameter_infty -> IDENTIFIER DOTS
Rule 85    parameter_expr -> parameter_pos_expr
Rule 86    parameter_expr -> empty
Rule 87    parameter_pos_expr -> expression COMMA parameter_pos_expr
Rule 88    parameter_pos_expr -> expression
Rule 89    parameter_pos_expr -> parameter_keywords_expr
Rule 90    parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr
Rule 91    parameter_keywords_expr -> expression COLON expression
Rule 92    empty -> <empty>
Rule 93    expression -> expression LPAREN parameter_expr RPAREN
Rule 94    function -> ECHO LPAREN expression RPAREN
Rule 95    function -> LENGTH LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 15
ANDASSIGN            : 48
ASSIGN               : 34
BEGIN                : 53 54
CLOSED_BRACKETS      : 69 70 70 72
COLON                : 81 82 90 91
COMMA                : 69 70 71 72 77 81 87 90
DIVIDE               : 10
DIVIDEASSIGN         : 39
DIVIDE_CEIL          : 11
DIVIDE_CEILASSIGN    : 41
DIVIDE_FLOOR         : 12
DIVIDE_FLOORASSIGN   : 40
DOTS                 : 84
ECHO                 : 94
ELIF                 : 65
ELSE                 : 66
END                  : 53 54
ENDCOND              : 63 64 67 68
EQUALS               : 31
EQUALSASSIGN         : 46
EXP                  : 14
EXPASSIGN            : 51
FLOAT                : 2
GREATER_EQUALS       : 33
GREATER_EQUALSASSIGN : 44
GREATER_THAN         : 28
GREATER_THANASSIGN   : 42
IDENTIFIER           : 3 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 68 77 78 81 82 84
IF                   : 63 64 65
IMAG                 : 22
LAMBDA               : 73
LAMBDA_ARROW         : 73
LENGTH               : 95
LOOP                 : 68
LOOPIN               : 68
LOOPTHEN             : 68
LPAREN               : 4 73 93 94 95
MINUS                : 8 20
MINUSASSIGN          : 36
MOD                  : 13
MODASSIGN            : 52
NOT                  : 19
NUMBER               : 1
OPEN_BRACKETS        : 69 71 71 72
OR                   : 16
ORASSIGN             : 49
PLUS                 : 7 21
PLUSASSIGN           : 35
POWER                : 18
POWERASSIGN          : 38
RPAREN               : 4 73 93 94 95
SEMICOLON            : 54 61
SMALLER_EQUALS       : 32
SMALLER_EQUALSASSIGN : 45
SMALLER_THAN         : 29
SMALLER_THANASSIGN   : 43
THEN                 : 63 64 65 67
TIMES                : 9
TIMESASSIGN          : 37
UNEQUALS             : 30
UNEQUALSASSIGN       : 47
WHILE                : 67
XOR                  : 17
XORASSIGN            : 50
error                : 

Nonterminals, with rules where they appear

arithmetic_expression : 5 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 20 21 22 24 24 25 25 26 27
atomar               : 23
comparison           : 6
comparison_chain     : 24 26
comparison_op        : 24 25 26 27
else_elif_body       : 64 65
empty                : 75 86
expression           : 4 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 55 63 64 65 67 69 69 70 70 71 71 72 72 73 81 82 87 88 90 90 91 91 93 94 95
function             : 60
if_statement         : 57
interval             : 68
loop_statement       : 59
parameter            : 73
parameter_expr       : 93
parameter_infty      : 83
parameter_keywords   : 79
parameter_keywords_expr : 89 90
parameter_kw_list    : 80 81
parameter_pos        : 74
parameter_pos_expr   : 85 87
parameter_pos_list   : 76 77
sequence             : 56 0
statement            : 61 62
statements           : 53 54 61 63 64 65 66 67 68
while_statement      : 58

Parsing method: LALR

state 0

    (0) S' -> . sequence
    (53) sequence -> . BEGIN statements END
    (54) sequence -> . BEGIN statements SEMICOLON END

    BEGIN           shift and go to state 2

    sequence                       shift and go to state 1

state 1

    (0) S' -> sequence .



state 2

    (53) sequence -> BEGIN . statements END
    (54) sequence -> BEGIN . statements SEMICOLON END
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (55) statement -> . expression
    (56) statement -> . sequence
    (57) statement -> . if_statement
    (58) statement -> . while_statement
    (59) statement -> . loop_statement
    (60) statement -> . function
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (53) sequence -> . BEGIN statements END
    (54) sequence -> . BEGIN statements SEMICOLON END
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (94) function -> . ECHO LPAREN expression RPAREN
    (95) function -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    BEGIN           shift and go to state 2
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    LOOP            shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    statements                     shift and go to state 3
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    sequence                       shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    loop_statement                 shift and go to state 9
    function                       shift and go to state 10
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 3

    (53) sequence -> BEGIN statements . END
    (54) sequence -> BEGIN statements . SEMICOLON END
    (61) statements -> statements . SEMICOLON statement

    END             shift and go to state 27
    SEMICOLON       shift and go to state 28


state 4

    (62) statements -> statement .

    END             reduce using rule 62 (statements -> statement .)
    SEMICOLON       reduce using rule 62 (statements -> statement .)
    ENDCOND         reduce using rule 62 (statements -> statement .)
    ELIF            reduce using rule 62 (statements -> statement .)
    ELSE            reduce using rule 62 (statements -> statement .)


state 5

    (55) statement -> expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    END             reduce using rule 55 (statement -> expression .)
    SEMICOLON       reduce using rule 55 (statement -> expression .)
    ENDCOND         reduce using rule 55 (statement -> expression .)
    ELIF            reduce using rule 55 (statement -> expression .)
    ELSE            reduce using rule 55 (statement -> expression .)
    LPAREN          shift and go to state 29


state 6

    (56) statement -> sequence .

    END             reduce using rule 56 (statement -> sequence .)
    SEMICOLON       reduce using rule 56 (statement -> sequence .)
    ENDCOND         reduce using rule 56 (statement -> sequence .)
    ELIF            reduce using rule 56 (statement -> sequence .)
    ELSE            reduce using rule 56 (statement -> sequence .)


state 7

    (57) statement -> if_statement .

    END             reduce using rule 57 (statement -> if_statement .)
    SEMICOLON       reduce using rule 57 (statement -> if_statement .)
    ENDCOND         reduce using rule 57 (statement -> if_statement .)
    ELIF            reduce using rule 57 (statement -> if_statement .)
    ELSE            reduce using rule 57 (statement -> if_statement .)


state 8

    (58) statement -> while_statement .

    END             reduce using rule 58 (statement -> while_statement .)
    SEMICOLON       reduce using rule 58 (statement -> while_statement .)
    ENDCOND         reduce using rule 58 (statement -> while_statement .)
    ELIF            reduce using rule 58 (statement -> while_statement .)
    ELSE            reduce using rule 58 (statement -> while_statement .)


state 9

    (59) statement -> loop_statement .

    END             reduce using rule 59 (statement -> loop_statement .)
    SEMICOLON       reduce using rule 59 (statement -> loop_statement .)
    ENDCOND         reduce using rule 59 (statement -> loop_statement .)
    ELIF            reduce using rule 59 (statement -> loop_statement .)
    ELSE            reduce using rule 59 (statement -> loop_statement .)


state 10

    (60) statement -> function .

    END             reduce using rule 60 (statement -> function .)
    SEMICOLON       reduce using rule 60 (statement -> function .)
    ENDCOND         reduce using rule 60 (statement -> function .)
    ELIF            reduce using rule 60 (statement -> function .)
    ELSE            reduce using rule 60 (statement -> function .)


state 11

    (5) expression -> arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG
    (24) comparison -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (25) comparison -> arithmetic_expression . comparison_op arithmetic_expression
    (28) comparison_op -> . GREATER_THAN
    (29) comparison_op -> . SMALLER_THAN
    (30) comparison_op -> . UNEQUALS
    (31) comparison_op -> . EQUALS
    (32) comparison_op -> . SMALLER_EQUALS
    (33) comparison_op -> . GREATER_EQUALS

    LPAREN          reduce using rule 5 (expression -> arithmetic_expression .)
    END             reduce using rule 5 (expression -> arithmetic_expression .)
    SEMICOLON       reduce using rule 5 (expression -> arithmetic_expression .)
    RPAREN          reduce using rule 5 (expression -> arithmetic_expression .)
    THEN            reduce using rule 5 (expression -> arithmetic_expression .)
    COMMA           reduce using rule 5 (expression -> arithmetic_expression .)
    COLON           reduce using rule 5 (expression -> arithmetic_expression .)
    ENDCOND         reduce using rule 5 (expression -> arithmetic_expression .)
    ELIF            reduce using rule 5 (expression -> arithmetic_expression .)
    ELSE            reduce using rule 5 (expression -> arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 5 (expression -> arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 5 (expression -> arithmetic_expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    DIVIDE_CEIL     shift and go to state 34
    DIVIDE_FLOOR    shift and go to state 35
    MOD             shift and go to state 36
    EXP             shift and go to state 37
    AND             shift and go to state 38
    OR              shift and go to state 39
    XOR             shift and go to state 40
    POWER           shift and go to state 41
    IMAG            shift and go to state 42
    GREATER_THAN    shift and go to state 44
    SMALLER_THAN    shift and go to state 45
    UNEQUALS        shift and go to state 46
    EQUALS          shift and go to state 47
    SMALLER_EQUALS  shift and go to state 48
    GREATER_EQUALS  shift and go to state 49

    comparison_op                  shift and go to state 43

state 12

    (6) expression -> comparison .

    LPAREN          reduce using rule 6 (expression -> comparison .)
    END             reduce using rule 6 (expression -> comparison .)
    SEMICOLON       reduce using rule 6 (expression -> comparison .)
    RPAREN          reduce using rule 6 (expression -> comparison .)
    THEN            reduce using rule 6 (expression -> comparison .)
    COMMA           reduce using rule 6 (expression -> comparison .)
    COLON           reduce using rule 6 (expression -> comparison .)
    ENDCOND         reduce using rule 6 (expression -> comparison .)
    ELIF            reduce using rule 6 (expression -> comparison .)
    ELSE            reduce using rule 6 (expression -> comparison .)
    CLOSED_BRACKETS reduce using rule 6 (expression -> comparison .)
    OPEN_BRACKETS   reduce using rule 6 (expression -> comparison .)


state 13

    (34) expression -> IDENTIFIER . ASSIGN expression
    (35) expression -> IDENTIFIER . PLUSASSIGN expression
    (36) expression -> IDENTIFIER . MINUSASSIGN expression
    (37) expression -> IDENTIFIER . TIMESASSIGN expression
    (38) expression -> IDENTIFIER . POWERASSIGN expression
    (39) expression -> IDENTIFIER . DIVIDEASSIGN expression
    (40) expression -> IDENTIFIER . DIVIDE_FLOORASSIGN expression
    (41) expression -> IDENTIFIER . DIVIDE_CEILASSIGN expression
    (42) expression -> IDENTIFIER . GREATER_THANASSIGN expression
    (43) expression -> IDENTIFIER . SMALLER_THANASSIGN expression
    (44) expression -> IDENTIFIER . GREATER_EQUALSASSIGN expression
    (45) expression -> IDENTIFIER . SMALLER_EQUALSASSIGN expression
    (46) expression -> IDENTIFIER . EQUALSASSIGN expression
    (47) expression -> IDENTIFIER . UNEQUALSASSIGN expression
    (48) expression -> IDENTIFIER . ANDASSIGN expression
    (49) expression -> IDENTIFIER . ORASSIGN expression
    (50) expression -> IDENTIFIER . XORASSIGN expression
    (51) expression -> IDENTIFIER . EXPASSIGN expression
    (52) expression -> IDENTIFIER . MODASSIGN expression
    (3) atomar -> IDENTIFIER .

    ASSIGN          shift and go to state 50
    PLUSASSIGN      shift and go to state 51
    MINUSASSIGN     shift and go to state 52
    TIMESASSIGN     shift and go to state 53
    POWERASSIGN     shift and go to state 54
    DIVIDEASSIGN    shift and go to state 55
    DIVIDE_FLOORASSIGN shift and go to state 56
    DIVIDE_CEILASSIGN shift and go to state 57
    GREATER_THANASSIGN shift and go to state 58
    SMALLER_THANASSIGN shift and go to state 59
    GREATER_EQUALSASSIGN shift and go to state 60
    SMALLER_EQUALSASSIGN shift and go to state 61
    EQUALSASSIGN    shift and go to state 62
    UNEQUALSASSIGN  shift and go to state 63
    ANDASSIGN       shift and go to state 64
    ORASSIGN        shift and go to state 65
    XORASSIGN       shift and go to state 66
    EXPASSIGN       shift and go to state 67
    MODASSIGN       shift and go to state 68
    PLUS            reduce using rule 3 (atomar -> IDENTIFIER .)
    MINUS           reduce using rule 3 (atomar -> IDENTIFIER .)
    TIMES           reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE          reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_CEIL     reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_FLOOR    reduce using rule 3 (atomar -> IDENTIFIER .)
    MOD             reduce using rule 3 (atomar -> IDENTIFIER .)
    EXP             reduce using rule 3 (atomar -> IDENTIFIER .)
    AND             reduce using rule 3 (atomar -> IDENTIFIER .)
    OR              reduce using rule 3 (atomar -> IDENTIFIER .)
    XOR             reduce using rule 3 (atomar -> IDENTIFIER .)
    POWER           reduce using rule 3 (atomar -> IDENTIFIER .)
    IMAG            reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    UNEQUALS        reduce using rule 3 (atomar -> IDENTIFIER .)
    EQUALS          reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    LPAREN          reduce using rule 3 (atomar -> IDENTIFIER .)
    END             reduce using rule 3 (atomar -> IDENTIFIER .)
    SEMICOLON       reduce using rule 3 (atomar -> IDENTIFIER .)
    RPAREN          reduce using rule 3 (atomar -> IDENTIFIER .)
    THEN            reduce using rule 3 (atomar -> IDENTIFIER .)
    COMMA           reduce using rule 3 (atomar -> IDENTIFIER .)
    COLON           reduce using rule 3 (atomar -> IDENTIFIER .)
    ENDCOND         reduce using rule 3 (atomar -> IDENTIFIER .)
    ELIF            reduce using rule 3 (atomar -> IDENTIFIER .)
    ELSE            reduce using rule 3 (atomar -> IDENTIFIER .)
    CLOSED_BRACKETS reduce using rule 3 (atomar -> IDENTIFIER .)
    OPEN_BRACKETS   reduce using rule 3 (atomar -> IDENTIFIER .)


state 14

    (73) expression -> LAMBDA . LPAREN parameter RPAREN LAMBDA_ARROW expression

    LPAREN          shift and go to state 69


state 15

    (4) arithmetic_expression -> LPAREN . expression RPAREN
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 70
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 16

    (63) if_statement -> IF . expression THEN statements ENDCOND
    (64) if_statement -> IF . expression THEN statements else_elif_body ENDCOND
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 71
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 17

    (67) while_statement -> WHILE . expression THEN statements ENDCOND
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 72
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 18

    (68) loop_statement -> LOOP . IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND

    IDENTIFIER      shift and go to state 73


state 19

    (94) function -> ECHO . LPAREN expression RPAREN

    LPAREN          shift and go to state 74


state 20

    (95) function -> LENGTH . LPAREN expression RPAREN

    LPAREN          shift and go to state 75


state 21

    (21) arithmetic_expression -> PLUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 76
    atomar                         shift and go to state 24

state 22

    (20) arithmetic_expression -> MINUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 78
    atomar                         shift and go to state 24

state 23

    (19) arithmetic_expression -> NOT . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 79
    atomar                         shift and go to state 24

state 24

    (23) arithmetic_expression -> atomar .

    PLUS            reduce using rule 23 (arithmetic_expression -> atomar .)
    MINUS           reduce using rule 23 (arithmetic_expression -> atomar .)
    TIMES           reduce using rule 23 (arithmetic_expression -> atomar .)
    DIVIDE          reduce using rule 23 (arithmetic_expression -> atomar .)
    DIVIDE_CEIL     reduce using rule 23 (arithmetic_expression -> atomar .)
    DIVIDE_FLOOR    reduce using rule 23 (arithmetic_expression -> atomar .)
    MOD             reduce using rule 23 (arithmetic_expression -> atomar .)
    EXP             reduce using rule 23 (arithmetic_expression -> atomar .)
    AND             reduce using rule 23 (arithmetic_expression -> atomar .)
    OR              reduce using rule 23 (arithmetic_expression -> atomar .)
    XOR             reduce using rule 23 (arithmetic_expression -> atomar .)
    POWER           reduce using rule 23 (arithmetic_expression -> atomar .)
    IMAG            reduce using rule 23 (arithmetic_expression -> atomar .)
    GREATER_THAN    reduce using rule 23 (arithmetic_expression -> atomar .)
    SMALLER_THAN    reduce using rule 23 (arithmetic_expression -> atomar .)
    UNEQUALS        reduce using rule 23 (arithmetic_expression -> atomar .)
    EQUALS          reduce using rule 23 (arithmetic_expression -> atomar .)
    SMALLER_EQUALS  reduce using rule 23 (arithmetic_expression -> atomar .)
    GREATER_EQUALS  reduce using rule 23 (arithmetic_expression -> atomar .)
    LPAREN          reduce using rule 23 (arithmetic_expression -> atomar .)
    END             reduce using rule 23 (arithmetic_expression -> atomar .)
    SEMICOLON       reduce using rule 23 (arithmetic_expression -> atomar .)
    RPAREN          reduce using rule 23 (arithmetic_expression -> atomar .)
    THEN            reduce using rule 23 (arithmetic_expression -> atomar .)
    COMMA           reduce using rule 23 (arithmetic_expression -> atomar .)
    COLON           reduce using rule 23 (arithmetic_expression -> atomar .)
    ENDCOND         reduce using rule 23 (arithmetic_expression -> atomar .)
    ELIF            reduce using rule 23 (arithmetic_expression -> atomar .)
    ELSE            reduce using rule 23 (arithmetic_expression -> atomar .)
    CLOSED_BRACKETS reduce using rule 23 (arithmetic_expression -> atomar .)
    OPEN_BRACKETS   reduce using rule 23 (arithmetic_expression -> atomar .)


state 25

    (1) atomar -> NUMBER .

    PLUS            reduce using rule 1 (atomar -> NUMBER .)
    MINUS           reduce using rule 1 (atomar -> NUMBER .)
    TIMES           reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE          reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE_CEIL     reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE_FLOOR    reduce using rule 1 (atomar -> NUMBER .)
    MOD             reduce using rule 1 (atomar -> NUMBER .)
    EXP             reduce using rule 1 (atomar -> NUMBER .)
    AND             reduce using rule 1 (atomar -> NUMBER .)
    OR              reduce using rule 1 (atomar -> NUMBER .)
    XOR             reduce using rule 1 (atomar -> NUMBER .)
    POWER           reduce using rule 1 (atomar -> NUMBER .)
    IMAG            reduce using rule 1 (atomar -> NUMBER .)
    GREATER_THAN    reduce using rule 1 (atomar -> NUMBER .)
    SMALLER_THAN    reduce using rule 1 (atomar -> NUMBER .)
    UNEQUALS        reduce using rule 1 (atomar -> NUMBER .)
    EQUALS          reduce using rule 1 (atomar -> NUMBER .)
    SMALLER_EQUALS  reduce using rule 1 (atomar -> NUMBER .)
    GREATER_EQUALS  reduce using rule 1 (atomar -> NUMBER .)
    LPAREN          reduce using rule 1 (atomar -> NUMBER .)
    END             reduce using rule 1 (atomar -> NUMBER .)
    SEMICOLON       reduce using rule 1 (atomar -> NUMBER .)
    RPAREN          reduce using rule 1 (atomar -> NUMBER .)
    THEN            reduce using rule 1 (atomar -> NUMBER .)
    COMMA           reduce using rule 1 (atomar -> NUMBER .)
    COLON           reduce using rule 1 (atomar -> NUMBER .)
    ENDCOND         reduce using rule 1 (atomar -> NUMBER .)
    ELIF            reduce using rule 1 (atomar -> NUMBER .)
    ELSE            reduce using rule 1 (atomar -> NUMBER .)
    CLOSED_BRACKETS reduce using rule 1 (atomar -> NUMBER .)
    OPEN_BRACKETS   reduce using rule 1 (atomar -> NUMBER .)


state 26

    (2) atomar -> FLOAT .

    PLUS            reduce using rule 2 (atomar -> FLOAT .)
    MINUS           reduce using rule 2 (atomar -> FLOAT .)
    TIMES           reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE          reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE_CEIL     reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE_FLOOR    reduce using rule 2 (atomar -> FLOAT .)
    MOD             reduce using rule 2 (atomar -> FLOAT .)
    EXP             reduce using rule 2 (atomar -> FLOAT .)
    AND             reduce using rule 2 (atomar -> FLOAT .)
    OR              reduce using rule 2 (atomar -> FLOAT .)
    XOR             reduce using rule 2 (atomar -> FLOAT .)
    POWER           reduce using rule 2 (atomar -> FLOAT .)
    IMAG            reduce using rule 2 (atomar -> FLOAT .)
    GREATER_THAN    reduce using rule 2 (atomar -> FLOAT .)
    SMALLER_THAN    reduce using rule 2 (atomar -> FLOAT .)
    UNEQUALS        reduce using rule 2 (atomar -> FLOAT .)
    EQUALS          reduce using rule 2 (atomar -> FLOAT .)
    SMALLER_EQUALS  reduce using rule 2 (atomar -> FLOAT .)
    GREATER_EQUALS  reduce using rule 2 (atomar -> FLOAT .)
    LPAREN          reduce using rule 2 (atomar -> FLOAT .)
    END             reduce using rule 2 (atomar -> FLOAT .)
    SEMICOLON       reduce using rule 2 (atomar -> FLOAT .)
    RPAREN          reduce using rule 2 (atomar -> FLOAT .)
    THEN            reduce using rule 2 (atomar -> FLOAT .)
    COMMA           reduce using rule 2 (atomar -> FLOAT .)
    COLON           reduce using rule 2 (atomar -> FLOAT .)
    ENDCOND         reduce using rule 2 (atomar -> FLOAT .)
    ELIF            reduce using rule 2 (atomar -> FLOAT .)
    ELSE            reduce using rule 2 (atomar -> FLOAT .)
    CLOSED_BRACKETS reduce using rule 2 (atomar -> FLOAT .)
    OPEN_BRACKETS   reduce using rule 2 (atomar -> FLOAT .)


state 27

    (53) sequence -> BEGIN statements END .

    $end            reduce using rule 53 (sequence -> BEGIN statements END .)
    END             reduce using rule 53 (sequence -> BEGIN statements END .)
    SEMICOLON       reduce using rule 53 (sequence -> BEGIN statements END .)
    ENDCOND         reduce using rule 53 (sequence -> BEGIN statements END .)
    ELIF            reduce using rule 53 (sequence -> BEGIN statements END .)
    ELSE            reduce using rule 53 (sequence -> BEGIN statements END .)


state 28

    (54) sequence -> BEGIN statements SEMICOLON . END
    (61) statements -> statements SEMICOLON . statement
    (55) statement -> . expression
    (56) statement -> . sequence
    (57) statement -> . if_statement
    (58) statement -> . while_statement
    (59) statement -> . loop_statement
    (60) statement -> . function
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (53) sequence -> . BEGIN statements END
    (54) sequence -> . BEGIN statements SEMICOLON END
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (94) function -> . ECHO LPAREN expression RPAREN
    (95) function -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    END             shift and go to state 80
    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    BEGIN           shift and go to state 2
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    LOOP            shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    statement                      shift and go to state 81
    expression                     shift and go to state 5
    sequence                       shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    loop_statement                 shift and go to state 9
    function                       shift and go to state 10
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 29

    (93) expression -> expression LPAREN . parameter_expr RPAREN
    (85) parameter_expr -> . parameter_pos_expr
    (86) parameter_expr -> . empty
    (87) parameter_pos_expr -> . expression COMMA parameter_pos_expr
    (88) parameter_pos_expr -> . expression
    (89) parameter_pos_expr -> . parameter_keywords_expr
    (92) empty -> .
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (90) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (91) parameter_keywords_expr -> . expression COLON expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    RPAREN          reduce using rule 92 (empty -> .)
    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 82
    parameter_expr                 shift and go to state 83
    parameter_pos_expr             shift and go to state 84
    empty                          shift and go to state 85
    parameter_keywords_expr        shift and go to state 86
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 30

    (7) arithmetic_expression -> arithmetic_expression PLUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 87
    atomar                         shift and go to state 24

state 31

    (8) arithmetic_expression -> arithmetic_expression MINUS . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 88
    atomar                         shift and go to state 24

state 32

    (9) arithmetic_expression -> arithmetic_expression TIMES . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 89
    atomar                         shift and go to state 24

state 33

    (10) arithmetic_expression -> arithmetic_expression DIVIDE . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 90
    atomar                         shift and go to state 24

state 34

    (11) arithmetic_expression -> arithmetic_expression DIVIDE_CEIL . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 91
    atomar                         shift and go to state 24

state 35

    (12) arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 92
    atomar                         shift and go to state 24

state 36

    (13) arithmetic_expression -> arithmetic_expression MOD . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 93
    atomar                         shift and go to state 24

state 37

    (14) arithmetic_expression -> arithmetic_expression EXP . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 94
    atomar                         shift and go to state 24

state 38

    (15) arithmetic_expression -> arithmetic_expression AND . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 95
    atomar                         shift and go to state 24

state 39

    (16) arithmetic_expression -> arithmetic_expression OR . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 96
    atomar                         shift and go to state 24

state 40

    (17) arithmetic_expression -> arithmetic_expression XOR . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 97
    atomar                         shift and go to state 24

state 41

    (18) arithmetic_expression -> arithmetic_expression POWER . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 98
    atomar                         shift and go to state 24

state 42

    (22) arithmetic_expression -> arithmetic_expression IMAG .

    PLUS            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    MINUS           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    TIMES           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    DIVIDE          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    DIVIDE_CEIL     reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    DIVIDE_FLOOR    reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    MOD             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    EXP             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    AND             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    OR              reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    XOR             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    POWER           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    IMAG            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    GREATER_THAN    reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    SMALLER_THAN    reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    UNEQUALS        reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    EQUALS          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    SMALLER_EQUALS  reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    GREATER_EQUALS  reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    LPAREN          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    END             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    SEMICOLON       reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    RPAREN          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    THEN            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    COMMA           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    COLON           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    ENDCOND         reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    ELIF            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    ELSE            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    CLOSED_BRACKETS reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    OPEN_BRACKETS   reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)


state 43

    (24) comparison -> arithmetic_expression comparison_op . arithmetic_expression comparison_chain
    (25) comparison -> arithmetic_expression comparison_op . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 99
    atomar                         shift and go to state 24

state 44

    (28) comparison_op -> GREATER_THAN .

    LPAREN          reduce using rule 28 (comparison_op -> GREATER_THAN .)
    NOT             reduce using rule 28 (comparison_op -> GREATER_THAN .)
    MINUS           reduce using rule 28 (comparison_op -> GREATER_THAN .)
    PLUS            reduce using rule 28 (comparison_op -> GREATER_THAN .)
    NUMBER          reduce using rule 28 (comparison_op -> GREATER_THAN .)
    FLOAT           reduce using rule 28 (comparison_op -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 28 (comparison_op -> GREATER_THAN .)


state 45

    (29) comparison_op -> SMALLER_THAN .

    LPAREN          reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    NOT             reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    MINUS           reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    PLUS            reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    NUMBER          reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    FLOAT           reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    IDENTIFIER      reduce using rule 29 (comparison_op -> SMALLER_THAN .)


state 46

    (30) comparison_op -> UNEQUALS .

    LPAREN          reduce using rule 30 (comparison_op -> UNEQUALS .)
    NOT             reduce using rule 30 (comparison_op -> UNEQUALS .)
    MINUS           reduce using rule 30 (comparison_op -> UNEQUALS .)
    PLUS            reduce using rule 30 (comparison_op -> UNEQUALS .)
    NUMBER          reduce using rule 30 (comparison_op -> UNEQUALS .)
    FLOAT           reduce using rule 30 (comparison_op -> UNEQUALS .)
    IDENTIFIER      reduce using rule 30 (comparison_op -> UNEQUALS .)


state 47

    (31) comparison_op -> EQUALS .

    LPAREN          reduce using rule 31 (comparison_op -> EQUALS .)
    NOT             reduce using rule 31 (comparison_op -> EQUALS .)
    MINUS           reduce using rule 31 (comparison_op -> EQUALS .)
    PLUS            reduce using rule 31 (comparison_op -> EQUALS .)
    NUMBER          reduce using rule 31 (comparison_op -> EQUALS .)
    FLOAT           reduce using rule 31 (comparison_op -> EQUALS .)
    IDENTIFIER      reduce using rule 31 (comparison_op -> EQUALS .)


state 48

    (32) comparison_op -> SMALLER_EQUALS .

    LPAREN          reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    NOT             reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    MINUS           reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    PLUS            reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    NUMBER          reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    FLOAT           reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    IDENTIFIER      reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)


state 49

    (33) comparison_op -> GREATER_EQUALS .

    LPAREN          reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    NOT             reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    MINUS           reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    PLUS            reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    NUMBER          reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    FLOAT           reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    IDENTIFIER      reduce using rule 33 (comparison_op -> GREATER_EQUALS .)


state 50

    (34) expression -> IDENTIFIER ASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 100
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 51

    (35) expression -> IDENTIFIER PLUSASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 101
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 52

    (36) expression -> IDENTIFIER MINUSASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 102
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 53

    (37) expression -> IDENTIFIER TIMESASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 103
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 54

    (38) expression -> IDENTIFIER POWERASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 104
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 55

    (39) expression -> IDENTIFIER DIVIDEASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 105
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 56

    (40) expression -> IDENTIFIER DIVIDE_FLOORASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 106
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 57

    (41) expression -> IDENTIFIER DIVIDE_CEILASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 107
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 58

    (42) expression -> IDENTIFIER GREATER_THANASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 108
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 59

    (43) expression -> IDENTIFIER SMALLER_THANASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 109
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 60

    (44) expression -> IDENTIFIER GREATER_EQUALSASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 110
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 61

    (45) expression -> IDENTIFIER SMALLER_EQUALSASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 111
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 62

    (46) expression -> IDENTIFIER EQUALSASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 112
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 63

    (47) expression -> IDENTIFIER UNEQUALSASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 113
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 64

    (48) expression -> IDENTIFIER ANDASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 114
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 65

    (49) expression -> IDENTIFIER ORASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 115
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 66

    (50) expression -> IDENTIFIER XORASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 116
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 67

    (51) expression -> IDENTIFIER EXPASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 117
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 68

    (52) expression -> IDENTIFIER MODASSIGN . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 118
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 69

    (73) expression -> LAMBDA LPAREN . parameter RPAREN LAMBDA_ARROW expression
    (74) parameter -> . parameter_pos
    (75) parameter -> . empty
    (76) parameter_pos -> . parameter_pos_list
    (92) empty -> .
    (77) parameter_pos_list -> . IDENTIFIER COMMA parameter_pos_list
    (78) parameter_pos_list -> . IDENTIFIER
    (79) parameter_pos_list -> . parameter_keywords
    (80) parameter_keywords -> . parameter_kw_list
    (81) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (82) parameter_kw_list -> . IDENTIFIER COLON expression
    (83) parameter_kw_list -> . parameter_infty
    (84) parameter_infty -> . IDENTIFIER DOTS

    RPAREN          reduce using rule 92 (empty -> .)
    IDENTIFIER      shift and go to state 123

    parameter                      shift and go to state 119
    parameter_pos                  shift and go to state 120
    empty                          shift and go to state 121
    parameter_pos_list             shift and go to state 122
    parameter_keywords             shift and go to state 124
    parameter_kw_list              shift and go to state 125
    parameter_infty                shift and go to state 126

state 70

    (4) arithmetic_expression -> LPAREN expression . RPAREN
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    RPAREN          shift and go to state 127
    LPAREN          shift and go to state 29


state 71

    (63) if_statement -> IF expression . THEN statements ENDCOND
    (64) if_statement -> IF expression . THEN statements else_elif_body ENDCOND
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    THEN            shift and go to state 128
    LPAREN          shift and go to state 29


state 72

    (67) while_statement -> WHILE expression . THEN statements ENDCOND
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    THEN            shift and go to state 129
    LPAREN          shift and go to state 29


state 73

    (68) loop_statement -> LOOP IDENTIFIER . LOOPIN interval LOOPTHEN statements ENDCOND

    LOOPIN          shift and go to state 130


state 74

    (94) function -> ECHO LPAREN . expression RPAREN
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 131
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 75

    (95) function -> LENGTH LPAREN . expression RPAREN
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 132
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 76

    (21) arithmetic_expression -> PLUS arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    MINUS           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    TIMES           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    MOD             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    EXP             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    AND             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    OR              reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    XOR             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    POWER           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    IMAG            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    UNEQUALS        reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    EQUALS          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    LPAREN          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    END             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    SEMICOLON       reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    RPAREN          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    THEN            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    COMMA           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    COLON           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    ENDCOND         reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    ELIF            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    ELSE            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)

  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVIDE          [ shift and go to state 33 ]
  ! DIVIDE_CEIL     [ shift and go to state 34 ]
  ! DIVIDE_FLOOR    [ shift and go to state 35 ]
  ! MOD             [ shift and go to state 36 ]
  ! EXP             [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]
  ! POWER           [ shift and go to state 41 ]
  ! IMAG            [ shift and go to state 42 ]


state 77

    (3) atomar -> IDENTIFIER .

    PLUS            reduce using rule 3 (atomar -> IDENTIFIER .)
    MINUS           reduce using rule 3 (atomar -> IDENTIFIER .)
    TIMES           reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE          reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_CEIL     reduce using rule 3 (atomar -> IDENTIFIER .)
    DIVIDE_FLOOR    reduce using rule 3 (atomar -> IDENTIFIER .)
    MOD             reduce using rule 3 (atomar -> IDENTIFIER .)
    EXP             reduce using rule 3 (atomar -> IDENTIFIER .)
    AND             reduce using rule 3 (atomar -> IDENTIFIER .)
    OR              reduce using rule 3 (atomar -> IDENTIFIER .)
    XOR             reduce using rule 3 (atomar -> IDENTIFIER .)
    POWER           reduce using rule 3 (atomar -> IDENTIFIER .)
    IMAG            reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_THAN    reduce using rule 3 (atomar -> IDENTIFIER .)
    UNEQUALS        reduce using rule 3 (atomar -> IDENTIFIER .)
    EQUALS          reduce using rule 3 (atomar -> IDENTIFIER .)
    SMALLER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 3 (atomar -> IDENTIFIER .)
    LPAREN          reduce using rule 3 (atomar -> IDENTIFIER .)
    END             reduce using rule 3 (atomar -> IDENTIFIER .)
    SEMICOLON       reduce using rule 3 (atomar -> IDENTIFIER .)
    RPAREN          reduce using rule 3 (atomar -> IDENTIFIER .)
    THEN            reduce using rule 3 (atomar -> IDENTIFIER .)
    COMMA           reduce using rule 3 (atomar -> IDENTIFIER .)
    COLON           reduce using rule 3 (atomar -> IDENTIFIER .)
    ENDCOND         reduce using rule 3 (atomar -> IDENTIFIER .)
    ELIF            reduce using rule 3 (atomar -> IDENTIFIER .)
    ELSE            reduce using rule 3 (atomar -> IDENTIFIER .)
    CLOSED_BRACKETS reduce using rule 3 (atomar -> IDENTIFIER .)
    OPEN_BRACKETS   reduce using rule 3 (atomar -> IDENTIFIER .)


state 78

    (20) arithmetic_expression -> MINUS arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    MINUS           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    TIMES           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    MOD             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    EXP             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    AND             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    OR              reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    XOR             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    POWER           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    IMAG            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    UNEQUALS        reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    EQUALS          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    LPAREN          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    END             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    SEMICOLON       reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    RPAREN          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    THEN            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    COMMA           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    COLON           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    ENDCOND         reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    ELIF            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    ELSE            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)

  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVIDE          [ shift and go to state 33 ]
  ! DIVIDE_CEIL     [ shift and go to state 34 ]
  ! DIVIDE_FLOOR    [ shift and go to state 35 ]
  ! MOD             [ shift and go to state 36 ]
  ! EXP             [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]
  ! POWER           [ shift and go to state 41 ]
  ! IMAG            [ shift and go to state 42 ]


state 79

    (19) arithmetic_expression -> NOT arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    MINUS           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    TIMES           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    MOD             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    EXP             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    AND             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    OR              reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    XOR             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    POWER           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    IMAG            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    GREATER_THAN    reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    SMALLER_THAN    reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    UNEQUALS        reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    EQUALS          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    LPAREN          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    END             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    SEMICOLON       reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    RPAREN          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    THEN            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    COMMA           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    COLON           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    ENDCOND         reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    ELIF            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    ELSE            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)

  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVIDE          [ shift and go to state 33 ]
  ! DIVIDE_CEIL     [ shift and go to state 34 ]
  ! DIVIDE_FLOOR    [ shift and go to state 35 ]
  ! MOD             [ shift and go to state 36 ]
  ! EXP             [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]
  ! POWER           [ shift and go to state 41 ]
  ! IMAG            [ shift and go to state 42 ]


state 80

    (54) sequence -> BEGIN statements SEMICOLON END .

    $end            reduce using rule 54 (sequence -> BEGIN statements SEMICOLON END .)
    END             reduce using rule 54 (sequence -> BEGIN statements SEMICOLON END .)
    SEMICOLON       reduce using rule 54 (sequence -> BEGIN statements SEMICOLON END .)
    ENDCOND         reduce using rule 54 (sequence -> BEGIN statements SEMICOLON END .)
    ELIF            reduce using rule 54 (sequence -> BEGIN statements SEMICOLON END .)
    ELSE            reduce using rule 54 (sequence -> BEGIN statements SEMICOLON END .)


state 81

    (61) statements -> statements SEMICOLON statement .

    END             reduce using rule 61 (statements -> statements SEMICOLON statement .)
    SEMICOLON       reduce using rule 61 (statements -> statements SEMICOLON statement .)
    ENDCOND         reduce using rule 61 (statements -> statements SEMICOLON statement .)
    ELIF            reduce using rule 61 (statements -> statements SEMICOLON statement .)
    ELSE            reduce using rule 61 (statements -> statements SEMICOLON statement .)


state 82

    (87) parameter_pos_expr -> expression . COMMA parameter_pos_expr
    (88) parameter_pos_expr -> expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN
    (90) parameter_keywords_expr -> expression . COLON expression COMMA parameter_keywords_expr
    (91) parameter_keywords_expr -> expression . COLON expression

    COMMA           shift and go to state 133
    RPAREN          reduce using rule 88 (parameter_pos_expr -> expression .)
    LPAREN          shift and go to state 29
    COLON           shift and go to state 134


state 83

    (93) expression -> expression LPAREN parameter_expr . RPAREN

    RPAREN          shift and go to state 135


state 84

    (85) parameter_expr -> parameter_pos_expr .

    RPAREN          reduce using rule 85 (parameter_expr -> parameter_pos_expr .)


state 85

    (86) parameter_expr -> empty .

    RPAREN          reduce using rule 86 (parameter_expr -> empty .)


state 86

    (89) parameter_pos_expr -> parameter_keywords_expr .

    RPAREN          reduce using rule 89 (parameter_pos_expr -> parameter_keywords_expr .)


state 87

    (7) arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    MINUS           reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    AND             reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    OR              reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    XOR             reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    UNEQUALS        reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    EQUALS          reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    LPAREN          reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    END             reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SEMICOLON       reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    RPAREN          reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    THEN            reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    COMMA           reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    COLON           reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ENDCOND         reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ELIF            reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ELSE            reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    DIVIDE_CEIL     shift and go to state 34
    DIVIDE_FLOOR    shift and go to state 35
    MOD             shift and go to state 36
    EXP             shift and go to state 37
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! TIMES           [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! MOD             [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! EXP             [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! POWER           [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]


state 88

    (8) arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    MINUS           reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    AND             reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    OR              reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    XOR             reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    UNEQUALS        reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    EQUALS          reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    LPAREN          reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    END             reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SEMICOLON       reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    RPAREN          reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    THEN            reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    COMMA           reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    COLON           reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ENDCOND         reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ELIF            reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ELSE            reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    DIVIDE_CEIL     shift and go to state 34
    DIVIDE_FLOOR    shift and go to state 35
    MOD             shift and go to state 36
    EXP             shift and go to state 37
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! TIMES           [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! MOD             [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! EXP             [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! POWER           [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]


state 89

    (9) arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    MINUS           reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    TIMES           reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    MOD             reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    AND             reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    OR              reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    XOR             reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    GREATER_THAN    reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SMALLER_THAN    reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    UNEQUALS        reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    EQUALS          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    LPAREN          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    END             reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SEMICOLON       reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    RPAREN          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    THEN            reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    COMMA           reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    COLON           reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ENDCOND         reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ELIF            reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ELSE            reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    EXP             shift and go to state 37
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! EXP             [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! POWER           [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVIDE          [ shift and go to state 33 ]
  ! DIVIDE_CEIL     [ shift and go to state 34 ]
  ! DIVIDE_FLOOR    [ shift and go to state 35 ]
  ! MOD             [ shift and go to state 36 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]


state 90

    (10) arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    MINUS           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    TIMES           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    MOD             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    AND             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    OR              reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    XOR             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    GREATER_THAN    reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SMALLER_THAN    reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    UNEQUALS        reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    EQUALS          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    LPAREN          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    END             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SEMICOLON       reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    RPAREN          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    THEN            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    COMMA           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    COLON           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ENDCOND         reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ELIF            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ELSE            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    EXP             shift and go to state 37
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! EXP             [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! POWER           [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVIDE          [ shift and go to state 33 ]
  ! DIVIDE_CEIL     [ shift and go to state 34 ]
  ! DIVIDE_FLOOR    [ shift and go to state 35 ]
  ! MOD             [ shift and go to state 36 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]


state 91

    (11) arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    MINUS           reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    TIMES           reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    MOD             reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    AND             reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    OR              reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    XOR             reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    GREATER_THAN    reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SMALLER_THAN    reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    UNEQUALS        reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    EQUALS          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    LPAREN          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    END             reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SEMICOLON       reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    RPAREN          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    THEN            reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    COMMA           reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    COLON           reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ENDCOND         reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ELIF            reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ELSE            reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    EXP             shift and go to state 37
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! EXP             [ reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .) ]
  ! POWER           [ reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVIDE          [ shift and go to state 33 ]
  ! DIVIDE_CEIL     [ shift and go to state 34 ]
  ! DIVIDE_FLOOR    [ shift and go to state 35 ]
  ! MOD             [ shift and go to state 36 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]


state 92

    (12) arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    MINUS           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    TIMES           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    MOD             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    AND             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    OR              reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    XOR             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    GREATER_THAN    reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    UNEQUALS        reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    EQUALS          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    LPAREN          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    END             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SEMICOLON       reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    RPAREN          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    THEN            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    COMMA           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    COLON           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ENDCOND         reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ELIF            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ELSE            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    EXP             shift and go to state 37
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! EXP             [ reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVIDE          [ shift and go to state 33 ]
  ! DIVIDE_CEIL     [ shift and go to state 34 ]
  ! DIVIDE_FLOOR    [ shift and go to state 35 ]
  ! MOD             [ shift and go to state 36 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]


state 93

    (13) arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    MINUS           reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    TIMES           reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    MOD             reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    AND             reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    OR              reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    XOR             reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    GREATER_THAN    reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SMALLER_THAN    reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    UNEQUALS        reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    EQUALS          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    LPAREN          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    END             reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SEMICOLON       reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    RPAREN          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    THEN            reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    COMMA           reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    COLON           reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ENDCOND         reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ELIF            reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ELSE            reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    EXP             shift and go to state 37
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! EXP             [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .) ]
  ! POWER           [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVIDE          [ shift and go to state 33 ]
  ! DIVIDE_CEIL     [ shift and go to state 34 ]
  ! DIVIDE_FLOOR    [ shift and go to state 35 ]
  ! MOD             [ shift and go to state 36 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]


state 94

    (14) arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    MINUS           reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    TIMES           reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    MOD             reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    AND             reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    OR              reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    XOR             reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    GREATER_THAN    reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SMALLER_THAN    reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    UNEQUALS        reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    EQUALS          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    LPAREN          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    END             reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SEMICOLON       reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    RPAREN          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    THEN            reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    COMMA           reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    COLON           reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ENDCOND         reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ELIF            reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ELSE            reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    EXP             shift and go to state 37
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! EXP             [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .) ]
  ! POWER           [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVIDE          [ shift and go to state 33 ]
  ! DIVIDE_CEIL     [ shift and go to state 34 ]
  ! DIVIDE_FLOOR    [ shift and go to state 35 ]
  ! MOD             [ shift and go to state 36 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]


state 95

    (15) arithmetic_expression -> arithmetic_expression AND arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    AND             reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    OR              reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    XOR             reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    GREATER_THAN    reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SMALLER_THAN    reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    UNEQUALS        reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    EQUALS          reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    LPAREN          reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    END             reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SEMICOLON       reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    RPAREN          reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    THEN            reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    COMMA           reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    COLON           reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ENDCOND         reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ELIF            reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ELSE            reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    DIVIDE_CEIL     shift and go to state 34
    DIVIDE_FLOOR    shift and go to state 35
    MOD             shift and go to state 36
    EXP             shift and go to state 37
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! PLUS            [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! MOD             [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! EXP             [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! POWER           [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]


state 96

    (16) arithmetic_expression -> arithmetic_expression OR arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    OR              reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    GREATER_THAN    reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    UNEQUALS        reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    EQUALS          reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    LPAREN          reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    END             reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SEMICOLON       reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    RPAREN          reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    THEN            reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    COMMA           reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    COLON           reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ENDCOND         reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ELIF            reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ELSE            reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    DIVIDE_CEIL     shift and go to state 34
    DIVIDE_FLOOR    shift and go to state 35
    MOD             shift and go to state 36
    EXP             shift and go to state 37
    AND             shift and go to state 38
    XOR             shift and go to state 40
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! PLUS            [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! MOD             [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! EXP             [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! AND             [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! XOR             [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! OR              [ shift and go to state 39 ]


state 97

    (17) arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    OR              reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    XOR             reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    GREATER_THAN    reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    UNEQUALS        reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    EQUALS          reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    LPAREN          reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    END             reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SEMICOLON       reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    RPAREN          reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    THEN            reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    COMMA           reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    COLON           reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ENDCOND         reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ELIF            reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ELSE            reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    DIVIDE_CEIL     shift and go to state 34
    DIVIDE_FLOOR    shift and go to state 35
    MOD             shift and go to state 36
    EXP             shift and go to state 37
    AND             shift and go to state 38
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! PLUS            [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! MOD             [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! EXP             [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! AND             [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]


state 98

    (18) arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    MINUS           reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    TIMES           reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    MOD             reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    AND             reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    OR              reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    XOR             reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    GREATER_THAN    reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SMALLER_THAN    reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    UNEQUALS        reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    EQUALS          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    LPAREN          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    END             reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SEMICOLON       reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    RPAREN          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    THEN            reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    COMMA           reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    COLON           reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ENDCOND         reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ELIF            reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ELSE            reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    EXP             shift and go to state 37
    POWER           shift and go to state 41
    IMAG            shift and go to state 42

  ! EXP             [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .) ]
  ! POWER           [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! TIMES           [ shift and go to state 32 ]
  ! DIVIDE          [ shift and go to state 33 ]
  ! DIVIDE_CEIL     [ shift and go to state 34 ]
  ! DIVIDE_FLOOR    [ shift and go to state 35 ]
  ! MOD             [ shift and go to state 36 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]
  ! XOR             [ shift and go to state 40 ]


state 99

    (24) comparison -> arithmetic_expression comparison_op arithmetic_expression . comparison_chain
    (25) comparison -> arithmetic_expression comparison_op arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG
    (26) comparison_chain -> . comparison_op arithmetic_expression comparison_chain
    (27) comparison_chain -> . comparison_op arithmetic_expression
    (28) comparison_op -> . GREATER_THAN
    (29) comparison_op -> . SMALLER_THAN
    (30) comparison_op -> . UNEQUALS
    (31) comparison_op -> . EQUALS
    (32) comparison_op -> . SMALLER_EQUALS
    (33) comparison_op -> . GREATER_EQUALS

    LPAREN          reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    END             reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    SEMICOLON       reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    RPAREN          reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    THEN            reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    COMMA           reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    COLON           reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    ENDCOND         reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    ELIF            reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    ELSE            reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    DIVIDE_CEIL     shift and go to state 34
    DIVIDE_FLOOR    shift and go to state 35
    MOD             shift and go to state 36
    EXP             shift and go to state 37
    AND             shift and go to state 38
    OR              shift and go to state 39
    XOR             shift and go to state 40
    POWER           shift and go to state 41
    IMAG            shift and go to state 42
    GREATER_THAN    shift and go to state 44
    SMALLER_THAN    shift and go to state 45
    UNEQUALS        shift and go to state 46
    EQUALS          shift and go to state 47
    SMALLER_EQUALS  shift and go to state 48
    GREATER_EQUALS  shift and go to state 49

    comparison_op                  shift and go to state 136
    comparison_chain               shift and go to state 137

state 100

    (34) expression -> IDENTIFIER ASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)
    END             reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)
    SEMICOLON       reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)
    RPAREN          reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)
    THEN            reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)
    COLON           reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)
    ENDCOND         reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)
    ELIF            reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)
    ELSE            reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 34 (expression -> IDENTIFIER ASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 101

    (35) expression -> IDENTIFIER PLUSASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)
    END             reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)
    SEMICOLON       reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)
    RPAREN          reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)
    THEN            reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)
    COMMA           reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)
    COLON           reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)
    ENDCOND         reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)
    ELIF            reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)
    ELSE            reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 35 (expression -> IDENTIFIER PLUSASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 102

    (36) expression -> IDENTIFIER MINUSASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)
    END             reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)
    SEMICOLON       reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)
    RPAREN          reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)
    THEN            reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)
    COMMA           reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)
    COLON           reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)
    ENDCOND         reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)
    ELIF            reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)
    ELSE            reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 36 (expression -> IDENTIFIER MINUSASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 103

    (37) expression -> IDENTIFIER TIMESASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)
    END             reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)
    SEMICOLON       reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)
    RPAREN          reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)
    THEN            reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)
    COMMA           reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)
    COLON           reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)
    ENDCOND         reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)
    ELIF            reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)
    ELSE            reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 37 (expression -> IDENTIFIER TIMESASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 104

    (38) expression -> IDENTIFIER POWERASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)
    END             reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)
    SEMICOLON       reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)
    RPAREN          reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)
    THEN            reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)
    COMMA           reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)
    COLON           reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)
    ENDCOND         reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)
    ELIF            reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)
    ELSE            reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 38 (expression -> IDENTIFIER POWERASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 105

    (39) expression -> IDENTIFIER DIVIDEASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    END             reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    SEMICOLON       reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    RPAREN          reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    THEN            reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    COMMA           reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    COLON           reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    ENDCOND         reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    ELIF            reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    ELSE            reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 39 (expression -> IDENTIFIER DIVIDEASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 106

    (40) expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    END             reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    SEMICOLON       reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    RPAREN          reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    THEN            reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    COMMA           reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    COLON           reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    ENDCOND         reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    ELIF            reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    ELSE            reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 40 (expression -> IDENTIFIER DIVIDE_FLOORASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 107

    (41) expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    END             reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    SEMICOLON       reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    RPAREN          reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    THEN            reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    COMMA           reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    COLON           reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    ENDCOND         reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    ELIF            reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    ELSE            reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 41 (expression -> IDENTIFIER DIVIDE_CEILASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 108

    (42) expression -> IDENTIFIER GREATER_THANASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    END             reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    SEMICOLON       reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    RPAREN          reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    THEN            reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    COMMA           reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    COLON           reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    ENDCOND         reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    ELIF            reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    ELSE            reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 42 (expression -> IDENTIFIER GREATER_THANASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 109

    (43) expression -> IDENTIFIER SMALLER_THANASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    END             reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    SEMICOLON       reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    RPAREN          reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    THEN            reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    COMMA           reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    COLON           reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    ENDCOND         reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    ELIF            reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    ELSE            reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 43 (expression -> IDENTIFIER SMALLER_THANASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 110

    (44) expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    END             reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    SEMICOLON       reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    RPAREN          reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    THEN            reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    COMMA           reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    COLON           reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    ENDCOND         reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    ELIF            reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    ELSE            reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 44 (expression -> IDENTIFIER GREATER_EQUALSASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 111

    (45) expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    END             reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    SEMICOLON       reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    RPAREN          reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    THEN            reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    COMMA           reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    COLON           reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    ENDCOND         reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    ELIF            reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    ELSE            reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 45 (expression -> IDENTIFIER SMALLER_EQUALSASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 112

    (46) expression -> IDENTIFIER EQUALSASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    END             reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    SEMICOLON       reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    RPAREN          reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    THEN            reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    COMMA           reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    COLON           reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    ENDCOND         reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    ELIF            reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    ELSE            reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 46 (expression -> IDENTIFIER EQUALSASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 113

    (47) expression -> IDENTIFIER UNEQUALSASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    END             reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    SEMICOLON       reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    RPAREN          reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    THEN            reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    COMMA           reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    COLON           reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    ENDCOND         reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    ELIF            reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    ELSE            reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 47 (expression -> IDENTIFIER UNEQUALSASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 114

    (48) expression -> IDENTIFIER ANDASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)
    END             reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)
    SEMICOLON       reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)
    RPAREN          reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)
    THEN            reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)
    COMMA           reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)
    COLON           reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)
    ENDCOND         reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)
    ELIF            reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)
    ELSE            reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 48 (expression -> IDENTIFIER ANDASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 115

    (49) expression -> IDENTIFIER ORASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)
    END             reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)
    SEMICOLON       reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)
    RPAREN          reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)
    THEN            reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)
    COMMA           reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)
    COLON           reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)
    ENDCOND         reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)
    ELIF            reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)
    ELSE            reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 49 (expression -> IDENTIFIER ORASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 116

    (50) expression -> IDENTIFIER XORASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)
    END             reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)
    SEMICOLON       reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)
    RPAREN          reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)
    THEN            reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)
    COMMA           reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)
    COLON           reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)
    ENDCOND         reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)
    ELIF            reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)
    ELSE            reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 50 (expression -> IDENTIFIER XORASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 117

    (51) expression -> IDENTIFIER EXPASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)
    END             reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)
    SEMICOLON       reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)
    RPAREN          reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)
    THEN            reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)
    COMMA           reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)
    COLON           reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)
    ENDCOND         reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)
    ELIF            reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)
    ELSE            reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 51 (expression -> IDENTIFIER EXPASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 118

    (52) expression -> IDENTIFIER MODASSIGN expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)
    END             reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)
    SEMICOLON       reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)
    RPAREN          reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)
    THEN            reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)
    COMMA           reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)
    COLON           reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)
    ENDCOND         reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)
    ELIF            reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)
    ELSE            reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 52 (expression -> IDENTIFIER MODASSIGN expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 119

    (73) expression -> LAMBDA LPAREN parameter . RPAREN LAMBDA_ARROW expression

    RPAREN          shift and go to state 138


state 120

    (74) parameter -> parameter_pos .

    RPAREN          reduce using rule 74 (parameter -> parameter_pos .)


state 121

    (75) parameter -> empty .

    RPAREN          reduce using rule 75 (parameter -> empty .)


state 122

    (76) parameter_pos -> parameter_pos_list .

    RPAREN          reduce using rule 76 (parameter_pos -> parameter_pos_list .)


state 123

    (77) parameter_pos_list -> IDENTIFIER . COMMA parameter_pos_list
    (78) parameter_pos_list -> IDENTIFIER .
    (81) parameter_kw_list -> IDENTIFIER . COLON expression COMMA parameter_kw_list
    (82) parameter_kw_list -> IDENTIFIER . COLON expression
    (84) parameter_infty -> IDENTIFIER . DOTS

    COMMA           shift and go to state 139
    RPAREN          reduce using rule 78 (parameter_pos_list -> IDENTIFIER .)
    COLON           shift and go to state 140
    DOTS            shift and go to state 141


state 124

    (79) parameter_pos_list -> parameter_keywords .

    RPAREN          reduce using rule 79 (parameter_pos_list -> parameter_keywords .)


state 125

    (80) parameter_keywords -> parameter_kw_list .

    RPAREN          reduce using rule 80 (parameter_keywords -> parameter_kw_list .)


state 126

    (83) parameter_kw_list -> parameter_infty .

    RPAREN          reduce using rule 83 (parameter_kw_list -> parameter_infty .)


state 127

    (4) arithmetic_expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    DIVIDE_CEIL     reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    DIVIDE_FLOOR    reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    EXP             reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    IMAG            reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    SMALLER_THAN    reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    UNEQUALS        reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    SMALLER_EQUALS  reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    GREATER_EQUALS  reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    END             reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    ENDCOND         reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    ELIF            reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    CLOSED_BRACKETS reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)
    OPEN_BRACKETS   reduce using rule 4 (arithmetic_expression -> LPAREN expression RPAREN .)


state 128

    (63) if_statement -> IF expression THEN . statements ENDCOND
    (64) if_statement -> IF expression THEN . statements else_elif_body ENDCOND
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (55) statement -> . expression
    (56) statement -> . sequence
    (57) statement -> . if_statement
    (58) statement -> . while_statement
    (59) statement -> . loop_statement
    (60) statement -> . function
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (53) sequence -> . BEGIN statements END
    (54) sequence -> . BEGIN statements SEMICOLON END
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (94) function -> . ECHO LPAREN expression RPAREN
    (95) function -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    BEGIN           shift and go to state 2
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    LOOP            shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 5
    statements                     shift and go to state 142
    statement                      shift and go to state 4
    sequence                       shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    loop_statement                 shift and go to state 9
    function                       shift and go to state 10
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 129

    (67) while_statement -> WHILE expression THEN . statements ENDCOND
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (55) statement -> . expression
    (56) statement -> . sequence
    (57) statement -> . if_statement
    (58) statement -> . while_statement
    (59) statement -> . loop_statement
    (60) statement -> . function
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (53) sequence -> . BEGIN statements END
    (54) sequence -> . BEGIN statements SEMICOLON END
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (94) function -> . ECHO LPAREN expression RPAREN
    (95) function -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    BEGIN           shift and go to state 2
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    LOOP            shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 5
    statements                     shift and go to state 143
    statement                      shift and go to state 4
    sequence                       shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    loop_statement                 shift and go to state 9
    function                       shift and go to state 10
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 130

    (68) loop_statement -> LOOP IDENTIFIER LOOPIN . interval LOOPTHEN statements ENDCOND
    (69) interval -> . OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS
    (70) interval -> . CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS
    (71) interval -> . OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS
    (72) interval -> . CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS

    OPEN_BRACKETS   shift and go to state 145
    CLOSED_BRACKETS shift and go to state 146

    interval                       shift and go to state 144

state 131

    (94) function -> ECHO LPAREN expression . RPAREN
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    RPAREN          shift and go to state 147
    LPAREN          shift and go to state 29


state 132

    (95) function -> LENGTH LPAREN expression . RPAREN
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    RPAREN          shift and go to state 148
    LPAREN          shift and go to state 29


state 133

    (87) parameter_pos_expr -> expression COMMA . parameter_pos_expr
    (87) parameter_pos_expr -> . expression COMMA parameter_pos_expr
    (88) parameter_pos_expr -> . expression
    (89) parameter_pos_expr -> . parameter_keywords_expr
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (90) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (91) parameter_keywords_expr -> . expression COLON expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 82
    parameter_pos_expr             shift and go to state 149
    parameter_keywords_expr        shift and go to state 86
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 134

    (90) parameter_keywords_expr -> expression COLON . expression COMMA parameter_keywords_expr
    (91) parameter_keywords_expr -> expression COLON . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 150
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 135

    (93) expression -> expression LPAREN parameter_expr RPAREN .

    LPAREN          reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)
    END             reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)
    SEMICOLON       reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)
    RPAREN          reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)
    THEN            reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)
    COMMA           reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)
    COLON           reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)
    ENDCOND         reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)
    ELIF            reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)
    ELSE            reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)
    CLOSED_BRACKETS reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)
    OPEN_BRACKETS   reduce using rule 93 (expression -> expression LPAREN parameter_expr RPAREN .)


state 136

    (26) comparison_chain -> comparison_op . arithmetic_expression comparison_chain
    (27) comparison_chain -> comparison_op . arithmetic_expression
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26
    IDENTIFIER      shift and go to state 77

    arithmetic_expression          shift and go to state 151
    atomar                         shift and go to state 24

state 137

    (24) comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .

    LPAREN          reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    END             reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    SEMICOLON       reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    RPAREN          reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    THEN            reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    COMMA           reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    COLON           reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ENDCOND         reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ELIF            reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ELSE            reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    CLOSED_BRACKETS reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    OPEN_BRACKETS   reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)


state 138

    (73) expression -> LAMBDA LPAREN parameter RPAREN . LAMBDA_ARROW expression

    LAMBDA_ARROW    shift and go to state 152


state 139

    (77) parameter_pos_list -> IDENTIFIER COMMA . parameter_pos_list
    (77) parameter_pos_list -> . IDENTIFIER COMMA parameter_pos_list
    (78) parameter_pos_list -> . IDENTIFIER
    (79) parameter_pos_list -> . parameter_keywords
    (80) parameter_keywords -> . parameter_kw_list
    (81) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (82) parameter_kw_list -> . IDENTIFIER COLON expression
    (83) parameter_kw_list -> . parameter_infty
    (84) parameter_infty -> . IDENTIFIER DOTS

    IDENTIFIER      shift and go to state 123

    parameter_pos_list             shift and go to state 153
    parameter_keywords             shift and go to state 124
    parameter_kw_list              shift and go to state 125
    parameter_infty                shift and go to state 126

state 140

    (81) parameter_kw_list -> IDENTIFIER COLON . expression COMMA parameter_kw_list
    (82) parameter_kw_list -> IDENTIFIER COLON . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 154
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 141

    (84) parameter_infty -> IDENTIFIER DOTS .

    RPAREN          reduce using rule 84 (parameter_infty -> IDENTIFIER DOTS .)


state 142

    (63) if_statement -> IF expression THEN statements . ENDCOND
    (64) if_statement -> IF expression THEN statements . else_elif_body ENDCOND
    (61) statements -> statements . SEMICOLON statement
    (65) else_elif_body -> . ELIF IF expression THEN statements else_elif_body
    (66) else_elif_body -> . ELSE statements

    ENDCOND         shift and go to state 155
    SEMICOLON       shift and go to state 157
    ELIF            shift and go to state 158
    ELSE            shift and go to state 159

    else_elif_body                 shift and go to state 156

state 143

    (67) while_statement -> WHILE expression THEN statements . ENDCOND
    (61) statements -> statements . SEMICOLON statement

    ENDCOND         shift and go to state 160
    SEMICOLON       shift and go to state 157


state 144

    (68) loop_statement -> LOOP IDENTIFIER LOOPIN interval . LOOPTHEN statements ENDCOND

    LOOPTHEN        shift and go to state 161


state 145

    (69) interval -> OPEN_BRACKETS . expression COMMA expression CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS . expression COMMA expression OPEN_BRACKETS
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 162
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 146

    (70) interval -> CLOSED_BRACKETS . expression COMMA expression CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS . expression COMMA expression OPEN_BRACKETS
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 163
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 147

    (94) function -> ECHO LPAREN expression RPAREN .

    END             reduce using rule 94 (function -> ECHO LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 94 (function -> ECHO LPAREN expression RPAREN .)
    ENDCOND         reduce using rule 94 (function -> ECHO LPAREN expression RPAREN .)
    ELIF            reduce using rule 94 (function -> ECHO LPAREN expression RPAREN .)
    ELSE            reduce using rule 94 (function -> ECHO LPAREN expression RPAREN .)


state 148

    (95) function -> LENGTH LPAREN expression RPAREN .

    END             reduce using rule 95 (function -> LENGTH LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 95 (function -> LENGTH LPAREN expression RPAREN .)
    ENDCOND         reduce using rule 95 (function -> LENGTH LPAREN expression RPAREN .)
    ELIF            reduce using rule 95 (function -> LENGTH LPAREN expression RPAREN .)
    ELSE            reduce using rule 95 (function -> LENGTH LPAREN expression RPAREN .)


state 149

    (87) parameter_pos_expr -> expression COMMA parameter_pos_expr .

    RPAREN          reduce using rule 87 (parameter_pos_expr -> expression COMMA parameter_pos_expr .)


state 150

    (90) parameter_keywords_expr -> expression COLON expression . COMMA parameter_keywords_expr
    (91) parameter_keywords_expr -> expression COLON expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    COMMA           shift and go to state 164
    RPAREN          reduce using rule 91 (parameter_keywords_expr -> expression COLON expression .)
    LPAREN          shift and go to state 29


state 151

    (26) comparison_chain -> comparison_op arithmetic_expression . comparison_chain
    (27) comparison_chain -> comparison_op arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG
    (26) comparison_chain -> . comparison_op arithmetic_expression comparison_chain
    (27) comparison_chain -> . comparison_op arithmetic_expression
    (28) comparison_op -> . GREATER_THAN
    (29) comparison_op -> . SMALLER_THAN
    (30) comparison_op -> . UNEQUALS
    (31) comparison_op -> . EQUALS
    (32) comparison_op -> . SMALLER_EQUALS
    (33) comparison_op -> . GREATER_EQUALS

    LPAREN          reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    END             reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    SEMICOLON       reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    RPAREN          reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    THEN            reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    COMMA           reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    COLON           reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    ENDCOND         reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    ELIF            reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    ELSE            reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    DIVIDE_CEIL     shift and go to state 34
    DIVIDE_FLOOR    shift and go to state 35
    MOD             shift and go to state 36
    EXP             shift and go to state 37
    AND             shift and go to state 38
    OR              shift and go to state 39
    XOR             shift and go to state 40
    POWER           shift and go to state 41
    IMAG            shift and go to state 42
    GREATER_THAN    shift and go to state 44
    SMALLER_THAN    shift and go to state 45
    UNEQUALS        shift and go to state 46
    EQUALS          shift and go to state 47
    SMALLER_EQUALS  shift and go to state 48
    GREATER_EQUALS  shift and go to state 49

    comparison_op                  shift and go to state 136
    comparison_chain               shift and go to state 165

state 152

    (73) expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW . expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 166
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 153

    (77) parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list .

    RPAREN          reduce using rule 77 (parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list .)


state 154

    (81) parameter_kw_list -> IDENTIFIER COLON expression . COMMA parameter_kw_list
    (82) parameter_kw_list -> IDENTIFIER COLON expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    COMMA           shift and go to state 167
    RPAREN          reduce using rule 82 (parameter_kw_list -> IDENTIFIER COLON expression .)
    LPAREN          shift and go to state 29


state 155

    (63) if_statement -> IF expression THEN statements ENDCOND .

    END             reduce using rule 63 (if_statement -> IF expression THEN statements ENDCOND .)
    SEMICOLON       reduce using rule 63 (if_statement -> IF expression THEN statements ENDCOND .)
    ENDCOND         reduce using rule 63 (if_statement -> IF expression THEN statements ENDCOND .)
    ELIF            reduce using rule 63 (if_statement -> IF expression THEN statements ENDCOND .)
    ELSE            reduce using rule 63 (if_statement -> IF expression THEN statements ENDCOND .)


state 156

    (64) if_statement -> IF expression THEN statements else_elif_body . ENDCOND

    ENDCOND         shift and go to state 168


state 157

    (61) statements -> statements SEMICOLON . statement
    (55) statement -> . expression
    (56) statement -> . sequence
    (57) statement -> . if_statement
    (58) statement -> . while_statement
    (59) statement -> . loop_statement
    (60) statement -> . function
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (53) sequence -> . BEGIN statements END
    (54) sequence -> . BEGIN statements SEMICOLON END
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (94) function -> . ECHO LPAREN expression RPAREN
    (95) function -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    BEGIN           shift and go to state 2
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    LOOP            shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    statement                      shift and go to state 81
    expression                     shift and go to state 5
    sequence                       shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    loop_statement                 shift and go to state 9
    function                       shift and go to state 10
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 158

    (65) else_elif_body -> ELIF . IF expression THEN statements else_elif_body

    IF              shift and go to state 169


state 159

    (66) else_elif_body -> ELSE . statements
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (55) statement -> . expression
    (56) statement -> . sequence
    (57) statement -> . if_statement
    (58) statement -> . while_statement
    (59) statement -> . loop_statement
    (60) statement -> . function
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (53) sequence -> . BEGIN statements END
    (54) sequence -> . BEGIN statements SEMICOLON END
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (94) function -> . ECHO LPAREN expression RPAREN
    (95) function -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    BEGIN           shift and go to state 2
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    LOOP            shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    statements                     shift and go to state 170
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    sequence                       shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    loop_statement                 shift and go to state 9
    function                       shift and go to state 10
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 160

    (67) while_statement -> WHILE expression THEN statements ENDCOND .

    END             reduce using rule 67 (while_statement -> WHILE expression THEN statements ENDCOND .)
    SEMICOLON       reduce using rule 67 (while_statement -> WHILE expression THEN statements ENDCOND .)
    ENDCOND         reduce using rule 67 (while_statement -> WHILE expression THEN statements ENDCOND .)
    ELIF            reduce using rule 67 (while_statement -> WHILE expression THEN statements ENDCOND .)
    ELSE            reduce using rule 67 (while_statement -> WHILE expression THEN statements ENDCOND .)


state 161

    (68) loop_statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN . statements ENDCOND
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (55) statement -> . expression
    (56) statement -> . sequence
    (57) statement -> . if_statement
    (58) statement -> . while_statement
    (59) statement -> . loop_statement
    (60) statement -> . function
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (53) sequence -> . BEGIN statements END
    (54) sequence -> . BEGIN statements SEMICOLON END
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (94) function -> . ECHO LPAREN expression RPAREN
    (95) function -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    BEGIN           shift and go to state 2
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    LOOP            shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    statements                     shift and go to state 171
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    sequence                       shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    loop_statement                 shift and go to state 9
    function                       shift and go to state 10
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 162

    (69) interval -> OPEN_BRACKETS expression . COMMA expression CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS expression . COMMA expression OPEN_BRACKETS
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    COMMA           shift and go to state 172
    LPAREN          shift and go to state 29


state 163

    (70) interval -> CLOSED_BRACKETS expression . COMMA expression CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS expression . COMMA expression OPEN_BRACKETS
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    COMMA           shift and go to state 173
    LPAREN          shift and go to state 29


state 164

    (90) parameter_keywords_expr -> expression COLON expression COMMA . parameter_keywords_expr
    (90) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (91) parameter_keywords_expr -> . expression COLON expression
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 174
    parameter_keywords_expr        shift and go to state 175
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 165

    (26) comparison_chain -> comparison_op arithmetic_expression comparison_chain .

    LPAREN          reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    END             reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    SEMICOLON       reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    RPAREN          reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    THEN            reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    COMMA           reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    COLON           reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ENDCOND         reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ELIF            reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ELSE            reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    CLOSED_BRACKETS reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    OPEN_BRACKETS   reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)


state 166

    (73) expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    LPAREN          reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)
    END             reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)
    SEMICOLON       reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)
    RPAREN          reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)
    THEN            reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)
    COMMA           reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)
    COLON           reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)
    ENDCOND         reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)
    ELIF            reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)
    ELSE            reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)
    CLOSED_BRACKETS reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)
    OPEN_BRACKETS   reduce using rule 73 (expression -> LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression .)

  ! LPAREN          [ shift and go to state 29 ]


state 167

    (81) parameter_kw_list -> IDENTIFIER COLON expression COMMA . parameter_kw_list
    (81) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (82) parameter_kw_list -> . IDENTIFIER COLON expression
    (83) parameter_kw_list -> . parameter_infty
    (84) parameter_infty -> . IDENTIFIER DOTS

    IDENTIFIER      shift and go to state 176

    parameter_kw_list              shift and go to state 177
    parameter_infty                shift and go to state 126

state 168

    (64) if_statement -> IF expression THEN statements else_elif_body ENDCOND .

    END             reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body ENDCOND .)
    SEMICOLON       reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body ENDCOND .)
    ENDCOND         reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body ENDCOND .)
    ELIF            reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body ENDCOND .)
    ELSE            reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body ENDCOND .)


state 169

    (65) else_elif_body -> ELIF IF . expression THEN statements else_elif_body
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 178
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 170

    (66) else_elif_body -> ELSE statements .
    (61) statements -> statements . SEMICOLON statement

    ENDCOND         reduce using rule 66 (else_elif_body -> ELSE statements .)
    SEMICOLON       shift and go to state 157


state 171

    (68) loop_statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements . ENDCOND
    (61) statements -> statements . SEMICOLON statement

    ENDCOND         shift and go to state 179
    SEMICOLON       shift and go to state 157


state 172

    (69) interval -> OPEN_BRACKETS expression COMMA . expression CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS expression COMMA . expression OPEN_BRACKETS
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 180
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 173

    (70) interval -> CLOSED_BRACKETS expression COMMA . expression CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS expression COMMA . expression OPEN_BRACKETS
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 181
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 174

    (90) parameter_keywords_expr -> expression . COLON expression COMMA parameter_keywords_expr
    (91) parameter_keywords_expr -> expression . COLON expression
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    COLON           shift and go to state 134
    LPAREN          shift and go to state 29


state 175

    (90) parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr .

    RPAREN          reduce using rule 90 (parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr .)


state 176

    (81) parameter_kw_list -> IDENTIFIER . COLON expression COMMA parameter_kw_list
    (82) parameter_kw_list -> IDENTIFIER . COLON expression
    (84) parameter_infty -> IDENTIFIER . DOTS

    COLON           shift and go to state 140
    DOTS            shift and go to state 141


state 177

    (81) parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list .

    RPAREN          reduce using rule 81 (parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list .)


state 178

    (65) else_elif_body -> ELIF IF expression . THEN statements else_elif_body
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    THEN            shift and go to state 182
    LPAREN          shift and go to state 29


state 179

    (68) loop_statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .

    END             reduce using rule 68 (loop_statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .)
    SEMICOLON       reduce using rule 68 (loop_statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .)
    ENDCOND         reduce using rule 68 (loop_statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .)
    ELIF            reduce using rule 68 (loop_statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .)
    ELSE            reduce using rule 68 (loop_statement -> LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND .)


state 180

    (69) interval -> OPEN_BRACKETS expression COMMA expression . CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS expression COMMA expression . OPEN_BRACKETS
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    CLOSED_BRACKETS shift and go to state 184
    OPEN_BRACKETS   shift and go to state 183
    LPAREN          shift and go to state 29


state 181

    (70) interval -> CLOSED_BRACKETS expression COMMA expression . CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS expression COMMA expression . OPEN_BRACKETS
    (93) expression -> expression . LPAREN parameter_expr RPAREN

    CLOSED_BRACKETS shift and go to state 185
    OPEN_BRACKETS   shift and go to state 186
    LPAREN          shift and go to state 29


state 182

    (65) else_elif_body -> ELIF IF expression THEN . statements else_elif_body
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (55) statement -> . expression
    (56) statement -> . sequence
    (57) statement -> . if_statement
    (58) statement -> . while_statement
    (59) statement -> . loop_statement
    (60) statement -> . function
    (5) expression -> . arithmetic_expression
    (6) expression -> . comparison
    (34) expression -> . IDENTIFIER ASSIGN expression
    (35) expression -> . IDENTIFIER PLUSASSIGN expression
    (36) expression -> . IDENTIFIER MINUSASSIGN expression
    (37) expression -> . IDENTIFIER TIMESASSIGN expression
    (38) expression -> . IDENTIFIER POWERASSIGN expression
    (39) expression -> . IDENTIFIER DIVIDEASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_FLOORASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_CEILASSIGN expression
    (42) expression -> . IDENTIFIER GREATER_THANASSIGN expression
    (43) expression -> . IDENTIFIER SMALLER_THANASSIGN expression
    (44) expression -> . IDENTIFIER GREATER_EQUALSASSIGN expression
    (45) expression -> . IDENTIFIER SMALLER_EQUALSASSIGN expression
    (46) expression -> . IDENTIFIER EQUALSASSIGN expression
    (47) expression -> . IDENTIFIER UNEQUALSASSIGN expression
    (48) expression -> . IDENTIFIER ANDASSIGN expression
    (49) expression -> . IDENTIFIER ORASSIGN expression
    (50) expression -> . IDENTIFIER XORASSIGN expression
    (51) expression -> . IDENTIFIER EXPASSIGN expression
    (52) expression -> . IDENTIFIER MODASSIGN expression
    (73) expression -> . LAMBDA LPAREN parameter RPAREN LAMBDA_ARROW expression
    (93) expression -> . expression LPAREN parameter_expr RPAREN
    (53) sequence -> . BEGIN statements END
    (54) sequence -> . BEGIN statements SEMICOLON END
    (63) if_statement -> . IF expression THEN statements ENDCOND
    (64) if_statement -> . IF expression THEN statements else_elif_body ENDCOND
    (67) while_statement -> . WHILE expression THEN statements ENDCOND
    (68) loop_statement -> . LOOP IDENTIFIER LOOPIN interval LOOPTHEN statements ENDCOND
    (94) function -> . ECHO LPAREN expression RPAREN
    (95) function -> . LENGTH LPAREN expression RPAREN
    (4) arithmetic_expression -> . LPAREN expression RPAREN
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13
    LAMBDA          shift and go to state 14
    BEGIN           shift and go to state 2
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    LOOP            shift and go to state 18
    ECHO            shift and go to state 19
    LENGTH          shift and go to state 20
    LPAREN          shift and go to state 15
    NOT             shift and go to state 23
    MINUS           shift and go to state 22
    PLUS            shift and go to state 21
    NUMBER          shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 5
    statements                     shift and go to state 187
    statement                      shift and go to state 4
    sequence                       shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    loop_statement                 shift and go to state 9
    function                       shift and go to state 10
    arithmetic_expression          shift and go to state 11
    comparison                     shift and go to state 12
    atomar                         shift and go to state 24

state 183

    (71) interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS .

    LOOPTHEN        reduce using rule 71 (interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS .)


state 184

    (69) interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS .

    LOOPTHEN        reduce using rule 69 (interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS .)


state 185

    (70) interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS .

    LOOPTHEN        reduce using rule 70 (interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS .)


state 186

    (72) interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS .

    LOOPTHEN        reduce using rule 72 (interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS .)


state 187

    (65) else_elif_body -> ELIF IF expression THEN statements . else_elif_body
    (61) statements -> statements . SEMICOLON statement
    (65) else_elif_body -> . ELIF IF expression THEN statements else_elif_body
    (66) else_elif_body -> . ELSE statements

    SEMICOLON       shift and go to state 157
    ELIF            shift and go to state 158
    ELSE            shift and go to state 159

    else_elif_body                 shift and go to state 188

state 188

    (65) else_elif_body -> ELIF IF expression THEN statements else_elif_body .

    ENDCOND         reduce using rule 65 (else_elif_body -> ELIF IF expression THEN statements else_elif_body .)

