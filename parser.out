Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CONST

Grammar

Rule 0     S' -> sequence
Rule 1     atomar -> NUMBER
Rule 2     atomar -> FLOAT
Rule 3     atomar -> STRING
Rule 4     atomar -> IDENTIFIER
Rule 5     atomar -> LPAREN expression RPAREN
Rule 6     expression -> arithmetic_expression
Rule 7     arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression
Rule 8     arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression
Rule 9     arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression
Rule 10    arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression
Rule 11    arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression
Rule 12    arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression
Rule 13    arithmetic_expression -> arithmetic_expression MOD arithmetic_expression
Rule 14    arithmetic_expression -> arithmetic_expression EXP arithmetic_expression
Rule 15    arithmetic_expression -> arithmetic_expression AND arithmetic_expression
Rule 16    arithmetic_expression -> arithmetic_expression OR arithmetic_expression
Rule 17    arithmetic_expression -> arithmetic_expression XOR arithmetic_expression
Rule 18    arithmetic_expression -> arithmetic_expression POWER arithmetic_expression
Rule 19    arithmetic_expression -> NOT arithmetic_expression
Rule 20    arithmetic_expression -> MINUS arithmetic_expression
Rule 21    arithmetic_expression -> PLUS arithmetic_expression
Rule 22    arithmetic_expression -> arithmetic_expression IMAG
Rule 23    arithmetic_expression -> atomar
Rule 24    comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain
Rule 25    comparison -> arithmetic_expression comparison_op arithmetic_expression
Rule 26    comparison_chain -> comparison_op arithmetic_expression comparison_chain
Rule 27    comparison_chain -> comparison_op arithmetic_expression
Rule 28    comparison_op -> GREATER_THAN
Rule 29    comparison_op -> SMALLER_THAN
Rule 30    comparison_op -> UNEQUALS
Rule 31    comparison_op -> EQUALS
Rule 32    comparison_op -> SMALLER_EQUALS
Rule 33    comparison_op -> GREATER_EQUALS
Rule 34    expression -> comparison
Rule 35    expression -> IDENTIFIER ASSIGN expression
Rule 36    expression -> IDENTIFIER PLUS_ASSIGN expression
Rule 37    expression -> IDENTIFIER MINUS_ASSIGN expression
Rule 38    expression -> IDENTIFIER TIMES_ASSIGN expression
Rule 39    expression -> IDENTIFIER POWER_ASSIGN expression
Rule 40    expression -> IDENTIFIER DIVIDE_ASSIGN expression
Rule 41    expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
Rule 42    expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression
Rule 43    expression -> IDENTIFIER GREATER_THAN_ASSIGN expression
Rule 44    expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression
Rule 45    expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression
Rule 46    expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression
Rule 47    expression -> IDENTIFIER EQUALS_ASSIGN expression
Rule 48    expression -> IDENTIFIER UNEQUALS_ASSIGN expression
Rule 49    expression -> IDENTIFIER AND_ASSIGN expression
Rule 50    expression -> IDENTIFIER OR_ASSIGN expression
Rule 51    expression -> IDENTIFIER XOR_ASSIGN expression
Rule 52    expression -> IDENTIFIER EXP_ASSIGN expression
Rule 53    expression -> IDENTIFIER MOD_ASSIGN expression
Rule 54    sequence -> BEGIN statements END
Rule 55    sequence -> BEGIN statements SEMICOLON END
Rule 56    expression -> sequence
Rule 57    statement -> expression
Rule 58    statement -> if_statement
Rule 59    statement -> while_statement
Rule 60    statement -> loop_statement
Rule 61    statements -> statements SEMICOLON statement
Rule 62    statements -> statement
Rule 63    if_statement -> IF expression THEN statements DOT
Rule 64    if_statement -> IF expression THEN statements else_elif_body DOT
Rule 65    else_elif_body -> ELIF IF expression THEN statements else_elif_body
Rule 66    else_elif_body -> ELSE statements
Rule 67    while_statement -> WHILE expression THEN statements DOT
Rule 68    loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
Rule 69    interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS
Rule 70    interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS
Rule 71    interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS
Rule 72    interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS
Rule 73    lambda -> LAMBDA parameter LAMBDA_ARROW expression
Rule 74    expression -> lambda
Rule 75    parameter -> LPAREN parameter_pos RPAREN
Rule 76    parameter -> IDENTIFIER
Rule 77    parameter -> empty
Rule 78    parameter_pos -> parameter_pos_list
Rule 79    parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list
Rule 80    parameter_pos_list -> IDENTIFIER
Rule 81    parameter_pos_list -> parameter_keywords
Rule 82    parameter_keywords -> parameter_kw_list
Rule 83    parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list
Rule 84    parameter_kw_list -> IDENTIFIER COLON expression
Rule 85    parameter_kw_list -> parameter_infty
Rule 86    parameter_infty -> IDENTIFIER DOTS
Rule 87    parameter_expr -> parameter_pos_expr
Rule 88    parameter_expr -> empty
Rule 89    parameter_pos_expr -> expression COMMA parameter_pos_expr
Rule 90    parameter_pos_expr -> expression
Rule 91    parameter_pos_expr -> parameter_keywords_expr
Rule 92    parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr
Rule 93    parameter_keywords_expr -> expression COLON expression
Rule 94    empty -> <empty>
Rule 95    expression -> atomar LPAREN parameter_expr RPAREN
Rule 96    expression -> LET IDENTIFIER EQUALS expression IN expression DOT
Rule 97    expression -> ECHO LPAREN param_list RPAREN
Rule 98    expression -> LENGTH LPAREN param_list RPAREN
Rule 99    expression -> LIST LPAREN param_list RPAREN
Rule 100   param_list -> expression COMMA param_list
Rule 101   param_list -> expression
Rule 102   list_parameter -> expression list_parameter
Rule 103   list_parameter -> expression
Rule 104   expression -> list_parameter
Rule 105   expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS
Rule 106   expression -> OPEN_BRACKETS empty CLOSED_BRACKETS

Terminals, with rules where they appear

AND                  : 15
AND_ASSIGN           : 49
ASSIGN               : 35
BEGIN                : 54 55
CLOSED_BRACKETS      : 69 70 70 72 105 106
COLON                : 83 84 92 93
COMMA                : 69 70 71 72 79 83 89 92 100
CONST                : 
DIVIDE               : 10
DIVIDE_ASSIGN        : 40
DIVIDE_CEIL          : 11
DIVIDE_CEIL_ASSIGN   : 42
DIVIDE_FLOOR         : 12
DIVIDE_FLOOR_ASSIGN  : 41
DOT                  : 63 64 67 68 96
DOTS                 : 86
ECHO                 : 97
ELIF                 : 65
ELSE                 : 66
END                  : 54 55
EQUALS               : 31 96
EQUALS_ASSIGN        : 47
EXP                  : 14
EXP_ASSIGN           : 52
FLOAT                : 2
GREATER_EQUALS       : 33
GREATER_EQUALS_ASSIGN : 45
GREATER_THAN         : 28
GREATER_THAN_ASSIGN  : 43
IDENTIFIER           : 4 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 68 76 79 80 83 84 86 96
IF                   : 63 64 65
IMAG                 : 22
IN                   : 68 96
LAMBDA               : 73
LAMBDA_ARROW         : 73
LENGTH               : 98
LET                  : 96
LIST                 : 99
LOOP                 : 68
LOOPTHEN             : 68
LPAREN               : 5 75 95 97 98 99
MINUS                : 8 20
MINUS_ASSIGN         : 37
MOD                  : 13
MOD_ASSIGN           : 53
NOT                  : 19
NUMBER               : 1
OPEN_BRACKETS        : 69 71 71 72 105 106
OR                   : 16
OR_ASSIGN            : 50
PLUS                 : 7 21
PLUS_ASSIGN          : 36
POWER                : 18
POWER_ASSIGN         : 39
RPAREN               : 5 75 95 97 98 99
SEMICOLON            : 55 61
SMALLER_EQUALS       : 32
SMALLER_EQUALS_ASSIGN : 46
SMALLER_THAN         : 29
SMALLER_THAN_ASSIGN  : 44
STRING               : 3
THEN                 : 63 64 65 67
TIMES                : 9
TIMES_ASSIGN         : 38
UNEQUALS             : 30
UNEQUALS_ASSIGN      : 48
WHILE                : 67
XOR                  : 17
XOR_ASSIGN           : 51
error                : 

Nonterminals, with rules where they appear

arithmetic_expression : 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 20 21 22 24 24 25 25 26 27
atomar               : 23 95
comparison           : 34
comparison_chain     : 24 26
comparison_op        : 24 25 26 27
else_elif_body       : 64 65
empty                : 77 88 106
expression           : 5 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 57 63 64 65 67 69 69 70 70 71 71 72 72 73 83 84 89 90 92 92 93 93 96 96 100 101 102 103
if_statement         : 58
interval             : 68
lambda               : 74
list_parameter       : 102 104
loop_statement       : 60
param_list           : 97 98 99 100 105
parameter            : 73
parameter_expr       : 95
parameter_infty      : 85
parameter_keywords   : 81
parameter_keywords_expr : 91 92
parameter_kw_list    : 82 83
parameter_pos        : 75
parameter_pos_expr   : 87 89
parameter_pos_list   : 78 79
sequence             : 56 0
statement            : 61 62
statements           : 54 55 61 63 64 65 66 67 68
while_statement      : 59

Parsing method: LALR

state 0

    (0) S' -> . sequence
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END

    BEGIN           shift and go to state 2

    sequence                       shift and go to state 1

state 1

    (0) S' -> sequence .



state 2

    (54) sequence -> BEGIN . statements END
    (55) sequence -> BEGIN . statements SEMICOLON END
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (63) if_statement -> . IF expression THEN statements DOT
    (64) if_statement -> . IF expression THEN statements else_elif_body DOT
    (67) while_statement -> . WHILE expression THEN statements DOT
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    LOOP            shift and go to state 24
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    statements                     shift and go to state 3
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 3

    (54) sequence -> BEGIN statements . END
    (55) sequence -> BEGIN statements . SEMICOLON END
    (61) statements -> statements . SEMICOLON statement

    END             shift and go to state 32
    SEMICOLON       shift and go to state 33


state 4

    (62) statements -> statement .

    END             reduce using rule 62 (statements -> statement .)
    SEMICOLON       reduce using rule 62 (statements -> statement .)
    DOT             reduce using rule 62 (statements -> statement .)
    ELIF            reduce using rule 62 (statements -> statement .)
    ELSE            reduce using rule 62 (statements -> statement .)


state 5

    (57) statement -> expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for END resolved using rule 57 (statement -> expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 57 (statement -> expression .)
  ! reduce/reduce conflict for DOT resolved using rule 57 (statement -> expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 57 (statement -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 57 (statement -> expression .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 57 (statement -> expression .)
    SEMICOLON       reduce using rule 57 (statement -> expression .)
    DOT             reduce using rule 57 (statement -> expression .)
    ELIF            reduce using rule 57 (statement -> expression .)
    ELSE            reduce using rule 57 (statement -> expression .)
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 6

    (58) statement -> if_statement .

    END             reduce using rule 58 (statement -> if_statement .)
    SEMICOLON       reduce using rule 58 (statement -> if_statement .)
    DOT             reduce using rule 58 (statement -> if_statement .)
    ELIF            reduce using rule 58 (statement -> if_statement .)
    ELSE            reduce using rule 58 (statement -> if_statement .)


state 7

    (59) statement -> while_statement .

    END             reduce using rule 59 (statement -> while_statement .)
    SEMICOLON       reduce using rule 59 (statement -> while_statement .)
    DOT             reduce using rule 59 (statement -> while_statement .)
    ELIF            reduce using rule 59 (statement -> while_statement .)
    ELSE            reduce using rule 59 (statement -> while_statement .)


state 8

    (60) statement -> loop_statement .

    END             reduce using rule 60 (statement -> loop_statement .)
    SEMICOLON       reduce using rule 60 (statement -> loop_statement .)
    DOT             reduce using rule 60 (statement -> loop_statement .)
    ELIF            reduce using rule 60 (statement -> loop_statement .)
    ELSE            reduce using rule 60 (statement -> loop_statement .)


state 9

    (6) expression -> arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG
    (24) comparison -> arithmetic_expression . comparison_op arithmetic_expression comparison_chain
    (25) comparison -> arithmetic_expression . comparison_op arithmetic_expression
    (28) comparison_op -> . GREATER_THAN
    (29) comparison_op -> . SMALLER_THAN
    (30) comparison_op -> . UNEQUALS
    (31) comparison_op -> . EQUALS
    (32) comparison_op -> . SMALLER_EQUALS
    (33) comparison_op -> . GREATER_EQUALS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    IDENTIFIER      reduce using rule 6 (expression -> arithmetic_expression .)
    LET             reduce using rule 6 (expression -> arithmetic_expression .)
    ECHO            reduce using rule 6 (expression -> arithmetic_expression .)
    LENGTH          reduce using rule 6 (expression -> arithmetic_expression .)
    LIST            reduce using rule 6 (expression -> arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 6 (expression -> arithmetic_expression .)
    NOT             reduce using rule 6 (expression -> arithmetic_expression .)
    BEGIN           reduce using rule 6 (expression -> arithmetic_expression .)
    LAMBDA          reduce using rule 6 (expression -> arithmetic_expression .)
    NUMBER          reduce using rule 6 (expression -> arithmetic_expression .)
    FLOAT           reduce using rule 6 (expression -> arithmetic_expression .)
    STRING          reduce using rule 6 (expression -> arithmetic_expression .)
    LPAREN          reduce using rule 6 (expression -> arithmetic_expression .)
    END             reduce using rule 6 (expression -> arithmetic_expression .)
    SEMICOLON       reduce using rule 6 (expression -> arithmetic_expression .)
    DOT             reduce using rule 6 (expression -> arithmetic_expression .)
    ELIF            reduce using rule 6 (expression -> arithmetic_expression .)
    ELSE            reduce using rule 6 (expression -> arithmetic_expression .)
    RPAREN          reduce using rule 6 (expression -> arithmetic_expression .)
    COMMA           reduce using rule 6 (expression -> arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 6 (expression -> arithmetic_expression .)
    THEN            reduce using rule 6 (expression -> arithmetic_expression .)
    COLON           reduce using rule 6 (expression -> arithmetic_expression .)
    IN              reduce using rule 6 (expression -> arithmetic_expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    DIVIDE_CEIL     shift and go to state 40
    DIVIDE_FLOOR    shift and go to state 41
    MOD             shift and go to state 42
    EXP             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    XOR             shift and go to state 46
    POWER           shift and go to state 47
    IMAG            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! MINUS           [ reduce using rule 6 (expression -> arithmetic_expression .) ]
  ! PLUS            [ reduce using rule 6 (expression -> arithmetic_expression .) ]

    comparison_op                  shift and go to state 49

state 10

    (34) expression -> comparison .

    IDENTIFIER      reduce using rule 34 (expression -> comparison .)
    LET             reduce using rule 34 (expression -> comparison .)
    ECHO            reduce using rule 34 (expression -> comparison .)
    LENGTH          reduce using rule 34 (expression -> comparison .)
    LIST            reduce using rule 34 (expression -> comparison .)
    OPEN_BRACKETS   reduce using rule 34 (expression -> comparison .)
    NOT             reduce using rule 34 (expression -> comparison .)
    MINUS           reduce using rule 34 (expression -> comparison .)
    PLUS            reduce using rule 34 (expression -> comparison .)
    BEGIN           reduce using rule 34 (expression -> comparison .)
    LAMBDA          reduce using rule 34 (expression -> comparison .)
    NUMBER          reduce using rule 34 (expression -> comparison .)
    FLOAT           reduce using rule 34 (expression -> comparison .)
    STRING          reduce using rule 34 (expression -> comparison .)
    LPAREN          reduce using rule 34 (expression -> comparison .)
    END             reduce using rule 34 (expression -> comparison .)
    SEMICOLON       reduce using rule 34 (expression -> comparison .)
    DOT             reduce using rule 34 (expression -> comparison .)
    ELIF            reduce using rule 34 (expression -> comparison .)
    ELSE            reduce using rule 34 (expression -> comparison .)
    RPAREN          reduce using rule 34 (expression -> comparison .)
    COMMA           reduce using rule 34 (expression -> comparison .)
    CLOSED_BRACKETS reduce using rule 34 (expression -> comparison .)
    THEN            reduce using rule 34 (expression -> comparison .)
    COLON           reduce using rule 34 (expression -> comparison .)
    IN              reduce using rule 34 (expression -> comparison .)


state 11

    (35) expression -> IDENTIFIER . ASSIGN expression
    (36) expression -> IDENTIFIER . PLUS_ASSIGN expression
    (37) expression -> IDENTIFIER . MINUS_ASSIGN expression
    (38) expression -> IDENTIFIER . TIMES_ASSIGN expression
    (39) expression -> IDENTIFIER . POWER_ASSIGN expression
    (40) expression -> IDENTIFIER . DIVIDE_ASSIGN expression
    (41) expression -> IDENTIFIER . DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> IDENTIFIER . DIVIDE_CEIL_ASSIGN expression
    (43) expression -> IDENTIFIER . GREATER_THAN_ASSIGN expression
    (44) expression -> IDENTIFIER . SMALLER_THAN_ASSIGN expression
    (45) expression -> IDENTIFIER . GREATER_EQUALS_ASSIGN expression
    (46) expression -> IDENTIFIER . SMALLER_EQUALS_ASSIGN expression
    (47) expression -> IDENTIFIER . EQUALS_ASSIGN expression
    (48) expression -> IDENTIFIER . UNEQUALS_ASSIGN expression
    (49) expression -> IDENTIFIER . AND_ASSIGN expression
    (50) expression -> IDENTIFIER . OR_ASSIGN expression
    (51) expression -> IDENTIFIER . XOR_ASSIGN expression
    (52) expression -> IDENTIFIER . EXP_ASSIGN expression
    (53) expression -> IDENTIFIER . MOD_ASSIGN expression
    (4) atomar -> IDENTIFIER .

    ASSIGN          shift and go to state 56
    PLUS_ASSIGN     shift and go to state 57
    MINUS_ASSIGN    shift and go to state 58
    TIMES_ASSIGN    shift and go to state 59
    POWER_ASSIGN    shift and go to state 60
    DIVIDE_ASSIGN   shift and go to state 61
    DIVIDE_FLOOR_ASSIGN shift and go to state 62
    DIVIDE_CEIL_ASSIGN shift and go to state 63
    GREATER_THAN_ASSIGN shift and go to state 64
    SMALLER_THAN_ASSIGN shift and go to state 65
    GREATER_EQUALS_ASSIGN shift and go to state 66
    SMALLER_EQUALS_ASSIGN shift and go to state 67
    EQUALS_ASSIGN   shift and go to state 68
    UNEQUALS_ASSIGN shift and go to state 69
    AND_ASSIGN      shift and go to state 70
    OR_ASSIGN       shift and go to state 71
    XOR_ASSIGN      shift and go to state 72
    EXP_ASSIGN      shift and go to state 73
    MOD_ASSIGN      shift and go to state 74
    LPAREN          reduce using rule 4 (atomar -> IDENTIFIER .)
    PLUS            reduce using rule 4 (atomar -> IDENTIFIER .)
    MINUS           reduce using rule 4 (atomar -> IDENTIFIER .)
    TIMES           reduce using rule 4 (atomar -> IDENTIFIER .)
    DIVIDE          reduce using rule 4 (atomar -> IDENTIFIER .)
    DIVIDE_CEIL     reduce using rule 4 (atomar -> IDENTIFIER .)
    DIVIDE_FLOOR    reduce using rule 4 (atomar -> IDENTIFIER .)
    MOD             reduce using rule 4 (atomar -> IDENTIFIER .)
    EXP             reduce using rule 4 (atomar -> IDENTIFIER .)
    AND             reduce using rule 4 (atomar -> IDENTIFIER .)
    OR              reduce using rule 4 (atomar -> IDENTIFIER .)
    XOR             reduce using rule 4 (atomar -> IDENTIFIER .)
    POWER           reduce using rule 4 (atomar -> IDENTIFIER .)
    IMAG            reduce using rule 4 (atomar -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 4 (atomar -> IDENTIFIER .)
    SMALLER_THAN    reduce using rule 4 (atomar -> IDENTIFIER .)
    UNEQUALS        reduce using rule 4 (atomar -> IDENTIFIER .)
    EQUALS          reduce using rule 4 (atomar -> IDENTIFIER .)
    SMALLER_EQUALS  reduce using rule 4 (atomar -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 4 (atomar -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 4 (atomar -> IDENTIFIER .)
    LET             reduce using rule 4 (atomar -> IDENTIFIER .)
    ECHO            reduce using rule 4 (atomar -> IDENTIFIER .)
    LENGTH          reduce using rule 4 (atomar -> IDENTIFIER .)
    LIST            reduce using rule 4 (atomar -> IDENTIFIER .)
    OPEN_BRACKETS   reduce using rule 4 (atomar -> IDENTIFIER .)
    NOT             reduce using rule 4 (atomar -> IDENTIFIER .)
    BEGIN           reduce using rule 4 (atomar -> IDENTIFIER .)
    LAMBDA          reduce using rule 4 (atomar -> IDENTIFIER .)
    NUMBER          reduce using rule 4 (atomar -> IDENTIFIER .)
    FLOAT           reduce using rule 4 (atomar -> IDENTIFIER .)
    STRING          reduce using rule 4 (atomar -> IDENTIFIER .)
    END             reduce using rule 4 (atomar -> IDENTIFIER .)
    SEMICOLON       reduce using rule 4 (atomar -> IDENTIFIER .)
    DOT             reduce using rule 4 (atomar -> IDENTIFIER .)
    ELIF            reduce using rule 4 (atomar -> IDENTIFIER .)
    ELSE            reduce using rule 4 (atomar -> IDENTIFIER .)
    RPAREN          reduce using rule 4 (atomar -> IDENTIFIER .)
    COMMA           reduce using rule 4 (atomar -> IDENTIFIER .)
    CLOSED_BRACKETS reduce using rule 4 (atomar -> IDENTIFIER .)
    THEN            reduce using rule 4 (atomar -> IDENTIFIER .)
    COLON           reduce using rule 4 (atomar -> IDENTIFIER .)
    IN              reduce using rule 4 (atomar -> IDENTIFIER .)


state 12

    (56) expression -> sequence .

    IDENTIFIER      reduce using rule 56 (expression -> sequence .)
    LET             reduce using rule 56 (expression -> sequence .)
    ECHO            reduce using rule 56 (expression -> sequence .)
    LENGTH          reduce using rule 56 (expression -> sequence .)
    LIST            reduce using rule 56 (expression -> sequence .)
    OPEN_BRACKETS   reduce using rule 56 (expression -> sequence .)
    NOT             reduce using rule 56 (expression -> sequence .)
    MINUS           reduce using rule 56 (expression -> sequence .)
    PLUS            reduce using rule 56 (expression -> sequence .)
    BEGIN           reduce using rule 56 (expression -> sequence .)
    LAMBDA          reduce using rule 56 (expression -> sequence .)
    NUMBER          reduce using rule 56 (expression -> sequence .)
    FLOAT           reduce using rule 56 (expression -> sequence .)
    STRING          reduce using rule 56 (expression -> sequence .)
    LPAREN          reduce using rule 56 (expression -> sequence .)
    END             reduce using rule 56 (expression -> sequence .)
    SEMICOLON       reduce using rule 56 (expression -> sequence .)
    DOT             reduce using rule 56 (expression -> sequence .)
    ELIF            reduce using rule 56 (expression -> sequence .)
    ELSE            reduce using rule 56 (expression -> sequence .)
    RPAREN          reduce using rule 56 (expression -> sequence .)
    COMMA           reduce using rule 56 (expression -> sequence .)
    CLOSED_BRACKETS reduce using rule 56 (expression -> sequence .)
    THEN            reduce using rule 56 (expression -> sequence .)
    COLON           reduce using rule 56 (expression -> sequence .)
    IN              reduce using rule 56 (expression -> sequence .)


state 13

    (74) expression -> lambda .

    IDENTIFIER      reduce using rule 74 (expression -> lambda .)
    LET             reduce using rule 74 (expression -> lambda .)
    ECHO            reduce using rule 74 (expression -> lambda .)
    LENGTH          reduce using rule 74 (expression -> lambda .)
    LIST            reduce using rule 74 (expression -> lambda .)
    OPEN_BRACKETS   reduce using rule 74 (expression -> lambda .)
    NOT             reduce using rule 74 (expression -> lambda .)
    MINUS           reduce using rule 74 (expression -> lambda .)
    PLUS            reduce using rule 74 (expression -> lambda .)
    BEGIN           reduce using rule 74 (expression -> lambda .)
    LAMBDA          reduce using rule 74 (expression -> lambda .)
    NUMBER          reduce using rule 74 (expression -> lambda .)
    FLOAT           reduce using rule 74 (expression -> lambda .)
    STRING          reduce using rule 74 (expression -> lambda .)
    LPAREN          reduce using rule 74 (expression -> lambda .)
    END             reduce using rule 74 (expression -> lambda .)
    SEMICOLON       reduce using rule 74 (expression -> lambda .)
    DOT             reduce using rule 74 (expression -> lambda .)
    ELIF            reduce using rule 74 (expression -> lambda .)
    ELSE            reduce using rule 74 (expression -> lambda .)
    RPAREN          reduce using rule 74 (expression -> lambda .)
    COMMA           reduce using rule 74 (expression -> lambda .)
    CLOSED_BRACKETS reduce using rule 74 (expression -> lambda .)
    THEN            reduce using rule 74 (expression -> lambda .)
    COLON           reduce using rule 74 (expression -> lambda .)
    IN              reduce using rule 74 (expression -> lambda .)


state 14

    (95) expression -> atomar . LPAREN parameter_expr RPAREN
    (23) arithmetic_expression -> atomar .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 75
    PLUS            reduce using rule 23 (arithmetic_expression -> atomar .)
    MINUS           reduce using rule 23 (arithmetic_expression -> atomar .)
    TIMES           reduce using rule 23 (arithmetic_expression -> atomar .)
    DIVIDE          reduce using rule 23 (arithmetic_expression -> atomar .)
    DIVIDE_CEIL     reduce using rule 23 (arithmetic_expression -> atomar .)
    DIVIDE_FLOOR    reduce using rule 23 (arithmetic_expression -> atomar .)
    MOD             reduce using rule 23 (arithmetic_expression -> atomar .)
    EXP             reduce using rule 23 (arithmetic_expression -> atomar .)
    AND             reduce using rule 23 (arithmetic_expression -> atomar .)
    OR              reduce using rule 23 (arithmetic_expression -> atomar .)
    XOR             reduce using rule 23 (arithmetic_expression -> atomar .)
    POWER           reduce using rule 23 (arithmetic_expression -> atomar .)
    IMAG            reduce using rule 23 (arithmetic_expression -> atomar .)
    GREATER_THAN    reduce using rule 23 (arithmetic_expression -> atomar .)
    SMALLER_THAN    reduce using rule 23 (arithmetic_expression -> atomar .)
    UNEQUALS        reduce using rule 23 (arithmetic_expression -> atomar .)
    EQUALS          reduce using rule 23 (arithmetic_expression -> atomar .)
    SMALLER_EQUALS  reduce using rule 23 (arithmetic_expression -> atomar .)
    GREATER_EQUALS  reduce using rule 23 (arithmetic_expression -> atomar .)
    IDENTIFIER      reduce using rule 23 (arithmetic_expression -> atomar .)
    LET             reduce using rule 23 (arithmetic_expression -> atomar .)
    ECHO            reduce using rule 23 (arithmetic_expression -> atomar .)
    LENGTH          reduce using rule 23 (arithmetic_expression -> atomar .)
    LIST            reduce using rule 23 (arithmetic_expression -> atomar .)
    OPEN_BRACKETS   reduce using rule 23 (arithmetic_expression -> atomar .)
    NOT             reduce using rule 23 (arithmetic_expression -> atomar .)
    BEGIN           reduce using rule 23 (arithmetic_expression -> atomar .)
    LAMBDA          reduce using rule 23 (arithmetic_expression -> atomar .)
    NUMBER          reduce using rule 23 (arithmetic_expression -> atomar .)
    FLOAT           reduce using rule 23 (arithmetic_expression -> atomar .)
    STRING          reduce using rule 23 (arithmetic_expression -> atomar .)
    END             reduce using rule 23 (arithmetic_expression -> atomar .)
    SEMICOLON       reduce using rule 23 (arithmetic_expression -> atomar .)
    DOT             reduce using rule 23 (arithmetic_expression -> atomar .)
    ELIF            reduce using rule 23 (arithmetic_expression -> atomar .)
    ELSE            reduce using rule 23 (arithmetic_expression -> atomar .)
    RPAREN          reduce using rule 23 (arithmetic_expression -> atomar .)
    COMMA           reduce using rule 23 (arithmetic_expression -> atomar .)
    CLOSED_BRACKETS reduce using rule 23 (arithmetic_expression -> atomar .)
    THEN            reduce using rule 23 (arithmetic_expression -> atomar .)
    COLON           reduce using rule 23 (arithmetic_expression -> atomar .)
    IN              reduce using rule 23 (arithmetic_expression -> atomar .)

  ! LPAREN          [ reduce using rule 23 (arithmetic_expression -> atomar .) ]


state 15

    (5) atomar -> LPAREN . expression RPAREN
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 76
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 16

    (96) expression -> LET . IDENTIFIER EQUALS expression IN expression DOT

    IDENTIFIER      shift and go to state 77


state 17

    (97) expression -> ECHO . LPAREN param_list RPAREN

    LPAREN          shift and go to state 78


state 18

    (98) expression -> LENGTH . LPAREN param_list RPAREN

    LPAREN          shift and go to state 79


state 19

    (99) expression -> LIST . LPAREN param_list RPAREN

    LPAREN          shift and go to state 80


state 20

    (104) expression -> list_parameter .

    IDENTIFIER      reduce using rule 104 (expression -> list_parameter .)
    LET             reduce using rule 104 (expression -> list_parameter .)
    ECHO            reduce using rule 104 (expression -> list_parameter .)
    LENGTH          reduce using rule 104 (expression -> list_parameter .)
    LIST            reduce using rule 104 (expression -> list_parameter .)
    OPEN_BRACKETS   reduce using rule 104 (expression -> list_parameter .)
    NOT             reduce using rule 104 (expression -> list_parameter .)
    MINUS           reduce using rule 104 (expression -> list_parameter .)
    PLUS            reduce using rule 104 (expression -> list_parameter .)
    BEGIN           reduce using rule 104 (expression -> list_parameter .)
    LAMBDA          reduce using rule 104 (expression -> list_parameter .)
    NUMBER          reduce using rule 104 (expression -> list_parameter .)
    FLOAT           reduce using rule 104 (expression -> list_parameter .)
    STRING          reduce using rule 104 (expression -> list_parameter .)
    LPAREN          reduce using rule 104 (expression -> list_parameter .)
    END             reduce using rule 104 (expression -> list_parameter .)
    SEMICOLON       reduce using rule 104 (expression -> list_parameter .)
    RPAREN          reduce using rule 104 (expression -> list_parameter .)
    COMMA           reduce using rule 104 (expression -> list_parameter .)
    CLOSED_BRACKETS reduce using rule 104 (expression -> list_parameter .)
    THEN            reduce using rule 104 (expression -> list_parameter .)
    DOT             reduce using rule 104 (expression -> list_parameter .)
    ELIF            reduce using rule 104 (expression -> list_parameter .)
    ELSE            reduce using rule 104 (expression -> list_parameter .)
    COLON           reduce using rule 104 (expression -> list_parameter .)
    IN              reduce using rule 104 (expression -> list_parameter .)


state 21

    (105) expression -> OPEN_BRACKETS . param_list CLOSED_BRACKETS
    (106) expression -> OPEN_BRACKETS . empty CLOSED_BRACKETS
    (100) param_list -> . expression COMMA param_list
    (101) param_list -> . expression
    (94) empty -> .
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    CLOSED_BRACKETS reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    param_list                     shift and go to state 81
    empty                          shift and go to state 82
    expression                     shift and go to state 83
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 22

    (63) if_statement -> IF . expression THEN statements DOT
    (64) if_statement -> IF . expression THEN statements else_elif_body DOT
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 84
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 23

    (67) while_statement -> WHILE . expression THEN statements DOT
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 85
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 24

    (68) loop_statement -> LOOP . IDENTIFIER IN interval LOOPTHEN statements DOT

    IDENTIFIER      shift and go to state 86


state 25

    (21) arithmetic_expression -> PLUS . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 87
    atomar                         shift and go to state 88

state 26

    (20) arithmetic_expression -> MINUS . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 90
    atomar                         shift and go to state 88

state 27

    (19) arithmetic_expression -> NOT . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 91
    atomar                         shift and go to state 88

state 28

    (73) lambda -> LAMBDA . parameter LAMBDA_ARROW expression
    (75) parameter -> . LPAREN parameter_pos RPAREN
    (76) parameter -> . IDENTIFIER
    (77) parameter -> . empty
    (94) empty -> .

    LPAREN          shift and go to state 93
    IDENTIFIER      shift and go to state 94
    LAMBDA_ARROW    reduce using rule 94 (empty -> .)

    parameter                      shift and go to state 92
    empty                          shift and go to state 95

state 29

    (1) atomar -> NUMBER .

    LPAREN          reduce using rule 1 (atomar -> NUMBER .)
    PLUS            reduce using rule 1 (atomar -> NUMBER .)
    MINUS           reduce using rule 1 (atomar -> NUMBER .)
    TIMES           reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE          reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE_CEIL     reduce using rule 1 (atomar -> NUMBER .)
    DIVIDE_FLOOR    reduce using rule 1 (atomar -> NUMBER .)
    MOD             reduce using rule 1 (atomar -> NUMBER .)
    EXP             reduce using rule 1 (atomar -> NUMBER .)
    AND             reduce using rule 1 (atomar -> NUMBER .)
    OR              reduce using rule 1 (atomar -> NUMBER .)
    XOR             reduce using rule 1 (atomar -> NUMBER .)
    POWER           reduce using rule 1 (atomar -> NUMBER .)
    IMAG            reduce using rule 1 (atomar -> NUMBER .)
    GREATER_THAN    reduce using rule 1 (atomar -> NUMBER .)
    SMALLER_THAN    reduce using rule 1 (atomar -> NUMBER .)
    UNEQUALS        reduce using rule 1 (atomar -> NUMBER .)
    EQUALS          reduce using rule 1 (atomar -> NUMBER .)
    SMALLER_EQUALS  reduce using rule 1 (atomar -> NUMBER .)
    GREATER_EQUALS  reduce using rule 1 (atomar -> NUMBER .)
    IDENTIFIER      reduce using rule 1 (atomar -> NUMBER .)
    LET             reduce using rule 1 (atomar -> NUMBER .)
    ECHO            reduce using rule 1 (atomar -> NUMBER .)
    LENGTH          reduce using rule 1 (atomar -> NUMBER .)
    LIST            reduce using rule 1 (atomar -> NUMBER .)
    OPEN_BRACKETS   reduce using rule 1 (atomar -> NUMBER .)
    NOT             reduce using rule 1 (atomar -> NUMBER .)
    BEGIN           reduce using rule 1 (atomar -> NUMBER .)
    LAMBDA          reduce using rule 1 (atomar -> NUMBER .)
    NUMBER          reduce using rule 1 (atomar -> NUMBER .)
    FLOAT           reduce using rule 1 (atomar -> NUMBER .)
    STRING          reduce using rule 1 (atomar -> NUMBER .)
    END             reduce using rule 1 (atomar -> NUMBER .)
    SEMICOLON       reduce using rule 1 (atomar -> NUMBER .)
    DOT             reduce using rule 1 (atomar -> NUMBER .)
    ELIF            reduce using rule 1 (atomar -> NUMBER .)
    ELSE            reduce using rule 1 (atomar -> NUMBER .)
    RPAREN          reduce using rule 1 (atomar -> NUMBER .)
    COMMA           reduce using rule 1 (atomar -> NUMBER .)
    CLOSED_BRACKETS reduce using rule 1 (atomar -> NUMBER .)
    THEN            reduce using rule 1 (atomar -> NUMBER .)
    COLON           reduce using rule 1 (atomar -> NUMBER .)
    IN              reduce using rule 1 (atomar -> NUMBER .)


state 30

    (2) atomar -> FLOAT .

    LPAREN          reduce using rule 2 (atomar -> FLOAT .)
    PLUS            reduce using rule 2 (atomar -> FLOAT .)
    MINUS           reduce using rule 2 (atomar -> FLOAT .)
    TIMES           reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE          reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE_CEIL     reduce using rule 2 (atomar -> FLOAT .)
    DIVIDE_FLOOR    reduce using rule 2 (atomar -> FLOAT .)
    MOD             reduce using rule 2 (atomar -> FLOAT .)
    EXP             reduce using rule 2 (atomar -> FLOAT .)
    AND             reduce using rule 2 (atomar -> FLOAT .)
    OR              reduce using rule 2 (atomar -> FLOAT .)
    XOR             reduce using rule 2 (atomar -> FLOAT .)
    POWER           reduce using rule 2 (atomar -> FLOAT .)
    IMAG            reduce using rule 2 (atomar -> FLOAT .)
    GREATER_THAN    reduce using rule 2 (atomar -> FLOAT .)
    SMALLER_THAN    reduce using rule 2 (atomar -> FLOAT .)
    UNEQUALS        reduce using rule 2 (atomar -> FLOAT .)
    EQUALS          reduce using rule 2 (atomar -> FLOAT .)
    SMALLER_EQUALS  reduce using rule 2 (atomar -> FLOAT .)
    GREATER_EQUALS  reduce using rule 2 (atomar -> FLOAT .)
    IDENTIFIER      reduce using rule 2 (atomar -> FLOAT .)
    LET             reduce using rule 2 (atomar -> FLOAT .)
    ECHO            reduce using rule 2 (atomar -> FLOAT .)
    LENGTH          reduce using rule 2 (atomar -> FLOAT .)
    LIST            reduce using rule 2 (atomar -> FLOAT .)
    OPEN_BRACKETS   reduce using rule 2 (atomar -> FLOAT .)
    NOT             reduce using rule 2 (atomar -> FLOAT .)
    BEGIN           reduce using rule 2 (atomar -> FLOAT .)
    LAMBDA          reduce using rule 2 (atomar -> FLOAT .)
    NUMBER          reduce using rule 2 (atomar -> FLOAT .)
    FLOAT           reduce using rule 2 (atomar -> FLOAT .)
    STRING          reduce using rule 2 (atomar -> FLOAT .)
    END             reduce using rule 2 (atomar -> FLOAT .)
    SEMICOLON       reduce using rule 2 (atomar -> FLOAT .)
    DOT             reduce using rule 2 (atomar -> FLOAT .)
    ELIF            reduce using rule 2 (atomar -> FLOAT .)
    ELSE            reduce using rule 2 (atomar -> FLOAT .)
    RPAREN          reduce using rule 2 (atomar -> FLOAT .)
    COMMA           reduce using rule 2 (atomar -> FLOAT .)
    CLOSED_BRACKETS reduce using rule 2 (atomar -> FLOAT .)
    THEN            reduce using rule 2 (atomar -> FLOAT .)
    COLON           reduce using rule 2 (atomar -> FLOAT .)
    IN              reduce using rule 2 (atomar -> FLOAT .)


state 31

    (3) atomar -> STRING .

    LPAREN          reduce using rule 3 (atomar -> STRING .)
    PLUS            reduce using rule 3 (atomar -> STRING .)
    MINUS           reduce using rule 3 (atomar -> STRING .)
    TIMES           reduce using rule 3 (atomar -> STRING .)
    DIVIDE          reduce using rule 3 (atomar -> STRING .)
    DIVIDE_CEIL     reduce using rule 3 (atomar -> STRING .)
    DIVIDE_FLOOR    reduce using rule 3 (atomar -> STRING .)
    MOD             reduce using rule 3 (atomar -> STRING .)
    EXP             reduce using rule 3 (atomar -> STRING .)
    AND             reduce using rule 3 (atomar -> STRING .)
    OR              reduce using rule 3 (atomar -> STRING .)
    XOR             reduce using rule 3 (atomar -> STRING .)
    POWER           reduce using rule 3 (atomar -> STRING .)
    IMAG            reduce using rule 3 (atomar -> STRING .)
    GREATER_THAN    reduce using rule 3 (atomar -> STRING .)
    SMALLER_THAN    reduce using rule 3 (atomar -> STRING .)
    UNEQUALS        reduce using rule 3 (atomar -> STRING .)
    EQUALS          reduce using rule 3 (atomar -> STRING .)
    SMALLER_EQUALS  reduce using rule 3 (atomar -> STRING .)
    GREATER_EQUALS  reduce using rule 3 (atomar -> STRING .)
    IDENTIFIER      reduce using rule 3 (atomar -> STRING .)
    LET             reduce using rule 3 (atomar -> STRING .)
    ECHO            reduce using rule 3 (atomar -> STRING .)
    LENGTH          reduce using rule 3 (atomar -> STRING .)
    LIST            reduce using rule 3 (atomar -> STRING .)
    OPEN_BRACKETS   reduce using rule 3 (atomar -> STRING .)
    NOT             reduce using rule 3 (atomar -> STRING .)
    BEGIN           reduce using rule 3 (atomar -> STRING .)
    LAMBDA          reduce using rule 3 (atomar -> STRING .)
    NUMBER          reduce using rule 3 (atomar -> STRING .)
    FLOAT           reduce using rule 3 (atomar -> STRING .)
    STRING          reduce using rule 3 (atomar -> STRING .)
    END             reduce using rule 3 (atomar -> STRING .)
    SEMICOLON       reduce using rule 3 (atomar -> STRING .)
    DOT             reduce using rule 3 (atomar -> STRING .)
    ELIF            reduce using rule 3 (atomar -> STRING .)
    ELSE            reduce using rule 3 (atomar -> STRING .)
    RPAREN          reduce using rule 3 (atomar -> STRING .)
    COMMA           reduce using rule 3 (atomar -> STRING .)
    CLOSED_BRACKETS reduce using rule 3 (atomar -> STRING .)
    THEN            reduce using rule 3 (atomar -> STRING .)
    COLON           reduce using rule 3 (atomar -> STRING .)
    IN              reduce using rule 3 (atomar -> STRING .)


state 32

    (54) sequence -> BEGIN statements END .

    $end            reduce using rule 54 (sequence -> BEGIN statements END .)
    IDENTIFIER      reduce using rule 54 (sequence -> BEGIN statements END .)
    LET             reduce using rule 54 (sequence -> BEGIN statements END .)
    ECHO            reduce using rule 54 (sequence -> BEGIN statements END .)
    LENGTH          reduce using rule 54 (sequence -> BEGIN statements END .)
    LIST            reduce using rule 54 (sequence -> BEGIN statements END .)
    OPEN_BRACKETS   reduce using rule 54 (sequence -> BEGIN statements END .)
    NOT             reduce using rule 54 (sequence -> BEGIN statements END .)
    MINUS           reduce using rule 54 (sequence -> BEGIN statements END .)
    PLUS            reduce using rule 54 (sequence -> BEGIN statements END .)
    BEGIN           reduce using rule 54 (sequence -> BEGIN statements END .)
    LAMBDA          reduce using rule 54 (sequence -> BEGIN statements END .)
    NUMBER          reduce using rule 54 (sequence -> BEGIN statements END .)
    FLOAT           reduce using rule 54 (sequence -> BEGIN statements END .)
    STRING          reduce using rule 54 (sequence -> BEGIN statements END .)
    LPAREN          reduce using rule 54 (sequence -> BEGIN statements END .)
    END             reduce using rule 54 (sequence -> BEGIN statements END .)
    SEMICOLON       reduce using rule 54 (sequence -> BEGIN statements END .)
    DOT             reduce using rule 54 (sequence -> BEGIN statements END .)
    ELIF            reduce using rule 54 (sequence -> BEGIN statements END .)
    ELSE            reduce using rule 54 (sequence -> BEGIN statements END .)
    RPAREN          reduce using rule 54 (sequence -> BEGIN statements END .)
    COMMA           reduce using rule 54 (sequence -> BEGIN statements END .)
    CLOSED_BRACKETS reduce using rule 54 (sequence -> BEGIN statements END .)
    THEN            reduce using rule 54 (sequence -> BEGIN statements END .)
    COLON           reduce using rule 54 (sequence -> BEGIN statements END .)
    IN              reduce using rule 54 (sequence -> BEGIN statements END .)


state 33

    (55) sequence -> BEGIN statements SEMICOLON . END
    (61) statements -> statements SEMICOLON . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (63) if_statement -> . IF expression THEN statements DOT
    (64) if_statement -> . IF expression THEN statements else_elif_body DOT
    (67) while_statement -> . WHILE expression THEN statements DOT
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    END             shift and go to state 96
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    LOOP            shift and go to state 24
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    statement                      shift and go to state 97
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 34

    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 103 (list_parameter -> expression .)
    SEMICOLON       reduce using rule 103 (list_parameter -> expression .)
    DOT             reduce using rule 103 (list_parameter -> expression .)
    ELIF            reduce using rule 103 (list_parameter -> expression .)
    ELSE            reduce using rule 103 (list_parameter -> expression .)
    RPAREN          reduce using rule 103 (list_parameter -> expression .)
    COMMA           reduce using rule 103 (list_parameter -> expression .)
    CLOSED_BRACKETS reduce using rule 103 (list_parameter -> expression .)
    THEN            reduce using rule 103 (list_parameter -> expression .)
    COLON           reduce using rule 103 (list_parameter -> expression .)
    IN              reduce using rule 103 (list_parameter -> expression .)
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 35

    (102) list_parameter -> expression list_parameter .
    (104) expression -> list_parameter .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for LET resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for ECHO resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for LENGTH resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for LIST resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for NOT resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for MINUS resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for PLUS resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for BEGIN resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for NUMBER resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for FLOAT resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for STRING resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for LPAREN resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for END resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for DOT resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for ELIF resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for ELSE resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for RPAREN resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for COMMA resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for THEN resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for COLON resolved using rule 102 (list_parameter -> expression list_parameter .)
  ! reduce/reduce conflict for IN resolved using rule 102 (list_parameter -> expression list_parameter .)
    IDENTIFIER      reduce using rule 102 (list_parameter -> expression list_parameter .)
    LET             reduce using rule 102 (list_parameter -> expression list_parameter .)
    ECHO            reduce using rule 102 (list_parameter -> expression list_parameter .)
    LENGTH          reduce using rule 102 (list_parameter -> expression list_parameter .)
    LIST            reduce using rule 102 (list_parameter -> expression list_parameter .)
    OPEN_BRACKETS   reduce using rule 102 (list_parameter -> expression list_parameter .)
    NOT             reduce using rule 102 (list_parameter -> expression list_parameter .)
    MINUS           reduce using rule 102 (list_parameter -> expression list_parameter .)
    PLUS            reduce using rule 102 (list_parameter -> expression list_parameter .)
    BEGIN           reduce using rule 102 (list_parameter -> expression list_parameter .)
    LAMBDA          reduce using rule 102 (list_parameter -> expression list_parameter .)
    NUMBER          reduce using rule 102 (list_parameter -> expression list_parameter .)
    FLOAT           reduce using rule 102 (list_parameter -> expression list_parameter .)
    STRING          reduce using rule 102 (list_parameter -> expression list_parameter .)
    LPAREN          reduce using rule 102 (list_parameter -> expression list_parameter .)
    END             reduce using rule 102 (list_parameter -> expression list_parameter .)
    SEMICOLON       reduce using rule 102 (list_parameter -> expression list_parameter .)
    DOT             reduce using rule 102 (list_parameter -> expression list_parameter .)
    ELIF            reduce using rule 102 (list_parameter -> expression list_parameter .)
    ELSE            reduce using rule 102 (list_parameter -> expression list_parameter .)
    RPAREN          reduce using rule 102 (list_parameter -> expression list_parameter .)
    COMMA           reduce using rule 102 (list_parameter -> expression list_parameter .)
    CLOSED_BRACKETS reduce using rule 102 (list_parameter -> expression list_parameter .)
    THEN            reduce using rule 102 (list_parameter -> expression list_parameter .)
    COLON           reduce using rule 102 (list_parameter -> expression list_parameter .)
    IN              reduce using rule 102 (list_parameter -> expression list_parameter .)

  ! IDENTIFIER      [ reduce using rule 104 (expression -> list_parameter .) ]
  ! LET             [ reduce using rule 104 (expression -> list_parameter .) ]
  ! ECHO            [ reduce using rule 104 (expression -> list_parameter .) ]
  ! LENGTH          [ reduce using rule 104 (expression -> list_parameter .) ]
  ! LIST            [ reduce using rule 104 (expression -> list_parameter .) ]
  ! OPEN_BRACKETS   [ reduce using rule 104 (expression -> list_parameter .) ]
  ! NOT             [ reduce using rule 104 (expression -> list_parameter .) ]
  ! MINUS           [ reduce using rule 104 (expression -> list_parameter .) ]
  ! PLUS            [ reduce using rule 104 (expression -> list_parameter .) ]
  ! BEGIN           [ reduce using rule 104 (expression -> list_parameter .) ]
  ! LAMBDA          [ reduce using rule 104 (expression -> list_parameter .) ]
  ! NUMBER          [ reduce using rule 104 (expression -> list_parameter .) ]
  ! FLOAT           [ reduce using rule 104 (expression -> list_parameter .) ]
  ! STRING          [ reduce using rule 104 (expression -> list_parameter .) ]
  ! LPAREN          [ reduce using rule 104 (expression -> list_parameter .) ]
  ! END             [ reduce using rule 104 (expression -> list_parameter .) ]
  ! SEMICOLON       [ reduce using rule 104 (expression -> list_parameter .) ]
  ! DOT             [ reduce using rule 104 (expression -> list_parameter .) ]
  ! ELIF            [ reduce using rule 104 (expression -> list_parameter .) ]
  ! ELSE            [ reduce using rule 104 (expression -> list_parameter .) ]
  ! RPAREN          [ reduce using rule 104 (expression -> list_parameter .) ]
  ! COMMA           [ reduce using rule 104 (expression -> list_parameter .) ]
  ! CLOSED_BRACKETS [ reduce using rule 104 (expression -> list_parameter .) ]
  ! THEN            [ reduce using rule 104 (expression -> list_parameter .) ]
  ! COLON           [ reduce using rule 104 (expression -> list_parameter .) ]
  ! IN              [ reduce using rule 104 (expression -> list_parameter .) ]


state 36

    (7) arithmetic_expression -> arithmetic_expression PLUS . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 98
    atomar                         shift and go to state 88

state 37

    (8) arithmetic_expression -> arithmetic_expression MINUS . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 99
    atomar                         shift and go to state 88

state 38

    (9) arithmetic_expression -> arithmetic_expression TIMES . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 100
    atomar                         shift and go to state 88

state 39

    (10) arithmetic_expression -> arithmetic_expression DIVIDE . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 101
    atomar                         shift and go to state 88

state 40

    (11) arithmetic_expression -> arithmetic_expression DIVIDE_CEIL . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 102
    atomar                         shift and go to state 88

state 41

    (12) arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 103
    atomar                         shift and go to state 88

state 42

    (13) arithmetic_expression -> arithmetic_expression MOD . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 104
    atomar                         shift and go to state 88

state 43

    (14) arithmetic_expression -> arithmetic_expression EXP . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 105
    atomar                         shift and go to state 88

state 44

    (15) arithmetic_expression -> arithmetic_expression AND . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 106
    atomar                         shift and go to state 88

state 45

    (16) arithmetic_expression -> arithmetic_expression OR . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 107
    atomar                         shift and go to state 88

state 46

    (17) arithmetic_expression -> arithmetic_expression XOR . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 108
    atomar                         shift and go to state 88

state 47

    (18) arithmetic_expression -> arithmetic_expression POWER . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 109
    atomar                         shift and go to state 88

state 48

    (22) arithmetic_expression -> arithmetic_expression IMAG .

    PLUS            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    MINUS           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    TIMES           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    DIVIDE          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    DIVIDE_CEIL     reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    DIVIDE_FLOOR    reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    MOD             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    EXP             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    AND             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    OR              reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    XOR             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    POWER           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    IMAG            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    GREATER_THAN    reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    SMALLER_THAN    reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    UNEQUALS        reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    EQUALS          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    SMALLER_EQUALS  reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    GREATER_EQUALS  reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    IDENTIFIER      reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    LET             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    ECHO            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    LENGTH          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    LIST            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    OPEN_BRACKETS   reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    NOT             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    BEGIN           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    LAMBDA          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    NUMBER          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    FLOAT           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    STRING          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    LPAREN          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    END             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    SEMICOLON       reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    DOT             reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    ELIF            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    ELSE            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    RPAREN          reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    COMMA           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    CLOSED_BRACKETS reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    THEN            reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    COLON           reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)
    IN              reduce using rule 22 (arithmetic_expression -> arithmetic_expression IMAG .)


state 49

    (24) comparison -> arithmetic_expression comparison_op . arithmetic_expression comparison_chain
    (25) comparison -> arithmetic_expression comparison_op . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 110
    atomar                         shift and go to state 88

state 50

    (28) comparison_op -> GREATER_THAN .

    NOT             reduce using rule 28 (comparison_op -> GREATER_THAN .)
    MINUS           reduce using rule 28 (comparison_op -> GREATER_THAN .)
    PLUS            reduce using rule 28 (comparison_op -> GREATER_THAN .)
    NUMBER          reduce using rule 28 (comparison_op -> GREATER_THAN .)
    FLOAT           reduce using rule 28 (comparison_op -> GREATER_THAN .)
    STRING          reduce using rule 28 (comparison_op -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 28 (comparison_op -> GREATER_THAN .)
    LPAREN          reduce using rule 28 (comparison_op -> GREATER_THAN .)


state 51

    (29) comparison_op -> SMALLER_THAN .

    NOT             reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    MINUS           reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    PLUS            reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    NUMBER          reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    FLOAT           reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    STRING          reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    IDENTIFIER      reduce using rule 29 (comparison_op -> SMALLER_THAN .)
    LPAREN          reduce using rule 29 (comparison_op -> SMALLER_THAN .)


state 52

    (30) comparison_op -> UNEQUALS .

    NOT             reduce using rule 30 (comparison_op -> UNEQUALS .)
    MINUS           reduce using rule 30 (comparison_op -> UNEQUALS .)
    PLUS            reduce using rule 30 (comparison_op -> UNEQUALS .)
    NUMBER          reduce using rule 30 (comparison_op -> UNEQUALS .)
    FLOAT           reduce using rule 30 (comparison_op -> UNEQUALS .)
    STRING          reduce using rule 30 (comparison_op -> UNEQUALS .)
    IDENTIFIER      reduce using rule 30 (comparison_op -> UNEQUALS .)
    LPAREN          reduce using rule 30 (comparison_op -> UNEQUALS .)


state 53

    (31) comparison_op -> EQUALS .

    NOT             reduce using rule 31 (comparison_op -> EQUALS .)
    MINUS           reduce using rule 31 (comparison_op -> EQUALS .)
    PLUS            reduce using rule 31 (comparison_op -> EQUALS .)
    NUMBER          reduce using rule 31 (comparison_op -> EQUALS .)
    FLOAT           reduce using rule 31 (comparison_op -> EQUALS .)
    STRING          reduce using rule 31 (comparison_op -> EQUALS .)
    IDENTIFIER      reduce using rule 31 (comparison_op -> EQUALS .)
    LPAREN          reduce using rule 31 (comparison_op -> EQUALS .)


state 54

    (32) comparison_op -> SMALLER_EQUALS .

    NOT             reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    MINUS           reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    PLUS            reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    NUMBER          reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    FLOAT           reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    STRING          reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    IDENTIFIER      reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)
    LPAREN          reduce using rule 32 (comparison_op -> SMALLER_EQUALS .)


state 55

    (33) comparison_op -> GREATER_EQUALS .

    NOT             reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    MINUS           reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    PLUS            reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    NUMBER          reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    FLOAT           reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    STRING          reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    IDENTIFIER      reduce using rule 33 (comparison_op -> GREATER_EQUALS .)
    LPAREN          reduce using rule 33 (comparison_op -> GREATER_EQUALS .)


state 56

    (35) expression -> IDENTIFIER ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 111
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 57

    (36) expression -> IDENTIFIER PLUS_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 112
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 58

    (37) expression -> IDENTIFIER MINUS_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 113
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 59

    (38) expression -> IDENTIFIER TIMES_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 114
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 60

    (39) expression -> IDENTIFIER POWER_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 115
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 61

    (40) expression -> IDENTIFIER DIVIDE_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 116
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 62

    (41) expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 117
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 63

    (42) expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 118
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 64

    (43) expression -> IDENTIFIER GREATER_THAN_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 119
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 65

    (44) expression -> IDENTIFIER SMALLER_THAN_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 120
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 66

    (45) expression -> IDENTIFIER GREATER_EQUALS_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 121
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 67

    (46) expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 122
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 68

    (47) expression -> IDENTIFIER EQUALS_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 123
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 69

    (48) expression -> IDENTIFIER UNEQUALS_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 124
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 70

    (49) expression -> IDENTIFIER AND_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 125
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 71

    (50) expression -> IDENTIFIER OR_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 126
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 72

    (51) expression -> IDENTIFIER XOR_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 127
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 73

    (52) expression -> IDENTIFIER EXP_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 128
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 74

    (53) expression -> IDENTIFIER MOD_ASSIGN . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 129
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 75

    (95) expression -> atomar LPAREN . parameter_expr RPAREN
    (87) parameter_expr -> . parameter_pos_expr
    (88) parameter_expr -> . empty
    (89) parameter_pos_expr -> . expression COMMA parameter_pos_expr
    (90) parameter_pos_expr -> . expression
    (91) parameter_pos_expr -> . parameter_keywords_expr
    (94) empty -> .
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (92) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> . expression COLON expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    RPAREN          reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    atomar                         shift and go to state 14
    parameter_expr                 shift and go to state 130
    parameter_pos_expr             shift and go to state 131
    empty                          shift and go to state 132
    expression                     shift and go to state 133
    parameter_keywords_expr        shift and go to state 134
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    list_parameter                 shift and go to state 20

state 76

    (5) atomar -> LPAREN expression . RPAREN
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    RPAREN          shift and go to state 135
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 77

    (96) expression -> LET IDENTIFIER . EQUALS expression IN expression DOT

    EQUALS          shift and go to state 136


state 78

    (97) expression -> ECHO LPAREN . param_list RPAREN
    (100) param_list -> . expression COMMA param_list
    (101) param_list -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    param_list                     shift and go to state 137
    expression                     shift and go to state 83
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 79

    (98) expression -> LENGTH LPAREN . param_list RPAREN
    (100) param_list -> . expression COMMA param_list
    (101) param_list -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    param_list                     shift and go to state 138
    expression                     shift and go to state 83
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 80

    (99) expression -> LIST LPAREN . param_list RPAREN
    (100) param_list -> . expression COMMA param_list
    (101) param_list -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    param_list                     shift and go to state 139
    expression                     shift and go to state 83
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 81

    (105) expression -> OPEN_BRACKETS param_list . CLOSED_BRACKETS

    CLOSED_BRACKETS shift and go to state 140


state 82

    (106) expression -> OPEN_BRACKETS empty . CLOSED_BRACKETS

    CLOSED_BRACKETS shift and go to state 141


state 83

    (100) param_list -> expression . COMMA param_list
    (101) param_list -> expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 101 (param_list -> expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 101 (param_list -> expression .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    COMMA           shift and go to state 142
    CLOSED_BRACKETS reduce using rule 101 (param_list -> expression .)
    RPAREN          reduce using rule 101 (param_list -> expression .)
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 84

    (63) if_statement -> IF expression . THEN statements DOT
    (64) if_statement -> IF expression . THEN statements else_elif_body DOT
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for THEN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    THEN            shift and go to state 143
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 85

    (67) while_statement -> WHILE expression . THEN statements DOT
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for THEN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    THEN            shift and go to state 144
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 86

    (68) loop_statement -> LOOP IDENTIFIER . IN interval LOOPTHEN statements DOT

    IN              shift and go to state 145


state 87

    (21) arithmetic_expression -> PLUS arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    MINUS           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    TIMES           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    MOD             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    EXP             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    AND             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    OR              reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    XOR             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    POWER           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    IMAG            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    UNEQUALS        reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    EQUALS          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    IDENTIFIER      reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    LET             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    ECHO            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    LENGTH          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    LIST            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    NOT             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    BEGIN           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    LAMBDA          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    NUMBER          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    FLOAT           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    STRING          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    LPAREN          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    END             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    SEMICOLON       reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    DOT             reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    ELIF            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    ELSE            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    RPAREN          reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    COMMA           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    THEN            reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    COLON           reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)
    IN              reduce using rule 21 (arithmetic_expression -> PLUS arithmetic_expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! DIVIDE_CEIL     [ shift and go to state 40 ]
  ! DIVIDE_FLOOR    [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! EXP             [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]
  ! POWER           [ shift and go to state 47 ]
  ! IMAG            [ shift and go to state 48 ]


state 88

    (23) arithmetic_expression -> atomar .

    PLUS            reduce using rule 23 (arithmetic_expression -> atomar .)
    MINUS           reduce using rule 23 (arithmetic_expression -> atomar .)
    TIMES           reduce using rule 23 (arithmetic_expression -> atomar .)
    DIVIDE          reduce using rule 23 (arithmetic_expression -> atomar .)
    DIVIDE_CEIL     reduce using rule 23 (arithmetic_expression -> atomar .)
    DIVIDE_FLOOR    reduce using rule 23 (arithmetic_expression -> atomar .)
    MOD             reduce using rule 23 (arithmetic_expression -> atomar .)
    EXP             reduce using rule 23 (arithmetic_expression -> atomar .)
    AND             reduce using rule 23 (arithmetic_expression -> atomar .)
    OR              reduce using rule 23 (arithmetic_expression -> atomar .)
    XOR             reduce using rule 23 (arithmetic_expression -> atomar .)
    POWER           reduce using rule 23 (arithmetic_expression -> atomar .)
    IMAG            reduce using rule 23 (arithmetic_expression -> atomar .)
    GREATER_THAN    reduce using rule 23 (arithmetic_expression -> atomar .)
    SMALLER_THAN    reduce using rule 23 (arithmetic_expression -> atomar .)
    UNEQUALS        reduce using rule 23 (arithmetic_expression -> atomar .)
    EQUALS          reduce using rule 23 (arithmetic_expression -> atomar .)
    SMALLER_EQUALS  reduce using rule 23 (arithmetic_expression -> atomar .)
    GREATER_EQUALS  reduce using rule 23 (arithmetic_expression -> atomar .)
    IDENTIFIER      reduce using rule 23 (arithmetic_expression -> atomar .)
    LET             reduce using rule 23 (arithmetic_expression -> atomar .)
    ECHO            reduce using rule 23 (arithmetic_expression -> atomar .)
    LENGTH          reduce using rule 23 (arithmetic_expression -> atomar .)
    LIST            reduce using rule 23 (arithmetic_expression -> atomar .)
    OPEN_BRACKETS   reduce using rule 23 (arithmetic_expression -> atomar .)
    NOT             reduce using rule 23 (arithmetic_expression -> atomar .)
    BEGIN           reduce using rule 23 (arithmetic_expression -> atomar .)
    LAMBDA          reduce using rule 23 (arithmetic_expression -> atomar .)
    NUMBER          reduce using rule 23 (arithmetic_expression -> atomar .)
    FLOAT           reduce using rule 23 (arithmetic_expression -> atomar .)
    STRING          reduce using rule 23 (arithmetic_expression -> atomar .)
    LPAREN          reduce using rule 23 (arithmetic_expression -> atomar .)
    END             reduce using rule 23 (arithmetic_expression -> atomar .)
    SEMICOLON       reduce using rule 23 (arithmetic_expression -> atomar .)
    DOT             reduce using rule 23 (arithmetic_expression -> atomar .)
    ELIF            reduce using rule 23 (arithmetic_expression -> atomar .)
    ELSE            reduce using rule 23 (arithmetic_expression -> atomar .)
    RPAREN          reduce using rule 23 (arithmetic_expression -> atomar .)
    COMMA           reduce using rule 23 (arithmetic_expression -> atomar .)
    CLOSED_BRACKETS reduce using rule 23 (arithmetic_expression -> atomar .)
    THEN            reduce using rule 23 (arithmetic_expression -> atomar .)
    COLON           reduce using rule 23 (arithmetic_expression -> atomar .)
    IN              reduce using rule 23 (arithmetic_expression -> atomar .)


state 89

    (4) atomar -> IDENTIFIER .

    PLUS            reduce using rule 4 (atomar -> IDENTIFIER .)
    MINUS           reduce using rule 4 (atomar -> IDENTIFIER .)
    TIMES           reduce using rule 4 (atomar -> IDENTIFIER .)
    DIVIDE          reduce using rule 4 (atomar -> IDENTIFIER .)
    DIVIDE_CEIL     reduce using rule 4 (atomar -> IDENTIFIER .)
    DIVIDE_FLOOR    reduce using rule 4 (atomar -> IDENTIFIER .)
    MOD             reduce using rule 4 (atomar -> IDENTIFIER .)
    EXP             reduce using rule 4 (atomar -> IDENTIFIER .)
    AND             reduce using rule 4 (atomar -> IDENTIFIER .)
    OR              reduce using rule 4 (atomar -> IDENTIFIER .)
    XOR             reduce using rule 4 (atomar -> IDENTIFIER .)
    POWER           reduce using rule 4 (atomar -> IDENTIFIER .)
    IMAG            reduce using rule 4 (atomar -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 4 (atomar -> IDENTIFIER .)
    SMALLER_THAN    reduce using rule 4 (atomar -> IDENTIFIER .)
    UNEQUALS        reduce using rule 4 (atomar -> IDENTIFIER .)
    EQUALS          reduce using rule 4 (atomar -> IDENTIFIER .)
    SMALLER_EQUALS  reduce using rule 4 (atomar -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 4 (atomar -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 4 (atomar -> IDENTIFIER .)
    LET             reduce using rule 4 (atomar -> IDENTIFIER .)
    ECHO            reduce using rule 4 (atomar -> IDENTIFIER .)
    LENGTH          reduce using rule 4 (atomar -> IDENTIFIER .)
    LIST            reduce using rule 4 (atomar -> IDENTIFIER .)
    OPEN_BRACKETS   reduce using rule 4 (atomar -> IDENTIFIER .)
    NOT             reduce using rule 4 (atomar -> IDENTIFIER .)
    BEGIN           reduce using rule 4 (atomar -> IDENTIFIER .)
    LAMBDA          reduce using rule 4 (atomar -> IDENTIFIER .)
    NUMBER          reduce using rule 4 (atomar -> IDENTIFIER .)
    FLOAT           reduce using rule 4 (atomar -> IDENTIFIER .)
    STRING          reduce using rule 4 (atomar -> IDENTIFIER .)
    LPAREN          reduce using rule 4 (atomar -> IDENTIFIER .)
    END             reduce using rule 4 (atomar -> IDENTIFIER .)
    SEMICOLON       reduce using rule 4 (atomar -> IDENTIFIER .)
    DOT             reduce using rule 4 (atomar -> IDENTIFIER .)
    ELIF            reduce using rule 4 (atomar -> IDENTIFIER .)
    ELSE            reduce using rule 4 (atomar -> IDENTIFIER .)
    RPAREN          reduce using rule 4 (atomar -> IDENTIFIER .)
    COMMA           reduce using rule 4 (atomar -> IDENTIFIER .)
    CLOSED_BRACKETS reduce using rule 4 (atomar -> IDENTIFIER .)
    THEN            reduce using rule 4 (atomar -> IDENTIFIER .)
    COLON           reduce using rule 4 (atomar -> IDENTIFIER .)
    IN              reduce using rule 4 (atomar -> IDENTIFIER .)


state 90

    (20) arithmetic_expression -> MINUS arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    MINUS           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    TIMES           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    MOD             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    EXP             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    AND             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    OR              reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    XOR             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    POWER           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    IMAG            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    UNEQUALS        reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    EQUALS          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    IDENTIFIER      reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    LET             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    ECHO            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    LENGTH          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    LIST            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    NOT             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    BEGIN           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    LAMBDA          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    NUMBER          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    FLOAT           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    STRING          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    LPAREN          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    END             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    SEMICOLON       reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    DOT             reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    ELIF            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    ELSE            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    RPAREN          reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    COMMA           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    THEN            reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    COLON           reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)
    IN              reduce using rule 20 (arithmetic_expression -> MINUS arithmetic_expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! DIVIDE_CEIL     [ shift and go to state 40 ]
  ! DIVIDE_FLOOR    [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! EXP             [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]
  ! POWER           [ shift and go to state 47 ]
  ! IMAG            [ shift and go to state 48 ]


state 91

    (19) arithmetic_expression -> NOT arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    MINUS           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    TIMES           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    MOD             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    EXP             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    AND             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    OR              reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    XOR             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    POWER           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    IMAG            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    GREATER_THAN    reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    SMALLER_THAN    reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    UNEQUALS        reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    EQUALS          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    IDENTIFIER      reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    LET             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    ECHO            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    LENGTH          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    LIST            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    NOT             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    BEGIN           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    LAMBDA          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    NUMBER          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    FLOAT           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    STRING          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    LPAREN          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    END             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    SEMICOLON       reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    DOT             reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    ELIF            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    ELSE            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    RPAREN          reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    COMMA           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    THEN            reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    COLON           reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)
    IN              reduce using rule 19 (arithmetic_expression -> NOT arithmetic_expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! DIVIDE_CEIL     [ shift and go to state 40 ]
  ! DIVIDE_FLOOR    [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! EXP             [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]
  ! POWER           [ shift and go to state 47 ]
  ! IMAG            [ shift and go to state 48 ]


state 92

    (73) lambda -> LAMBDA parameter . LAMBDA_ARROW expression

    LAMBDA_ARROW    shift and go to state 146


state 93

    (75) parameter -> LPAREN . parameter_pos RPAREN
    (78) parameter_pos -> . parameter_pos_list
    (79) parameter_pos_list -> . IDENTIFIER COMMA parameter_pos_list
    (80) parameter_pos_list -> . IDENTIFIER
    (81) parameter_pos_list -> . parameter_keywords
    (82) parameter_keywords -> . parameter_kw_list
    (83) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (84) parameter_kw_list -> . IDENTIFIER COLON expression
    (85) parameter_kw_list -> . parameter_infty
    (86) parameter_infty -> . IDENTIFIER DOTS

    IDENTIFIER      shift and go to state 149

    parameter_pos                  shift and go to state 147
    parameter_pos_list             shift and go to state 148
    parameter_keywords             shift and go to state 150
    parameter_kw_list              shift and go to state 151
    parameter_infty                shift and go to state 152

state 94

    (76) parameter -> IDENTIFIER .

    LAMBDA_ARROW    reduce using rule 76 (parameter -> IDENTIFIER .)


state 95

    (77) parameter -> empty .

    LAMBDA_ARROW    reduce using rule 77 (parameter -> empty .)


state 96

    (55) sequence -> BEGIN statements SEMICOLON END .

    $end            reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    IDENTIFIER      reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    LET             reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    ECHO            reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    LENGTH          reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    LIST            reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    OPEN_BRACKETS   reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    NOT             reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    MINUS           reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    PLUS            reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    BEGIN           reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    LAMBDA          reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    NUMBER          reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    FLOAT           reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    STRING          reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    LPAREN          reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    END             reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    SEMICOLON       reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    DOT             reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    ELIF            reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    ELSE            reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    RPAREN          reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    COMMA           reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    CLOSED_BRACKETS reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    THEN            reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    COLON           reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)
    IN              reduce using rule 55 (sequence -> BEGIN statements SEMICOLON END .)


state 97

    (61) statements -> statements SEMICOLON statement .

    END             reduce using rule 61 (statements -> statements SEMICOLON statement .)
    SEMICOLON       reduce using rule 61 (statements -> statements SEMICOLON statement .)
    DOT             reduce using rule 61 (statements -> statements SEMICOLON statement .)
    ELIF            reduce using rule 61 (statements -> statements SEMICOLON statement .)
    ELSE            reduce using rule 61 (statements -> statements SEMICOLON statement .)


state 98

    (7) arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    MINUS           reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    AND             reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    OR              reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    XOR             reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    UNEQUALS        reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    EQUALS          reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    IDENTIFIER      reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    LET             reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ECHO            reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    LENGTH          reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    LIST            reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    NOT             reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    BEGIN           reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    LAMBDA          reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    NUMBER          reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    FLOAT           reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    STRING          reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    LPAREN          reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    END             reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SEMICOLON       reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    DOT             reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ELIF            reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    ELSE            reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    RPAREN          reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    COMMA           reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    THEN            reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    COLON           reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    IN              reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    DIVIDE_CEIL     shift and go to state 40
    DIVIDE_FLOOR    shift and go to state 41
    MOD             shift and go to state 42
    EXP             shift and go to state 43
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! TIMES           [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! MOD             [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! EXP             [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! POWER           [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 7 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]


state 99

    (8) arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    MINUS           reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    AND             reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    OR              reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    XOR             reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SMALLER_THAN    reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    UNEQUALS        reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    EQUALS          reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    IDENTIFIER      reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    LET             reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ECHO            reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    LENGTH          reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    LIST            reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    NOT             reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    BEGIN           reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    LAMBDA          reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    NUMBER          reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    FLOAT           reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    STRING          reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    LPAREN          reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    END             reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SEMICOLON       reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    DOT             reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ELIF            reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    ELSE            reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    RPAREN          reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    COMMA           reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    THEN            reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    COLON           reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    IN              reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    DIVIDE_CEIL     shift and go to state 40
    DIVIDE_FLOOR    shift and go to state 41
    MOD             shift and go to state 42
    EXP             shift and go to state 43
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! TIMES           [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! MOD             [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! EXP             [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! POWER           [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 8 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]


state 100

    (9) arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    MINUS           reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    TIMES           reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    MOD             reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    AND             reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    OR              reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    XOR             reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    GREATER_THAN    reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SMALLER_THAN    reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    UNEQUALS        reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    EQUALS          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    IDENTIFIER      reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    LET             reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ECHO            reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    LENGTH          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    LIST            reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    NOT             reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    BEGIN           reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    LAMBDA          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    NUMBER          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    FLOAT           reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    STRING          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    LPAREN          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    END             reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SEMICOLON       reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    DOT             reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ELIF            reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    ELSE            reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    RPAREN          reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    COMMA           reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    THEN            reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    COLON           reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    IN              reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    EXP             shift and go to state 43
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! EXP             [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! POWER           [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 9 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! DIVIDE_CEIL     [ shift and go to state 40 ]
  ! DIVIDE_FLOOR    [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]


state 101

    (10) arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    MINUS           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    TIMES           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    MOD             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    AND             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    OR              reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    XOR             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    GREATER_THAN    reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SMALLER_THAN    reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    UNEQUALS        reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    EQUALS          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    IDENTIFIER      reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    LET             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ECHO            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    LENGTH          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    LIST            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    NOT             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    BEGIN           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    LAMBDA          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    NUMBER          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    FLOAT           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    STRING          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    LPAREN          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    END             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SEMICOLON       reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    DOT             reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ELIF            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    ELSE            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    RPAREN          reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    COMMA           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    THEN            reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    COLON           reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    IN              reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    EXP             shift and go to state 43
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! EXP             [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! POWER           [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 10 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! DIVIDE_CEIL     [ shift and go to state 40 ]
  ! DIVIDE_FLOOR    [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]


state 102

    (11) arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    MINUS           reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    TIMES           reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    MOD             reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    AND             reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    OR              reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    XOR             reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    GREATER_THAN    reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SMALLER_THAN    reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    UNEQUALS        reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    EQUALS          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    IDENTIFIER      reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    LET             reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ECHO            reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    LENGTH          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    LIST            reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    NOT             reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    BEGIN           reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    LAMBDA          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    NUMBER          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    FLOAT           reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    STRING          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    LPAREN          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    END             reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    SEMICOLON       reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    DOT             reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ELIF            reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    ELSE            reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    RPAREN          reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    COMMA           reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    THEN            reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    COLON           reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    IN              reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .)
    EXP             shift and go to state 43
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! EXP             [ reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .) ]
  ! POWER           [ reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 11 (arithmetic_expression -> arithmetic_expression DIVIDE_CEIL arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! DIVIDE_CEIL     [ shift and go to state 40 ]
  ! DIVIDE_FLOOR    [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]


state 103

    (12) arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    MINUS           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    TIMES           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    MOD             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    AND             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    OR              reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    XOR             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    GREATER_THAN    reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    UNEQUALS        reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    EQUALS          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    IDENTIFIER      reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    LET             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ECHO            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    LENGTH          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    LIST            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    NOT             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    BEGIN           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    LAMBDA          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    NUMBER          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    FLOAT           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    STRING          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    LPAREN          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    END             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    SEMICOLON       reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    DOT             reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ELIF            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    ELSE            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    RPAREN          reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    COMMA           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    THEN            reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    COLON           reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    IN              reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .)
    EXP             shift and go to state 43
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! EXP             [ reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 12 (arithmetic_expression -> arithmetic_expression DIVIDE_FLOOR arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! DIVIDE_CEIL     [ shift and go to state 40 ]
  ! DIVIDE_FLOOR    [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]


state 104

    (13) arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    MINUS           reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    TIMES           reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    MOD             reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    AND             reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    OR              reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    XOR             reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    GREATER_THAN    reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SMALLER_THAN    reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    UNEQUALS        reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    EQUALS          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    IDENTIFIER      reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    LET             reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ECHO            reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    LENGTH          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    LIST            reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    NOT             reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    BEGIN           reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    LAMBDA          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    NUMBER          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    FLOAT           reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    STRING          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    LPAREN          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    END             reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    SEMICOLON       reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    DOT             reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ELIF            reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    ELSE            reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    RPAREN          reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    COMMA           reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    THEN            reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    COLON           reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    IN              reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .)
    EXP             shift and go to state 43
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! EXP             [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .) ]
  ! POWER           [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 13 (arithmetic_expression -> arithmetic_expression MOD arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! DIVIDE_CEIL     [ shift and go to state 40 ]
  ! DIVIDE_FLOOR    [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]


state 105

    (14) arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    MINUS           reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    TIMES           reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    MOD             reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    AND             reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    OR              reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    XOR             reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    GREATER_THAN    reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SMALLER_THAN    reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    UNEQUALS        reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    EQUALS          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    IDENTIFIER      reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    LET             reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ECHO            reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    LENGTH          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    LIST            reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    NOT             reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    BEGIN           reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    LAMBDA          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    NUMBER          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    FLOAT           reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    STRING          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    LPAREN          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    END             reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    SEMICOLON       reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    DOT             reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ELIF            reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    ELSE            reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    RPAREN          reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    COMMA           reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    THEN            reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    COLON           reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    IN              reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .)
    EXP             shift and go to state 43
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! EXP             [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .) ]
  ! POWER           [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 14 (arithmetic_expression -> arithmetic_expression EXP arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! DIVIDE_CEIL     [ shift and go to state 40 ]
  ! DIVIDE_FLOOR    [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]


state 106

    (15) arithmetic_expression -> arithmetic_expression AND arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    AND             reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    OR              reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    XOR             reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    GREATER_THAN    reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SMALLER_THAN    reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    UNEQUALS        reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    EQUALS          reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    IDENTIFIER      reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    LET             reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ECHO            reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    LENGTH          reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    LIST            reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    NOT             reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    BEGIN           reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    LAMBDA          reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    NUMBER          reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    FLOAT           reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    STRING          reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    LPAREN          reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    END             reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    SEMICOLON       reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    DOT             reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ELIF            reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    ELSE            reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    RPAREN          reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    COMMA           reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    THEN            reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    COLON           reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    IN              reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    DIVIDE_CEIL     shift and go to state 40
    DIVIDE_FLOOR    shift and go to state 41
    MOD             shift and go to state 42
    EXP             shift and go to state 43
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! PLUS            [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! MOD             [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! EXP             [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! POWER           [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 15 (arithmetic_expression -> arithmetic_expression AND arithmetic_expression .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]


state 107

    (16) arithmetic_expression -> arithmetic_expression OR arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    OR              reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    GREATER_THAN    reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    UNEQUALS        reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    EQUALS          reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    IDENTIFIER      reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    LET             reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ECHO            reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    LENGTH          reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    LIST            reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    NOT             reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    BEGIN           reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    LAMBDA          reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    NUMBER          reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    FLOAT           reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    STRING          reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    LPAREN          reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    END             reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    SEMICOLON       reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    DOT             reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ELIF            reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    ELSE            reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    RPAREN          reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    COMMA           reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    THEN            reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    COLON           reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    IN              reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    DIVIDE_CEIL     shift and go to state 40
    DIVIDE_FLOOR    shift and go to state 41
    MOD             shift and go to state 42
    EXP             shift and go to state 43
    AND             shift and go to state 44
    XOR             shift and go to state 46
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! PLUS            [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! MOD             [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! EXP             [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! AND             [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! XOR             [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 16 (arithmetic_expression -> arithmetic_expression OR arithmetic_expression .) ]
  ! OR              [ shift and go to state 45 ]


state 108

    (17) arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    OR              reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    XOR             reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    GREATER_THAN    reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SMALLER_THAN    reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    UNEQUALS        reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    EQUALS          reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    IDENTIFIER      reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    LET             reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ECHO            reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    LENGTH          reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    LIST            reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    NOT             reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    BEGIN           reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    LAMBDA          reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    NUMBER          reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    FLOAT           reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    STRING          reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    LPAREN          reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    END             reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    SEMICOLON       reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    DOT             reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ELIF            reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    ELSE            reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    RPAREN          reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    COMMA           reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    THEN            reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    COLON           reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    IN              reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    DIVIDE_CEIL     shift and go to state 40
    DIVIDE_FLOOR    shift and go to state 41
    MOD             shift and go to state 42
    EXP             shift and go to state 43
    AND             shift and go to state 44
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! PLUS            [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE_CEIL     [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! DIVIDE_FLOOR    [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! MOD             [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! EXP             [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! AND             [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! POWER           [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 17 (arithmetic_expression -> arithmetic_expression XOR arithmetic_expression .) ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]


state 109

    (18) arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG

    PLUS            reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    MINUS           reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    TIMES           reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE_CEIL     reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DIVIDE_FLOOR    reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    MOD             reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    AND             reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    OR              reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    XOR             reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    GREATER_THAN    reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SMALLER_THAN    reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    UNEQUALS        reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    EQUALS          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SMALLER_EQUALS  reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    GREATER_EQUALS  reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    IDENTIFIER      reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    LET             reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ECHO            reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    LENGTH          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    LIST            reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    NOT             reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    BEGIN           reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    LAMBDA          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    NUMBER          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    FLOAT           reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    STRING          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    LPAREN          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    END             reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    SEMICOLON       reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    DOT             reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ELIF            reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    ELSE            reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    RPAREN          reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    COMMA           reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    THEN            reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    COLON           reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    IN              reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .)
    EXP             shift and go to state 43
    POWER           shift and go to state 47
    IMAG            shift and go to state 48

  ! EXP             [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .) ]
  ! POWER           [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .) ]
  ! IMAG            [ reduce using rule 18 (arithmetic_expression -> arithmetic_expression POWER arithmetic_expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! DIVIDE_CEIL     [ shift and go to state 40 ]
  ! DIVIDE_FLOOR    [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]


state 110

    (24) comparison -> arithmetic_expression comparison_op arithmetic_expression . comparison_chain
    (25) comparison -> arithmetic_expression comparison_op arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG
    (26) comparison_chain -> . comparison_op arithmetic_expression comparison_chain
    (27) comparison_chain -> . comparison_op arithmetic_expression
    (28) comparison_op -> . GREATER_THAN
    (29) comparison_op -> . SMALLER_THAN
    (30) comparison_op -> . UNEQUALS
    (31) comparison_op -> . EQUALS
    (32) comparison_op -> . SMALLER_EQUALS
    (33) comparison_op -> . GREATER_EQUALS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    IDENTIFIER      reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    LET             reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    ECHO            reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    LENGTH          reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    LIST            reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    NOT             reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    BEGIN           reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    LAMBDA          reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    NUMBER          reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    FLOAT           reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    STRING          reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    LPAREN          reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    END             reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    SEMICOLON       reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    DOT             reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    ELIF            reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    ELSE            reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    RPAREN          reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    COMMA           reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    THEN            reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    COLON           reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    IN              reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    DIVIDE_CEIL     shift and go to state 40
    DIVIDE_FLOOR    shift and go to state 41
    MOD             shift and go to state 42
    EXP             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    XOR             shift and go to state 46
    POWER           shift and go to state 47
    IMAG            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! MINUS           [ reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .) ]
  ! PLUS            [ reduce using rule 25 (comparison -> arithmetic_expression comparison_op arithmetic_expression .) ]

    comparison_op                  shift and go to state 153
    comparison_chain               shift and go to state 154

state 111

    (35) expression -> IDENTIFIER ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    LET             reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    ECHO            reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    LENGTH          reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    LIST            reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    BEGIN           reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    LAMBDA          reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    NUMBER          reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    FLOAT           reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    STRING          reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    END             reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    SEMICOLON       reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    DOT             reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    ELIF            reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    ELSE            reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    RPAREN          reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    THEN            reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    COLON           reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    IN              reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 35 (expression -> IDENTIFIER ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 112

    (36) expression -> IDENTIFIER PLUS_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    IDENTIFIER      reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    LET             reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    ECHO            reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    LENGTH          reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    LIST            reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    BEGIN           reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    LAMBDA          reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    NUMBER          reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    FLOAT           reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    STRING          reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    END             reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    SEMICOLON       reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    DOT             reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    ELIF            reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    ELSE            reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    COMMA           reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    THEN            reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    COLON           reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    IN              reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 36 (expression -> IDENTIFIER PLUS_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 113

    (37) expression -> IDENTIFIER MINUS_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    IDENTIFIER      reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    LET             reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    ECHO            reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    LENGTH          reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    LIST            reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    BEGIN           reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    LAMBDA          reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    NUMBER          reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    FLOAT           reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    STRING          reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    END             reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    SEMICOLON       reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    DOT             reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    ELIF            reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    ELSE            reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    COMMA           reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    THEN            reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    COLON           reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    IN              reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 37 (expression -> IDENTIFIER MINUS_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 114

    (38) expression -> IDENTIFIER TIMES_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    IDENTIFIER      reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    LET             reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    ECHO            reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    LENGTH          reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    LIST            reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    BEGIN           reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    LAMBDA          reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    NUMBER          reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    FLOAT           reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    STRING          reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    END             reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    SEMICOLON       reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    DOT             reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    ELIF            reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    ELSE            reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    RPAREN          reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    COMMA           reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    THEN            reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    COLON           reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    IN              reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 38 (expression -> IDENTIFIER TIMES_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 115

    (39) expression -> IDENTIFIER POWER_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    IDENTIFIER      reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    LET             reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    ECHO            reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    LENGTH          reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    LIST            reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    BEGIN           reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    LAMBDA          reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    NUMBER          reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    FLOAT           reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    STRING          reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    END             reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    SEMICOLON       reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    DOT             reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    ELIF            reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    ELSE            reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    RPAREN          reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    COMMA           reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    THEN            reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    COLON           reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    IN              reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 39 (expression -> IDENTIFIER POWER_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 116

    (40) expression -> IDENTIFIER DIVIDE_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    IDENTIFIER      reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    LET             reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ECHO            reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    LENGTH          reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    LIST            reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    BEGIN           reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    LAMBDA          reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    NUMBER          reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    FLOAT           reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    STRING          reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    END             reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    SEMICOLON       reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    DOT             reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ELIF            reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    RPAREN          reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    COMMA           reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    THEN            reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    COLON           reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    IN              reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 40 (expression -> IDENTIFIER DIVIDE_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 117

    (41) expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    IDENTIFIER      reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    LET             reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    ECHO            reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    LENGTH          reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    LIST            reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    BEGIN           reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    LAMBDA          reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    NUMBER          reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    FLOAT           reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    STRING          reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    END             reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    SEMICOLON       reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    DOT             reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    ELIF            reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    ELSE            reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    RPAREN          reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    COMMA           reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    THEN            reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    COLON           reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    IN              reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 41 (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 118

    (42) expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    IDENTIFIER      reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    LET             reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    ECHO            reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    LENGTH          reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    LIST            reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    BEGIN           reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    LAMBDA          reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    NUMBER          reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    FLOAT           reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    STRING          reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    END             reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    SEMICOLON       reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    DOT             reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    ELIF            reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    ELSE            reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    RPAREN          reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    COMMA           reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    THEN            reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    COLON           reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    IN              reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 42 (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 119

    (43) expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    IDENTIFIER      reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    LET             reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    ECHO            reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    LENGTH          reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    LIST            reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    BEGIN           reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    LAMBDA          reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    NUMBER          reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    FLOAT           reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    STRING          reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    END             reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    SEMICOLON       reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    DOT             reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    ELIF            reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    ELSE            reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    RPAREN          reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    COMMA           reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    THEN            reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    COLON           reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    IN              reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 43 (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 120

    (44) expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    IDENTIFIER      reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    LET             reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    ECHO            reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    LENGTH          reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    LIST            reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    BEGIN           reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    LAMBDA          reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    NUMBER          reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    FLOAT           reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    STRING          reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    END             reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    SEMICOLON       reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    DOT             reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    ELIF            reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    ELSE            reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    RPAREN          reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    COMMA           reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    THEN            reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    COLON           reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    IN              reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 44 (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 121

    (45) expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    IDENTIFIER      reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    LET             reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    ECHO            reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    LENGTH          reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    LIST            reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    BEGIN           reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    LAMBDA          reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    NUMBER          reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    FLOAT           reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    STRING          reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    END             reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    DOT             reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    ELIF            reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    ELSE            reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    COMMA           reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    THEN            reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    COLON           reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    IN              reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 45 (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 122

    (46) expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    IDENTIFIER      reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    LET             reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    ECHO            reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    LENGTH          reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    LIST            reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    BEGIN           reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    LAMBDA          reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    NUMBER          reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    FLOAT           reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    STRING          reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    END             reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    DOT             reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    ELIF            reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    ELSE            reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    COMMA           reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    THEN            reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    COLON           reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    IN              reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 46 (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 123

    (47) expression -> IDENTIFIER EQUALS_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    IDENTIFIER      reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    LET             reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    ECHO            reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    LENGTH          reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    LIST            reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    BEGIN           reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    LAMBDA          reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    NUMBER          reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    FLOAT           reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    STRING          reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    END             reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    DOT             reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    ELIF            reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    ELSE            reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    COMMA           reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    THEN            reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    COLON           reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    IN              reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 47 (expression -> IDENTIFIER EQUALS_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 124

    (48) expression -> IDENTIFIER UNEQUALS_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    IDENTIFIER      reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    LET             reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    ECHO            reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    LENGTH          reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    LIST            reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    BEGIN           reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    LAMBDA          reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    NUMBER          reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    FLOAT           reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    STRING          reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    END             reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    SEMICOLON       reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    DOT             reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    ELIF            reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    ELSE            reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    RPAREN          reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    COMMA           reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    THEN            reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    COLON           reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    IN              reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 48 (expression -> IDENTIFIER UNEQUALS_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 125

    (49) expression -> IDENTIFIER AND_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    IDENTIFIER      reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    LET             reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    ECHO            reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    LENGTH          reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    LIST            reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    BEGIN           reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    LAMBDA          reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    NUMBER          reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    FLOAT           reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    STRING          reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    END             reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    SEMICOLON       reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    DOT             reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    ELIF            reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    ELSE            reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    RPAREN          reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    COMMA           reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    THEN            reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    COLON           reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    IN              reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 49 (expression -> IDENTIFIER AND_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 126

    (50) expression -> IDENTIFIER OR_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    IDENTIFIER      reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    LET             reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    ECHO            reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    LENGTH          reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    LIST            reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    BEGIN           reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    LAMBDA          reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    NUMBER          reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    FLOAT           reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    STRING          reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    END             reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    SEMICOLON       reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    DOT             reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    ELIF            reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    ELSE            reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    RPAREN          reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    COMMA           reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    THEN            reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    COLON           reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    IN              reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 50 (expression -> IDENTIFIER OR_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 127

    (51) expression -> IDENTIFIER XOR_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    IDENTIFIER      reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    LET             reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    ECHO            reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    LENGTH          reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    LIST            reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    BEGIN           reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    LAMBDA          reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    NUMBER          reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    FLOAT           reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    STRING          reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    END             reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    SEMICOLON       reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    DOT             reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    ELIF            reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    ELSE            reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    RPAREN          reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    COMMA           reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    THEN            reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    COLON           reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    IN              reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 51 (expression -> IDENTIFIER XOR_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 128

    (52) expression -> IDENTIFIER EXP_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    IDENTIFIER      reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    LET             reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    ECHO            reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    LENGTH          reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    LIST            reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    BEGIN           reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    LAMBDA          reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    NUMBER          reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    FLOAT           reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    STRING          reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    END             reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    SEMICOLON       reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    DOT             reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    ELIF            reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    ELSE            reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    RPAREN          reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    COMMA           reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    THEN            reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    COLON           reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    IN              reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 52 (expression -> IDENTIFIER EXP_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 129

    (53) expression -> IDENTIFIER MOD_ASSIGN expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for LET resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for LIST resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for STRING resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for END resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for DOT resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for THEN resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for COLON resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
  ! reduce/reduce conflict for IN resolved using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    IDENTIFIER      reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    LET             reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    ECHO            reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    LENGTH          reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    LIST            reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    OPEN_BRACKETS   reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    BEGIN           reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    LAMBDA          reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    NUMBER          reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    FLOAT           reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    STRING          reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    END             reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    SEMICOLON       reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    DOT             reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    ELIF            reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    ELSE            reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    RPAREN          reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    COMMA           reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    CLOSED_BRACKETS reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    THEN            reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    COLON           reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    IN              reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .)
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    LPAREN          shift and go to state 15

  ! NOT             [ reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! LPAREN          [ reduce using rule 53 (expression -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ shift and go to state 11 ]
  ! LET             [ shift and go to state 16 ]
  ! ECHO            [ shift and go to state 17 ]
  ! LENGTH          [ shift and go to state 18 ]
  ! LIST            [ shift and go to state 19 ]
  ! OPEN_BRACKETS   [ shift and go to state 21 ]
  ! BEGIN           [ shift and go to state 2 ]
  ! LAMBDA          [ shift and go to state 28 ]
  ! NUMBER          [ shift and go to state 29 ]
  ! FLOAT           [ shift and go to state 30 ]
  ! STRING          [ shift and go to state 31 ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 130

    (95) expression -> atomar LPAREN parameter_expr . RPAREN

    RPAREN          shift and go to state 155


state 131

    (87) parameter_expr -> parameter_pos_expr .

    RPAREN          reduce using rule 87 (parameter_expr -> parameter_pos_expr .)


state 132

    (88) parameter_expr -> empty .

    RPAREN          reduce using rule 88 (parameter_expr -> empty .)


state 133

    (89) parameter_pos_expr -> expression . COMMA parameter_pos_expr
    (90) parameter_pos_expr -> expression .
    (92) parameter_keywords_expr -> expression . COLON expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> expression . COLON expression
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 90 (parameter_pos_expr -> expression .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    COMMA           shift and go to state 156
    RPAREN          reduce using rule 90 (parameter_pos_expr -> expression .)
    COLON           shift and go to state 157
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 134

    (91) parameter_pos_expr -> parameter_keywords_expr .

    RPAREN          reduce using rule 91 (parameter_pos_expr -> parameter_keywords_expr .)


state 135

    (5) atomar -> LPAREN expression RPAREN .

    LPAREN          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    DIVIDE_CEIL     reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    DIVIDE_FLOOR    reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    MOD             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    EXP             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    AND             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    OR              reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    XOR             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    POWER           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    IMAG            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    SMALLER_THAN    reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    UNEQUALS        reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    SMALLER_EQUALS  reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    GREATER_EQUALS  reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    LET             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    ECHO            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    LENGTH          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    LIST            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    OPEN_BRACKETS   reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    NOT             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    BEGIN           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    LAMBDA          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    STRING          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    END             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    DOT             reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    ELIF            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    CLOSED_BRACKETS reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    THEN            reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    COLON           reduce using rule 5 (atomar -> LPAREN expression RPAREN .)
    IN              reduce using rule 5 (atomar -> LPAREN expression RPAREN .)


state 136

    (96) expression -> LET IDENTIFIER EQUALS . expression IN expression DOT
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 158
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 137

    (97) expression -> ECHO LPAREN param_list . RPAREN

    RPAREN          shift and go to state 159


state 138

    (98) expression -> LENGTH LPAREN param_list . RPAREN

    RPAREN          shift and go to state 160


state 139

    (99) expression -> LIST LPAREN param_list . RPAREN

    RPAREN          shift and go to state 161


state 140

    (105) expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .

    IDENTIFIER      reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    LET             reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    ECHO            reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    LENGTH          reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    LIST            reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    OPEN_BRACKETS   reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    NOT             reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    MINUS           reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    PLUS            reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    BEGIN           reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    LAMBDA          reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    NUMBER          reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    FLOAT           reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    STRING          reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    LPAREN          reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    END             reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    SEMICOLON       reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    DOT             reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    ELIF            reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    ELSE            reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    RPAREN          reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    COMMA           reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    CLOSED_BRACKETS reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    THEN            reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    COLON           reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)
    IN              reduce using rule 105 (expression -> OPEN_BRACKETS param_list CLOSED_BRACKETS .)


state 141

    (106) expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .

    IDENTIFIER      reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    LET             reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    ECHO            reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    LENGTH          reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    LIST            reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    OPEN_BRACKETS   reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    NOT             reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    MINUS           reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    PLUS            reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    BEGIN           reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    LAMBDA          reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    NUMBER          reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    FLOAT           reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    STRING          reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    LPAREN          reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    END             reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    SEMICOLON       reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    DOT             reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    ELIF            reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    ELSE            reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    RPAREN          reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    COMMA           reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    CLOSED_BRACKETS reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    THEN            reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    COLON           reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)
    IN              reduce using rule 106 (expression -> OPEN_BRACKETS empty CLOSED_BRACKETS .)


state 142

    (100) param_list -> expression COMMA . param_list
    (100) param_list -> . expression COMMA param_list
    (101) param_list -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 83
    param_list                     shift and go to state 162
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 143

    (63) if_statement -> IF expression THEN . statements DOT
    (64) if_statement -> IF expression THEN . statements else_elif_body DOT
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (63) if_statement -> . IF expression THEN statements DOT
    (64) if_statement -> . IF expression THEN statements else_elif_body DOT
    (67) while_statement -> . WHILE expression THEN statements DOT
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    LOOP            shift and go to state 24
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statements                     shift and go to state 163
    statement                      shift and go to state 4
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 144

    (67) while_statement -> WHILE expression THEN . statements DOT
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (63) if_statement -> . IF expression THEN statements DOT
    (64) if_statement -> . IF expression THEN statements else_elif_body DOT
    (67) while_statement -> . WHILE expression THEN statements DOT
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    LOOP            shift and go to state 24
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statements                     shift and go to state 164
    statement                      shift and go to state 4
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 145

    (68) loop_statement -> LOOP IDENTIFIER IN . interval LOOPTHEN statements DOT
    (69) interval -> . OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS
    (70) interval -> . CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS
    (71) interval -> . OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS
    (72) interval -> . CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS

    OPEN_BRACKETS   shift and go to state 166
    CLOSED_BRACKETS shift and go to state 167

    interval                       shift and go to state 165

state 146

    (73) lambda -> LAMBDA parameter LAMBDA_ARROW . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 168
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 147

    (75) parameter -> LPAREN parameter_pos . RPAREN

    RPAREN          shift and go to state 169


state 148

    (78) parameter_pos -> parameter_pos_list .

    RPAREN          reduce using rule 78 (parameter_pos -> parameter_pos_list .)


state 149

    (79) parameter_pos_list -> IDENTIFIER . COMMA parameter_pos_list
    (80) parameter_pos_list -> IDENTIFIER .
    (83) parameter_kw_list -> IDENTIFIER . COLON expression COMMA parameter_kw_list
    (84) parameter_kw_list -> IDENTIFIER . COLON expression
    (86) parameter_infty -> IDENTIFIER . DOTS

    COMMA           shift and go to state 170
    RPAREN          reduce using rule 80 (parameter_pos_list -> IDENTIFIER .)
    COLON           shift and go to state 171
    DOTS            shift and go to state 172


state 150

    (81) parameter_pos_list -> parameter_keywords .

    RPAREN          reduce using rule 81 (parameter_pos_list -> parameter_keywords .)


state 151

    (82) parameter_keywords -> parameter_kw_list .

    RPAREN          reduce using rule 82 (parameter_keywords -> parameter_kw_list .)


state 152

    (85) parameter_kw_list -> parameter_infty .

    RPAREN          reduce using rule 85 (parameter_kw_list -> parameter_infty .)


state 153

    (26) comparison_chain -> comparison_op . arithmetic_expression comparison_chain
    (27) comparison_chain -> comparison_op . arithmetic_expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    IDENTIFIER      shift and go to state 89
    LPAREN          shift and go to state 15

    arithmetic_expression          shift and go to state 173
    atomar                         shift and go to state 88

state 154

    (24) comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .

    IDENTIFIER      reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    LET             reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ECHO            reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    LENGTH          reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    LIST            reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    OPEN_BRACKETS   reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    NOT             reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    MINUS           reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    PLUS            reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    BEGIN           reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    LAMBDA          reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    NUMBER          reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    FLOAT           reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    STRING          reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    LPAREN          reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    END             reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    SEMICOLON       reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    DOT             reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ELIF            reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    ELSE            reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    RPAREN          reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    COMMA           reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    CLOSED_BRACKETS reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    THEN            reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    COLON           reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)
    IN              reduce using rule 24 (comparison -> arithmetic_expression comparison_op arithmetic_expression comparison_chain .)


state 155

    (95) expression -> atomar LPAREN parameter_expr RPAREN .

    IDENTIFIER      reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    LET             reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    ECHO            reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    LENGTH          reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    LIST            reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    OPEN_BRACKETS   reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    NOT             reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    MINUS           reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    PLUS            reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    BEGIN           reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    LAMBDA          reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    NUMBER          reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    FLOAT           reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    STRING          reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    LPAREN          reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    END             reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    SEMICOLON       reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    DOT             reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    ELIF            reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    ELSE            reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    RPAREN          reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    COMMA           reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    CLOSED_BRACKETS reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    THEN            reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    COLON           reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)
    IN              reduce using rule 95 (expression -> atomar LPAREN parameter_expr RPAREN .)


state 156

    (89) parameter_pos_expr -> expression COMMA . parameter_pos_expr
    (89) parameter_pos_expr -> . expression COMMA parameter_pos_expr
    (90) parameter_pos_expr -> . expression
    (91) parameter_pos_expr -> . parameter_keywords_expr
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (92) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> . expression COLON expression
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 133
    parameter_pos_expr             shift and go to state 174
    parameter_keywords_expr        shift and go to state 134
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 157

    (92) parameter_keywords_expr -> expression COLON . expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> expression COLON . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 175
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 158

    (96) expression -> LET IDENTIFIER EQUALS expression . IN expression DOT
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    IN              shift and go to state 176
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 159

    (97) expression -> ECHO LPAREN param_list RPAREN .

    IDENTIFIER      reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    LET             reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    ECHO            reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    LENGTH          reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    LIST            reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    OPEN_BRACKETS   reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    NOT             reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    MINUS           reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    PLUS            reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    BEGIN           reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    LAMBDA          reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    NUMBER          reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    FLOAT           reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    STRING          reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    LPAREN          reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    END             reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    SEMICOLON       reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    DOT             reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    ELIF            reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    ELSE            reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    RPAREN          reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    COMMA           reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    CLOSED_BRACKETS reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    THEN            reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    COLON           reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)
    IN              reduce using rule 97 (expression -> ECHO LPAREN param_list RPAREN .)


state 160

    (98) expression -> LENGTH LPAREN param_list RPAREN .

    IDENTIFIER      reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    LET             reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    ECHO            reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    LENGTH          reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    LIST            reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    OPEN_BRACKETS   reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    NOT             reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    MINUS           reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    PLUS            reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    BEGIN           reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    LAMBDA          reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    NUMBER          reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    FLOAT           reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    STRING          reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    LPAREN          reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    END             reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    SEMICOLON       reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    DOT             reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    ELIF            reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    ELSE            reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    RPAREN          reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    COMMA           reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    CLOSED_BRACKETS reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    THEN            reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    COLON           reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)
    IN              reduce using rule 98 (expression -> LENGTH LPAREN param_list RPAREN .)


state 161

    (99) expression -> LIST LPAREN param_list RPAREN .

    IDENTIFIER      reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    LET             reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    ECHO            reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    LENGTH          reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    LIST            reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    OPEN_BRACKETS   reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    NOT             reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    MINUS           reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    PLUS            reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    BEGIN           reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    LAMBDA          reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    NUMBER          reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    FLOAT           reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    STRING          reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    LPAREN          reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    END             reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    SEMICOLON       reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    DOT             reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    ELIF            reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    ELSE            reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    RPAREN          reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    COMMA           reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    CLOSED_BRACKETS reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    THEN            reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    COLON           reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)
    IN              reduce using rule 99 (expression -> LIST LPAREN param_list RPAREN .)


state 162

    (100) param_list -> expression COMMA param_list .

    CLOSED_BRACKETS reduce using rule 100 (param_list -> expression COMMA param_list .)
    RPAREN          reduce using rule 100 (param_list -> expression COMMA param_list .)


state 163

    (63) if_statement -> IF expression THEN statements . DOT
    (64) if_statement -> IF expression THEN statements . else_elif_body DOT
    (61) statements -> statements . SEMICOLON statement
    (65) else_elif_body -> . ELIF IF expression THEN statements else_elif_body
    (66) else_elif_body -> . ELSE statements

    DOT             shift and go to state 177
    SEMICOLON       shift and go to state 179
    ELIF            shift and go to state 180
    ELSE            shift and go to state 181

    else_elif_body                 shift and go to state 178

state 164

    (67) while_statement -> WHILE expression THEN statements . DOT
    (61) statements -> statements . SEMICOLON statement

    DOT             shift and go to state 182
    SEMICOLON       shift and go to state 179


state 165

    (68) loop_statement -> LOOP IDENTIFIER IN interval . LOOPTHEN statements DOT

    LOOPTHEN        shift and go to state 183


state 166

    (69) interval -> OPEN_BRACKETS . expression COMMA expression CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS . expression COMMA expression OPEN_BRACKETS
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 184
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 167

    (70) interval -> CLOSED_BRACKETS . expression COMMA expression CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS . expression COMMA expression OPEN_BRACKETS
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 185
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 168

    (73) lambda -> LAMBDA parameter LAMBDA_ARROW expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for LET resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for ECHO resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for LENGTH resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for LIST resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for OPEN_BRACKETS resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for NOT resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for BEGIN resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for STRING resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for END resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for DOT resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for ELIF resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for CLOSED_BRACKETS resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for THEN resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for COLON resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! reduce/reduce conflict for IN resolved using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    SEMICOLON       reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    DOT             reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    ELIF            reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    ELSE            reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    RPAREN          reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    COMMA           reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    CLOSED_BRACKETS reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    THEN            reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    COLON           reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    IN              reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .)
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! IDENTIFIER      [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! LET             [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! ECHO            [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! LENGTH          [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! LIST            [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! NOT             [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! MINUS           [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! PLUS            [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! BEGIN           [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! LAMBDA          [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! NUMBER          [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! FLOAT           [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! STRING          [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! LPAREN          [ reduce using rule 73 (lambda -> LAMBDA parameter LAMBDA_ARROW expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! END             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! SEMICOLON       [ reduce using rule 103 (list_parameter -> expression .) ]
  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELIF            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ELSE            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IN              [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 169

    (75) parameter -> LPAREN parameter_pos RPAREN .

    LAMBDA_ARROW    reduce using rule 75 (parameter -> LPAREN parameter_pos RPAREN .)


state 170

    (79) parameter_pos_list -> IDENTIFIER COMMA . parameter_pos_list
    (79) parameter_pos_list -> . IDENTIFIER COMMA parameter_pos_list
    (80) parameter_pos_list -> . IDENTIFIER
    (81) parameter_pos_list -> . parameter_keywords
    (82) parameter_keywords -> . parameter_kw_list
    (83) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (84) parameter_kw_list -> . IDENTIFIER COLON expression
    (85) parameter_kw_list -> . parameter_infty
    (86) parameter_infty -> . IDENTIFIER DOTS

    IDENTIFIER      shift and go to state 149

    parameter_pos_list             shift and go to state 186
    parameter_keywords             shift and go to state 150
    parameter_kw_list              shift and go to state 151
    parameter_infty                shift and go to state 152

state 171

    (83) parameter_kw_list -> IDENTIFIER COLON . expression COMMA parameter_kw_list
    (84) parameter_kw_list -> IDENTIFIER COLON . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 187
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 172

    (86) parameter_infty -> IDENTIFIER DOTS .

    RPAREN          reduce using rule 86 (parameter_infty -> IDENTIFIER DOTS .)


state 173

    (26) comparison_chain -> comparison_op arithmetic_expression . comparison_chain
    (27) comparison_chain -> comparison_op arithmetic_expression .
    (7) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (8) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (9) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (10) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression
    (11) arithmetic_expression -> arithmetic_expression . DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> arithmetic_expression . DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> arithmetic_expression . MOD arithmetic_expression
    (14) arithmetic_expression -> arithmetic_expression . EXP arithmetic_expression
    (15) arithmetic_expression -> arithmetic_expression . AND arithmetic_expression
    (16) arithmetic_expression -> arithmetic_expression . OR arithmetic_expression
    (17) arithmetic_expression -> arithmetic_expression . XOR arithmetic_expression
    (18) arithmetic_expression -> arithmetic_expression . POWER arithmetic_expression
    (22) arithmetic_expression -> arithmetic_expression . IMAG
    (26) comparison_chain -> . comparison_op arithmetic_expression comparison_chain
    (27) comparison_chain -> . comparison_op arithmetic_expression
    (28) comparison_op -> . GREATER_THAN
    (29) comparison_op -> . SMALLER_THAN
    (30) comparison_op -> . UNEQUALS
    (31) comparison_op -> . EQUALS
    (32) comparison_op -> . SMALLER_EQUALS
    (33) comparison_op -> . GREATER_EQUALS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    IDENTIFIER      reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    LET             reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    ECHO            reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    LENGTH          reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    LIST            reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    OPEN_BRACKETS   reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    NOT             reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    BEGIN           reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    LAMBDA          reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    NUMBER          reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    FLOAT           reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    STRING          reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    LPAREN          reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    END             reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    SEMICOLON       reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    DOT             reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    ELIF            reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    ELSE            reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    RPAREN          reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    COMMA           reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    CLOSED_BRACKETS reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    THEN            reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    COLON           reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    IN              reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    DIVIDE_CEIL     shift and go to state 40
    DIVIDE_FLOOR    shift and go to state 41
    MOD             shift and go to state 42
    EXP             shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    XOR             shift and go to state 46
    POWER           shift and go to state 47
    IMAG            shift and go to state 48
    GREATER_THAN    shift and go to state 50
    SMALLER_THAN    shift and go to state 51
    UNEQUALS        shift and go to state 52
    EQUALS          shift and go to state 53
    SMALLER_EQUALS  shift and go to state 54
    GREATER_EQUALS  shift and go to state 55

  ! MINUS           [ reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .) ]
  ! PLUS            [ reduce using rule 27 (comparison_chain -> comparison_op arithmetic_expression .) ]

    comparison_op                  shift and go to state 153
    comparison_chain               shift and go to state 188

state 174

    (89) parameter_pos_expr -> expression COMMA parameter_pos_expr .

    RPAREN          reduce using rule 89 (parameter_pos_expr -> expression COMMA parameter_pos_expr .)


state 175

    (92) parameter_keywords_expr -> expression COLON expression . COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> expression COLON expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 93 (parameter_keywords_expr -> expression COLON expression .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    COMMA           shift and go to state 189
    RPAREN          reduce using rule 93 (parameter_keywords_expr -> expression COLON expression .)
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 176

    (96) expression -> LET IDENTIFIER EQUALS expression IN . expression DOT
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 190
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 177

    (63) if_statement -> IF expression THEN statements DOT .

    END             reduce using rule 63 (if_statement -> IF expression THEN statements DOT .)
    SEMICOLON       reduce using rule 63 (if_statement -> IF expression THEN statements DOT .)
    DOT             reduce using rule 63 (if_statement -> IF expression THEN statements DOT .)
    ELIF            reduce using rule 63 (if_statement -> IF expression THEN statements DOT .)
    ELSE            reduce using rule 63 (if_statement -> IF expression THEN statements DOT .)


state 178

    (64) if_statement -> IF expression THEN statements else_elif_body . DOT

    DOT             shift and go to state 191


state 179

    (61) statements -> statements SEMICOLON . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (63) if_statement -> . IF expression THEN statements DOT
    (64) if_statement -> . IF expression THEN statements else_elif_body DOT
    (67) while_statement -> . WHILE expression THEN statements DOT
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    LOOP            shift and go to state 24
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    statement                      shift and go to state 97
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 180

    (65) else_elif_body -> ELIF . IF expression THEN statements else_elif_body

    IF              shift and go to state 192


state 181

    (66) else_elif_body -> ELSE . statements
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (63) if_statement -> . IF expression THEN statements DOT
    (64) if_statement -> . IF expression THEN statements else_elif_body DOT
    (67) while_statement -> . WHILE expression THEN statements DOT
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    LOOP            shift and go to state 24
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    statements                     shift and go to state 193
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 182

    (67) while_statement -> WHILE expression THEN statements DOT .

    END             reduce using rule 67 (while_statement -> WHILE expression THEN statements DOT .)
    SEMICOLON       reduce using rule 67 (while_statement -> WHILE expression THEN statements DOT .)
    DOT             reduce using rule 67 (while_statement -> WHILE expression THEN statements DOT .)
    ELIF            reduce using rule 67 (while_statement -> WHILE expression THEN statements DOT .)
    ELSE            reduce using rule 67 (while_statement -> WHILE expression THEN statements DOT .)


state 183

    (68) loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN . statements DOT
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (63) if_statement -> . IF expression THEN statements DOT
    (64) if_statement -> . IF expression THEN statements else_elif_body DOT
    (67) while_statement -> . WHILE expression THEN statements DOT
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    LOOP            shift and go to state 24
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    statements                     shift and go to state 194
    statement                      shift and go to state 4
    expression                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 184

    (69) interval -> OPEN_BRACKETS expression . COMMA expression CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS expression . COMMA expression OPEN_BRACKETS
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    COMMA           shift and go to state 195
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 185

    (70) interval -> CLOSED_BRACKETS expression . COMMA expression CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS expression . COMMA expression OPEN_BRACKETS
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    COMMA           shift and go to state 196
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 186

    (79) parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list .

    RPAREN          reduce using rule 79 (parameter_pos_list -> IDENTIFIER COMMA parameter_pos_list .)


state 187

    (83) parameter_kw_list -> IDENTIFIER COLON expression . COMMA parameter_kw_list
    (84) parameter_kw_list -> IDENTIFIER COLON expression .
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 84 (parameter_kw_list -> IDENTIFIER COLON expression .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    COMMA           shift and go to state 197
    RPAREN          reduce using rule 84 (parameter_kw_list -> IDENTIFIER COLON expression .)
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! COMMA           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! RPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 188

    (26) comparison_chain -> comparison_op arithmetic_expression comparison_chain .

    IDENTIFIER      reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    LET             reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ECHO            reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    LENGTH          reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    LIST            reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    OPEN_BRACKETS   reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    NOT             reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    MINUS           reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    PLUS            reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    BEGIN           reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    LAMBDA          reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    NUMBER          reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    FLOAT           reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    STRING          reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    LPAREN          reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    END             reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    SEMICOLON       reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    DOT             reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ELIF            reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    ELSE            reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    RPAREN          reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    COMMA           reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    CLOSED_BRACKETS reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    THEN            reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    COLON           reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)
    IN              reduce using rule 26 (comparison_chain -> comparison_op arithmetic_expression comparison_chain .)


state 189

    (92) parameter_keywords_expr -> expression COLON expression COMMA . parameter_keywords_expr
    (92) parameter_keywords_expr -> . expression COLON expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> . expression COLON expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 198
    parameter_keywords_expr        shift and go to state 199
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 190

    (96) expression -> LET IDENTIFIER EQUALS expression IN expression . DOT
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             shift and go to state 200
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! DOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 191

    (64) if_statement -> IF expression THEN statements else_elif_body DOT .

    END             reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    SEMICOLON       reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    DOT             reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    ELIF            reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body DOT .)
    ELSE            reduce using rule 64 (if_statement -> IF expression THEN statements else_elif_body DOT .)


state 192

    (65) else_elif_body -> ELIF IF . expression THEN statements else_elif_body
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 201
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 193

    (66) else_elif_body -> ELSE statements .
    (61) statements -> statements . SEMICOLON statement

    DOT             reduce using rule 66 (else_elif_body -> ELSE statements .)
    SEMICOLON       shift and go to state 179


state 194

    (68) loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements . DOT
    (61) statements -> statements . SEMICOLON statement

    DOT             shift and go to state 202
    SEMICOLON       shift and go to state 179


state 195

    (69) interval -> OPEN_BRACKETS expression COMMA . expression CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS expression COMMA . expression OPEN_BRACKETS
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 203
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 196

    (70) interval -> CLOSED_BRACKETS expression COMMA . expression CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS expression COMMA . expression OPEN_BRACKETS
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 204
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 197

    (83) parameter_kw_list -> IDENTIFIER COLON expression COMMA . parameter_kw_list
    (83) parameter_kw_list -> . IDENTIFIER COLON expression COMMA parameter_kw_list
    (84) parameter_kw_list -> . IDENTIFIER COLON expression
    (85) parameter_kw_list -> . parameter_infty
    (86) parameter_infty -> . IDENTIFIER DOTS

    IDENTIFIER      shift and go to state 205

    parameter_kw_list              shift and go to state 206
    parameter_infty                shift and go to state 152

state 198

    (92) parameter_keywords_expr -> expression . COLON expression COMMA parameter_keywords_expr
    (93) parameter_keywords_expr -> expression . COLON expression
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    COLON           shift and go to state 157
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! COLON           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 199

    (92) parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr .

    RPAREN          reduce using rule 92 (parameter_keywords_expr -> expression COLON expression COMMA parameter_keywords_expr .)


state 200

    (96) expression -> LET IDENTIFIER EQUALS expression IN expression DOT .

    IDENTIFIER      reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    LET             reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    ECHO            reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    LENGTH          reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    LIST            reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    OPEN_BRACKETS   reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    NOT             reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    MINUS           reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    PLUS            reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    BEGIN           reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    LAMBDA          reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    NUMBER          reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    FLOAT           reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    STRING          reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    LPAREN          reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    END             reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    SEMICOLON       reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    DOT             reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    ELIF            reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    ELSE            reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    RPAREN          reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    COMMA           reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    CLOSED_BRACKETS reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    THEN            reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    COLON           reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)
    IN              reduce using rule 96 (expression -> LET IDENTIFIER EQUALS expression IN expression DOT .)


state 201

    (65) else_elif_body -> ELIF IF expression . THEN statements else_elif_body
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for THEN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    THEN            shift and go to state 207
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! THEN            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 202

    (68) loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .

    END             reduce using rule 68 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    SEMICOLON       reduce using rule 68 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    DOT             reduce using rule 68 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    ELIF            reduce using rule 68 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)
    ELSE            reduce using rule 68 (loop_statement -> LOOP IDENTIFIER IN interval LOOPTHEN statements DOT .)


state 203

    (69) interval -> OPEN_BRACKETS expression COMMA expression . CLOSED_BRACKETS
    (71) interval -> OPEN_BRACKETS expression COMMA expression . OPEN_BRACKETS
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for CLOSED_BRACKETS resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    CLOSED_BRACKETS shift and go to state 209
    OPEN_BRACKETS   shift and go to state 208
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 204

    (70) interval -> CLOSED_BRACKETS expression COMMA expression . CLOSED_BRACKETS
    (72) interval -> CLOSED_BRACKETS expression COMMA expression . OPEN_BRACKETS
    (102) list_parameter -> expression . list_parameter
    (103) list_parameter -> expression .
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN

  ! shift/reduce conflict for CLOSED_BRACKETS resolved as shift
  ! shift/reduce conflict for OPEN_BRACKETS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LENGTH resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    CLOSED_BRACKETS shift and go to state 210
    OPEN_BRACKETS   shift and go to state 211
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

  ! CLOSED_BRACKETS [ reduce using rule 103 (list_parameter -> expression .) ]
  ! OPEN_BRACKETS   [ reduce using rule 103 (list_parameter -> expression .) ]
  ! IDENTIFIER      [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LET             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! ECHO            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LENGTH          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LIST            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NOT             [ reduce using rule 103 (list_parameter -> expression .) ]
  ! MINUS           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! PLUS            [ reduce using rule 103 (list_parameter -> expression .) ]
  ! BEGIN           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LAMBDA          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! NUMBER          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! FLOAT           [ reduce using rule 103 (list_parameter -> expression .) ]
  ! STRING          [ reduce using rule 103 (list_parameter -> expression .) ]
  ! LPAREN          [ reduce using rule 103 (list_parameter -> expression .) ]

    expression                     shift and go to state 34
    list_parameter                 shift and go to state 35
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14

state 205

    (83) parameter_kw_list -> IDENTIFIER . COLON expression COMMA parameter_kw_list
    (84) parameter_kw_list -> IDENTIFIER . COLON expression
    (86) parameter_infty -> IDENTIFIER . DOTS

    COLON           shift and go to state 171
    DOTS            shift and go to state 172


state 206

    (83) parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list .

    RPAREN          reduce using rule 83 (parameter_kw_list -> IDENTIFIER COLON expression COMMA parameter_kw_list .)


state 207

    (65) else_elif_body -> ELIF IF expression THEN . statements else_elif_body
    (61) statements -> . statements SEMICOLON statement
    (62) statements -> . statement
    (57) statement -> . expression
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . loop_statement
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (63) if_statement -> . IF expression THEN statements DOT
    (64) if_statement -> . IF expression THEN statements else_elif_body DOT
    (67) while_statement -> . WHILE expression THEN statements DOT
    (68) loop_statement -> . LOOP IDENTIFIER IN interval LOOPTHEN statements DOT
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    LOOP            shift and go to state 24
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 5
    statements                     shift and go to state 212
    statement                      shift and go to state 4
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    loop_statement                 shift and go to state 8
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 208

    (71) interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS .
    (105) expression -> OPEN_BRACKETS . param_list CLOSED_BRACKETS
    (106) expression -> OPEN_BRACKETS . empty CLOSED_BRACKETS
    (100) param_list -> . expression COMMA param_list
    (101) param_list -> . expression
    (94) empty -> .
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    LOOPTHEN        reduce using rule 71 (interval -> OPEN_BRACKETS expression COMMA expression OPEN_BRACKETS .)
    CLOSED_BRACKETS reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 83
    param_list                     shift and go to state 81
    empty                          shift and go to state 82
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 209

    (69) interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS .

    LOOPTHEN        reduce using rule 69 (interval -> OPEN_BRACKETS expression COMMA expression CLOSED_BRACKETS .)


state 210

    (70) interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS .

    LOOPTHEN        reduce using rule 70 (interval -> CLOSED_BRACKETS expression COMMA expression CLOSED_BRACKETS .)


state 211

    (72) interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS .
    (105) expression -> OPEN_BRACKETS . param_list CLOSED_BRACKETS
    (106) expression -> OPEN_BRACKETS . empty CLOSED_BRACKETS
    (100) param_list -> . expression COMMA param_list
    (101) param_list -> . expression
    (94) empty -> .
    (6) expression -> . arithmetic_expression
    (34) expression -> . comparison
    (35) expression -> . IDENTIFIER ASSIGN expression
    (36) expression -> . IDENTIFIER PLUS_ASSIGN expression
    (37) expression -> . IDENTIFIER MINUS_ASSIGN expression
    (38) expression -> . IDENTIFIER TIMES_ASSIGN expression
    (39) expression -> . IDENTIFIER POWER_ASSIGN expression
    (40) expression -> . IDENTIFIER DIVIDE_ASSIGN expression
    (41) expression -> . IDENTIFIER DIVIDE_FLOOR_ASSIGN expression
    (42) expression -> . IDENTIFIER DIVIDE_CEIL_ASSIGN expression
    (43) expression -> . IDENTIFIER GREATER_THAN_ASSIGN expression
    (44) expression -> . IDENTIFIER SMALLER_THAN_ASSIGN expression
    (45) expression -> . IDENTIFIER GREATER_EQUALS_ASSIGN expression
    (46) expression -> . IDENTIFIER SMALLER_EQUALS_ASSIGN expression
    (47) expression -> . IDENTIFIER EQUALS_ASSIGN expression
    (48) expression -> . IDENTIFIER UNEQUALS_ASSIGN expression
    (49) expression -> . IDENTIFIER AND_ASSIGN expression
    (50) expression -> . IDENTIFIER OR_ASSIGN expression
    (51) expression -> . IDENTIFIER XOR_ASSIGN expression
    (52) expression -> . IDENTIFIER EXP_ASSIGN expression
    (53) expression -> . IDENTIFIER MOD_ASSIGN expression
    (56) expression -> . sequence
    (74) expression -> . lambda
    (95) expression -> . atomar LPAREN parameter_expr RPAREN
    (96) expression -> . LET IDENTIFIER EQUALS expression IN expression DOT
    (97) expression -> . ECHO LPAREN param_list RPAREN
    (98) expression -> . LENGTH LPAREN param_list RPAREN
    (99) expression -> . LIST LPAREN param_list RPAREN
    (104) expression -> . list_parameter
    (105) expression -> . OPEN_BRACKETS param_list CLOSED_BRACKETS
    (106) expression -> . OPEN_BRACKETS empty CLOSED_BRACKETS
    (7) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (8) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (9) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (10) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (11) arithmetic_expression -> . arithmetic_expression DIVIDE_CEIL arithmetic_expression
    (12) arithmetic_expression -> . arithmetic_expression DIVIDE_FLOOR arithmetic_expression
    (13) arithmetic_expression -> . arithmetic_expression MOD arithmetic_expression
    (14) arithmetic_expression -> . arithmetic_expression EXP arithmetic_expression
    (15) arithmetic_expression -> . arithmetic_expression AND arithmetic_expression
    (16) arithmetic_expression -> . arithmetic_expression OR arithmetic_expression
    (17) arithmetic_expression -> . arithmetic_expression XOR arithmetic_expression
    (18) arithmetic_expression -> . arithmetic_expression POWER arithmetic_expression
    (19) arithmetic_expression -> . NOT arithmetic_expression
    (20) arithmetic_expression -> . MINUS arithmetic_expression
    (21) arithmetic_expression -> . PLUS arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_expression IMAG
    (23) arithmetic_expression -> . atomar
    (24) comparison -> . arithmetic_expression comparison_op arithmetic_expression comparison_chain
    (25) comparison -> . arithmetic_expression comparison_op arithmetic_expression
    (54) sequence -> . BEGIN statements END
    (55) sequence -> . BEGIN statements SEMICOLON END
    (73) lambda -> . LAMBDA parameter LAMBDA_ARROW expression
    (1) atomar -> . NUMBER
    (2) atomar -> . FLOAT
    (3) atomar -> . STRING
    (4) atomar -> . IDENTIFIER
    (5) atomar -> . LPAREN expression RPAREN
    (102) list_parameter -> . expression list_parameter
    (103) list_parameter -> . expression

    LOOPTHEN        reduce using rule 72 (interval -> CLOSED_BRACKETS expression COMMA expression OPEN_BRACKETS .)
    CLOSED_BRACKETS reduce using rule 94 (empty -> .)
    IDENTIFIER      shift and go to state 11
    LET             shift and go to state 16
    ECHO            shift and go to state 17
    LENGTH          shift and go to state 18
    LIST            shift and go to state 19
    OPEN_BRACKETS   shift and go to state 21
    NOT             shift and go to state 27
    MINUS           shift and go to state 26
    PLUS            shift and go to state 25
    BEGIN           shift and go to state 2
    LAMBDA          shift and go to state 28
    NUMBER          shift and go to state 29
    FLOAT           shift and go to state 30
    STRING          shift and go to state 31
    LPAREN          shift and go to state 15

    expression                     shift and go to state 83
    param_list                     shift and go to state 81
    empty                          shift and go to state 82
    arithmetic_expression          shift and go to state 9
    comparison                     shift and go to state 10
    sequence                       shift and go to state 12
    lambda                         shift and go to state 13
    atomar                         shift and go to state 14
    list_parameter                 shift and go to state 20

state 212

    (65) else_elif_body -> ELIF IF expression THEN statements . else_elif_body
    (61) statements -> statements . SEMICOLON statement
    (65) else_elif_body -> . ELIF IF expression THEN statements else_elif_body
    (66) else_elif_body -> . ELSE statements

    SEMICOLON       shift and go to state 179
    ELIF            shift and go to state 180
    ELSE            shift and go to state 181

    else_elif_body                 shift and go to state 213

state 213

    (65) else_elif_body -> ELIF IF expression THEN statements else_elif_body .

    DOT             reduce using rule 65 (else_elif_body -> ELIF IF expression THEN statements else_elif_body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 5 resolved as shift
WARNING: shift/reduce conflict for LET in state 5 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 5 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 5 resolved as shift
WARNING: shift/reduce conflict for LIST in state 5 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 5 resolved as shift
WARNING: shift/reduce conflict for NOT in state 5 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 5 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 5 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 5 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 5 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 5 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 9 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 9 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 14 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 34 resolved as shift
WARNING: shift/reduce conflict for LET in state 34 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 34 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 34 resolved as shift
WARNING: shift/reduce conflict for LIST in state 34 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 34 resolved as shift
WARNING: shift/reduce conflict for NOT in state 34 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 34 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 34 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 34 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 34 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 34 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 34 resolved as shift
WARNING: shift/reduce conflict for STRING in state 34 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 34 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 76 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 76 resolved as shift
WARNING: shift/reduce conflict for LET in state 76 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 76 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 76 resolved as shift
WARNING: shift/reduce conflict for LIST in state 76 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 76 resolved as shift
WARNING: shift/reduce conflict for NOT in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 76 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 76 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 76 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 76 resolved as shift
WARNING: shift/reduce conflict for STRING in state 76 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 76 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 83 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 83 resolved as shift
WARNING: shift/reduce conflict for LET in state 83 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 83 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 83 resolved as shift
WARNING: shift/reduce conflict for LIST in state 83 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 83 resolved as shift
WARNING: shift/reduce conflict for NOT in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 83 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 83 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 83 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 83 resolved as shift
WARNING: shift/reduce conflict for STRING in state 83 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 83 resolved as shift
WARNING: shift/reduce conflict for THEN in state 84 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 84 resolved as shift
WARNING: shift/reduce conflict for LET in state 84 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 84 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 84 resolved as shift
WARNING: shift/reduce conflict for LIST in state 84 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 84 resolved as shift
WARNING: shift/reduce conflict for NOT in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 84 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 84 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 84 resolved as shift
WARNING: shift/reduce conflict for STRING in state 84 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 84 resolved as shift
WARNING: shift/reduce conflict for THEN in state 85 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 85 resolved as shift
WARNING: shift/reduce conflict for LET in state 85 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 85 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 85 resolved as shift
WARNING: shift/reduce conflict for LIST in state 85 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 85 resolved as shift
WARNING: shift/reduce conflict for NOT in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 85 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 85 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 85 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 85 resolved as shift
WARNING: shift/reduce conflict for STRING in state 85 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 133 resolved as shift
WARNING: shift/reduce conflict for COLON in state 133 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 133 resolved as shift
WARNING: shift/reduce conflict for LET in state 133 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 133 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 133 resolved as shift
WARNING: shift/reduce conflict for LIST in state 133 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 133 resolved as shift
WARNING: shift/reduce conflict for NOT in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 133 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 133 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 133 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 133 resolved as shift
WARNING: shift/reduce conflict for STRING in state 133 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for IN in state 158 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 158 resolved as shift
WARNING: shift/reduce conflict for LET in state 158 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 158 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 158 resolved as shift
WARNING: shift/reduce conflict for LIST in state 158 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 158 resolved as shift
WARNING: shift/reduce conflict for NOT in state 158 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 158 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 158 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 158 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 158 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 158 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 158 resolved as shift
WARNING: shift/reduce conflict for STRING in state 158 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 158 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 168 resolved as shift
WARNING: shift/reduce conflict for LET in state 168 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 168 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 168 resolved as shift
WARNING: shift/reduce conflict for LIST in state 168 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 168 resolved as shift
WARNING: shift/reduce conflict for NOT in state 168 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 168 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 168 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 168 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 168 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 168 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 168 resolved as shift
WARNING: shift/reduce conflict for STRING in state 168 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 168 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 173 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 173 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 175 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 175 resolved as shift
WARNING: shift/reduce conflict for LET in state 175 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 175 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 175 resolved as shift
WARNING: shift/reduce conflict for LIST in state 175 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 175 resolved as shift
WARNING: shift/reduce conflict for NOT in state 175 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 175 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 175 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 175 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 175 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 175 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 175 resolved as shift
WARNING: shift/reduce conflict for STRING in state 175 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 175 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 184 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 184 resolved as shift
WARNING: shift/reduce conflict for LET in state 184 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 184 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 184 resolved as shift
WARNING: shift/reduce conflict for LIST in state 184 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 184 resolved as shift
WARNING: shift/reduce conflict for NOT in state 184 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 184 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 184 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 184 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 184 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 184 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 184 resolved as shift
WARNING: shift/reduce conflict for STRING in state 184 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 184 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 185 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 185 resolved as shift
WARNING: shift/reduce conflict for LET in state 185 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 185 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 185 resolved as shift
WARNING: shift/reduce conflict for LIST in state 185 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 185 resolved as shift
WARNING: shift/reduce conflict for NOT in state 185 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 185 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 185 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 185 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 185 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 185 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 185 resolved as shift
WARNING: shift/reduce conflict for STRING in state 185 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 185 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 187 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 187 resolved as shift
WARNING: shift/reduce conflict for LET in state 187 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 187 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 187 resolved as shift
WARNING: shift/reduce conflict for LIST in state 187 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 187 resolved as shift
WARNING: shift/reduce conflict for NOT in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 187 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 187 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 187 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 187 resolved as shift
WARNING: shift/reduce conflict for STRING in state 187 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 187 resolved as shift
WARNING: shift/reduce conflict for DOT in state 190 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 190 resolved as shift
WARNING: shift/reduce conflict for LET in state 190 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 190 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 190 resolved as shift
WARNING: shift/reduce conflict for LIST in state 190 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 190 resolved as shift
WARNING: shift/reduce conflict for NOT in state 190 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 190 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 190 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 190 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 190 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 190 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 190 resolved as shift
WARNING: shift/reduce conflict for STRING in state 190 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 190 resolved as shift
WARNING: shift/reduce conflict for COLON in state 198 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 198 resolved as shift
WARNING: shift/reduce conflict for LET in state 198 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 198 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 198 resolved as shift
WARNING: shift/reduce conflict for LIST in state 198 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 198 resolved as shift
WARNING: shift/reduce conflict for NOT in state 198 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 198 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 198 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 198 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 198 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 198 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 198 resolved as shift
WARNING: shift/reduce conflict for STRING in state 198 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 198 resolved as shift
WARNING: shift/reduce conflict for THEN in state 201 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 201 resolved as shift
WARNING: shift/reduce conflict for LET in state 201 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 201 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 201 resolved as shift
WARNING: shift/reduce conflict for LIST in state 201 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 201 resolved as shift
WARNING: shift/reduce conflict for NOT in state 201 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 201 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 201 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 201 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 201 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 201 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 201 resolved as shift
WARNING: shift/reduce conflict for STRING in state 201 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 201 resolved as shift
WARNING: shift/reduce conflict for CLOSED_BRACKETS in state 203 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 203 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 203 resolved as shift
WARNING: shift/reduce conflict for LET in state 203 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 203 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 203 resolved as shift
WARNING: shift/reduce conflict for LIST in state 203 resolved as shift
WARNING: shift/reduce conflict for NOT in state 203 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 203 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 203 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 203 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 203 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 203 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 203 resolved as shift
WARNING: shift/reduce conflict for STRING in state 203 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 203 resolved as shift
WARNING: shift/reduce conflict for CLOSED_BRACKETS in state 204 resolved as shift
WARNING: shift/reduce conflict for OPEN_BRACKETS in state 204 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 204 resolved as shift
WARNING: shift/reduce conflict for LET in state 204 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 204 resolved as shift
WARNING: shift/reduce conflict for LENGTH in state 204 resolved as shift
WARNING: shift/reduce conflict for LIST in state 204 resolved as shift
WARNING: shift/reduce conflict for NOT in state 204 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 204 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 204 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 204 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 204 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 204 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 204 resolved as shift
WARNING: shift/reduce conflict for STRING in state 204 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 204 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (statement -> expression)
WARNING: rejected rule (list_parameter -> expression) in state 5
WARNING: reduce/reduce conflict in state 35 resolved using rule (list_parameter -> expression list_parameter)
WARNING: rejected rule (expression -> list_parameter) in state 35
WARNING: reduce/reduce conflict in state 83 resolved using rule (param_list -> expression)
WARNING: rejected rule (list_parameter -> expression) in state 83
WARNING: reduce/reduce conflict in state 111 resolved using rule (expression -> IDENTIFIER ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 111
WARNING: reduce/reduce conflict in state 112 resolved using rule (expression -> IDENTIFIER PLUS_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 112
WARNING: reduce/reduce conflict in state 113 resolved using rule (expression -> IDENTIFIER MINUS_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 113
WARNING: reduce/reduce conflict in state 114 resolved using rule (expression -> IDENTIFIER TIMES_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 114
WARNING: reduce/reduce conflict in state 115 resolved using rule (expression -> IDENTIFIER POWER_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 115
WARNING: reduce/reduce conflict in state 116 resolved using rule (expression -> IDENTIFIER DIVIDE_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 116
WARNING: reduce/reduce conflict in state 117 resolved using rule (expression -> IDENTIFIER DIVIDE_FLOOR_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 117
WARNING: reduce/reduce conflict in state 118 resolved using rule (expression -> IDENTIFIER DIVIDE_CEIL_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 118
WARNING: reduce/reduce conflict in state 119 resolved using rule (expression -> IDENTIFIER GREATER_THAN_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 119
WARNING: reduce/reduce conflict in state 120 resolved using rule (expression -> IDENTIFIER SMALLER_THAN_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 120
WARNING: reduce/reduce conflict in state 121 resolved using rule (expression -> IDENTIFIER GREATER_EQUALS_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 121
WARNING: reduce/reduce conflict in state 122 resolved using rule (expression -> IDENTIFIER SMALLER_EQUALS_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 122
WARNING: reduce/reduce conflict in state 123 resolved using rule (expression -> IDENTIFIER EQUALS_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 123
WARNING: reduce/reduce conflict in state 124 resolved using rule (expression -> IDENTIFIER UNEQUALS_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 124
WARNING: reduce/reduce conflict in state 125 resolved using rule (expression -> IDENTIFIER AND_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 125
WARNING: reduce/reduce conflict in state 126 resolved using rule (expression -> IDENTIFIER OR_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 126
WARNING: reduce/reduce conflict in state 127 resolved using rule (expression -> IDENTIFIER XOR_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 127
WARNING: reduce/reduce conflict in state 128 resolved using rule (expression -> IDENTIFIER EXP_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 128
WARNING: reduce/reduce conflict in state 129 resolved using rule (expression -> IDENTIFIER MOD_ASSIGN expression)
WARNING: rejected rule (list_parameter -> expression) in state 129
WARNING: reduce/reduce conflict in state 133 resolved using rule (parameter_pos_expr -> expression)
WARNING: rejected rule (list_parameter -> expression) in state 133
WARNING: reduce/reduce conflict in state 168 resolved using rule (lambda -> LAMBDA parameter LAMBDA_ARROW expression)
WARNING: rejected rule (list_parameter -> expression) in state 168
WARNING: reduce/reduce conflict in state 175 resolved using rule (parameter_keywords_expr -> expression COLON expression)
WARNING: rejected rule (list_parameter -> expression) in state 175
WARNING: reduce/reduce conflict in state 187 resolved using rule (parameter_kw_list -> IDENTIFIER COLON expression)
WARNING: rejected rule (list_parameter -> expression) in state 187
